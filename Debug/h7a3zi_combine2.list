
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007238  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  24000000  08007548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c0  24000050  08007598  00020050  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000210  08007598  00020210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001af4e  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c1d  00000000  00000000  0003afcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001490  00000000  00000000  0003dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001390  00000000  00000000  0003f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032b40  00000000  00000000  00040410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ced  00000000  00000000  00072f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ce0  00000000  00000000  0008bc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001df91d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058bc  00000000  00000000  001df970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000050 	.word	0x24000050
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080074cc 	.word	0x080074cc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000054 	.word	0x24000054
 80002e8:	080074cc 	.word	0x080074cc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fd22 	bl	800103c <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f82e 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f9c4 	bl	8000988 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f96e 	bl	80008e0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f9b8 	bl	8000978 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000608:	f000 f8a4 	bl	8000754 <MX_ADC1_Init>
  MX_TIM16_Init();
 800060c:	f000 f91a 	bl	8000844 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000610:	f000 f940 	bl	8000894 <MX_TIM17_Init>
  // stepper init
  // STEPPERS_Init_TMR(&htim17); // nötig für init look also ISR CODE BEGIN 4
  // STEPPER_SetSpeed(STEPPER_MOTOR1, 14); // set RPM

  // pump on
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <main+0x60>)
 800061a:	f001 ffdf 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 800061e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000622:	f000 fd9d 	bl	8001160 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <main+0x64>)
 800062e:	f001 ffd5 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f000 fd94 	bl	8001160 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <main+0x64>)
 8000640:	f001 ffcc 	bl	80025dc <HAL_GPIO_WritePin>
  //   analyse(&Meas);
  //   // uart_transmit_digital();
  //   uart_transmit_info();
  // }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	4801      	ldr	r0, [pc, #4]	; (8000650 <main+0x60>)
 800064a:	f001 ffc7 	bl	80025dc <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800064e:	e7fe      	b.n	800064e <main+0x5e>
 8000650:	58020000 	.word	0x58020000
 8000654:	58021800 	.word	0x58021800

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	; 0x70
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000662:	224c      	movs	r2, #76	; 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 ff28 	bl	80074bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 ff22 	bl	80074bc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <SystemClock_Config+0xf4>)
 800067a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800067e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000682:	2004      	movs	r0, #4
 8000684:	f001 ffc4 	bl	8002610 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <SystemClock_Config+0xf8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <SystemClock_Config+0xf8>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <SystemClock_Config+0xf8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a4:	bf00      	nop
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <SystemClock_Config+0xf8>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b2:	d1f8      	bne.n	80006a6 <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xf4>)
 80006b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	4a23      	ldr	r2, [pc, #140]	; (800074c <SystemClock_Config+0xf4>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006c4:	2321      	movs	r3, #33	; 0x21
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006de:	2318      	movs	r3, #24
 80006e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ee:	230c      	movs	r3, #12
 80006f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 ffe0 	bl	80026c4 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800070a:	f000 fa8c 	bl	8000c26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	233f      	movs	r3, #63	; 0x3f
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fbca 	bl	8002ecc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800073e:	f000 fa72 	bl	8000c26 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3770      	adds	r7, #112	; 0x70
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58024400 	.word	0x58024400
 8000750:	58024800 	.word	0x58024800

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_ADC1_Init+0xe4>)
 800077a:	4a30      	ldr	r2, [pc, #192]	; (800083c <MX_ADC1_Init+0xe8>)
 800077c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_ADC1_Init+0xe4>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_ADC1_Init+0xe4>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_ADC1_Init+0xe4>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_ADC1_Init+0xe4>)
 8000792:	2204      	movs	r2, #4
 8000794:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_ADC1_Init+0xe4>)
 8000798:	2200      	movs	r2, #0
 800079a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_ADC1_Init+0xe4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007d6:	f000 fe73 	bl	80014c0 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 fa21 	bl	8000c26 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_ADC1_Init+0xe4>)
 80007f0:	f001 fb98 	bl	8001f24 <HAL_ADCEx_MultiModeConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007fa:	f000 fa14 	bl	8000c26 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_ADC1_Init+0xec>)
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000802:	2306      	movs	r3, #6
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800080e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000810:	2304      	movs	r3, #4
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC1_Init+0xe4>)
 8000822:	f000 ffa7 	bl	8001774 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800082c:	f000 f9fb 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2400006c 	.word	0x2400006c
 800083c:	40022000 	.word	0x40022000
 8000840:	3ef08000 	.word	0x3ef08000

08000844 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_TIM16_Init+0x48>)
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <MX_TIM16_Init+0x4c>)
 800084c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_TIM16_Init+0x48>)
 8000850:	f242 527f 	movw	r2, #9599	; 0x257f
 8000854:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_TIM16_Init+0x48>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_TIM16_Init+0x48>)
 800085e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000862:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_TIM16_Init+0x48>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_TIM16_Init+0x48>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_TIM16_Init+0x48>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_TIM16_Init+0x48>)
 8000878:	f004 ff62 	bl	8005740 <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000882:	f000 f9d0 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	240000d0 	.word	0x240000d0
 8000890:	40014400 	.word	0x40014400

08000894 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_TIM17_Init+0x44>)
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <MX_TIM17_Init+0x48>)
 800089c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_TIM17_Init+0x44>)
 80008c6:	f004 ff3b 	bl	8005740 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80008d0:	f000 f9a9 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2400011c 	.word	0x2400011c
 80008dc:	40014800 	.word	0x40014800

080008e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_USART3_UART_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800092a:	f005 f95f 	bl	8005bec <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f977 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800093c:	f006 fa00 	bl	8006d40 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f96e 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800094e:	f006 fa35 	bl	8006dbc <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f965 	bl	8000c26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_USART3_UART_Init+0x90>)
 800095e:	f006 f9b6 	bl	8006cce <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f95d 	bl	8000c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000168 	.word	0x24000168
 8000974:	40004800 	.word	0x40004800

08000978 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	; 0x38
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b95      	ldr	r3, [pc, #596]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a4:	4a93      	ldr	r2, [pc, #588]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ae:	4b91      	ldr	r3, [pc, #580]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009bc:	4b8d      	ldr	r3, [pc, #564]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c2:	4a8c      	ldr	r2, [pc, #560]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009cc:	4b89      	ldr	r3, [pc, #548]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e0:	4a84      	ldr	r2, [pc, #528]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ea:	4b82      	ldr	r3, [pc, #520]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 80009fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fe:	4a7d      	ldr	r2, [pc, #500]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a08:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b77      	ldr	r3, [pc, #476]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1c:	4a75      	ldr	r2, [pc, #468]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a26:	4b73      	ldr	r3, [pc, #460]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a34:	4b6f      	ldr	r3, [pc, #444]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3a:	4a6e      	ldr	r2, [pc, #440]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a44:	4b6b      	ldr	r3, [pc, #428]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a58:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a62:	4b64      	ldr	r3, [pc, #400]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a70:	4b60      	ldr	r3, [pc, #384]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a76:	4a5f      	ldr	r2, [pc, #380]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a80:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <MX_GPIO_Init+0x26c>)
 8000a82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a94:	4858      	ldr	r0, [pc, #352]	; (8000bf8 <MX_GPIO_Init+0x270>)
 8000a96:	f001 fda1 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4857      	ldr	r0, [pc, #348]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000aa0:	f001 fd9c 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f244 0141 	movw	r1, #16449	; 0x4041
 8000aaa:	4855      	ldr	r0, [pc, #340]	; (8000c00 <MX_GPIO_Init+0x278>)
 8000aac:	f001 fd96 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f246 0102 	movw	r1, #24578	; 0x6002
 8000ab6:	4853      	ldr	r0, [pc, #332]	; (8000c04 <MX_GPIO_Init+0x27c>)
 8000ab8:	f001 fd90 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000ac2:	4851      	ldr	r0, [pc, #324]	; (8000c08 <MX_GPIO_Init+0x280>)
 8000ac4:	f001 fd8a 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	484b      	ldr	r0, [pc, #300]	; (8000c0c <MX_GPIO_Init+0x284>)
 8000ade:	f001 fbcd 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	483f      	ldr	r0, [pc, #252]	; (8000bf8 <MX_GPIO_Init+0x270>)
 8000afc:	f001 fbbe 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000b00:	2320      	movs	r3, #32
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4839      	ldr	r0, [pc, #228]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000b18:	f001 fbb0 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin;
 8000b1c:	f244 0341 	movw	r3, #16449	; 0x4041
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4832      	ldr	r0, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x278>)
 8000b36:	f001 fba1 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000b3a:	f246 0302 	movw	r3, #24578	; 0x6002
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	482c      	ldr	r0, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x27c>)
 8000b54:	f001 fb92 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x280>)
 8000b6e:	f001 fb85 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	481d      	ldr	r0, [pc, #116]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000b88:	f001 fb78 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000baa:	f001 fb67 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000bae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_GPIO_Init+0x274>)
 8000bc8:	f001 fb58 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000bcc:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_GPIO_Init+0x280>)
 8000be6:	f001 fb49 	bl	800227c <HAL_GPIO_Init>

}
 8000bea:	bf00      	nop
 8000bec:	3738      	adds	r7, #56	; 0x38
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58021400 	.word	0x58021400
 8000bfc:	58020000 	.word	0x58020000
 8000c00:	58020400 	.word	0x58020400
 8000c04:	58021000 	.word	0x58021000
 8000c08:	58021800 	.word	0x58021800
 8000c0c:	58020800 	.word	0x58020800

08000c10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// calling an ISR for STEPPER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  STEPPER_TMR_OVF_ISR(htim);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f006 fbb5 	bl	8007388 <STEPPER_TMR_OVF_ISR>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2a:	b672      	cpsid	i
}
 8000c2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000c2e:	e7fe      	b.n	8000c2e <Error_Handler+0x8>

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_MspInit+0x30>)
 8000c38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x30>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x30>)
 8000c48:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	58024400 	.word	0x58024400

08000c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0b8      	sub	sp, #224	; 0xe0
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	22b8      	movs	r2, #184	; 0xb8
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 fc19 	bl	80074bc <memset>
  if(hadc->Instance==ADC1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <HAL_ADC_MspInit+0xd4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d14c      	bne.n	8000d2e <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fc8d 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000cd0:	f7ff ffa9 	bl	8000c26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000cd6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000ce6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_ADC_MspInit+0xd8>)
 8000d04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8000d10:	2309      	movs	r3, #9
 8000d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_ADC_MspInit+0xdc>)
 8000d2a:	f001 faa7 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	37e0      	adds	r7, #224	; 0xe0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020000 	.word	0x58020000

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_TIM_Base_MspInit+0x74>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10f      	bne.n	8000d76 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000d5c:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d62:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d68:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d74:	e01b      	b.n	8000dae <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d116      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d82:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_TIM_Base_MspInit+0x78>)
 8000d92:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2076      	movs	r0, #118	; 0x76
 8000da4:	f001 fa35 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000da8:	2076      	movs	r0, #118	; 0x76
 8000daa:	f001 fa4c 	bl	8002246 <HAL_NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40014400 	.word	0x40014400
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	40014800 	.word	0x40014800

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b8      	sub	sp, #224	; 0xe0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	22b8      	movs	r2, #184	; 0xb8
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fb69 	bl	80074bc <memset>
  if(huart->Instance==USART3)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_UART_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d142      	bne.n	8000e7a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fbee 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e0e:	f7ff ff0a 	bl	8000c26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0xc8>)
 8000e76:	f001 fa01 	bl	800227c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	37e0      	adds	r7, #224	; 0xe0
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004800 	.word	0x40004800
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020c00 	.word	0x58020c00

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f920 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM17_IRQHandler+0x10>)
 8000eea:	f004 fc80 	bl	80057ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2400011c 	.word	0x2400011c

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <SystemInit+0xd0>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <SystemInit+0xd0>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <SystemInit+0xd4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d807      	bhi.n	8000f28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <SystemInit+0xd4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 030f 	bic.w	r3, r3, #15
 8000f20:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <SystemInit+0xd4>)
 8000f22:	f043 0303 	orr.w	r3, r3, #3
 8000f26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <SystemInit+0xd8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <SystemInit+0xd8>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <SystemInit+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SystemInit+0xd8>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <SystemInit+0xd8>)
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemInit+0xdc>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <SystemInit+0xd4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <SystemInit+0xd4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 030f 	bic.w	r3, r3, #15
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <SystemInit+0xd4>)
 8000f5c:	f043 0303 	orr.w	r3, r3, #3
 8000f60:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SystemInit+0xd8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <SystemInit+0xd8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <SystemInit+0xd8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <SystemInit+0xd8>)
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <SystemInit+0xe0>)
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <SystemInit+0xd8>)
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <SystemInit+0xe4>)
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <SystemInit+0xd8>)
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <SystemInit+0xe8>)
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <SystemInit+0xd8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <SystemInit+0xd8>)
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <SystemInit+0xe8>)
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <SystemInit+0xd8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <SystemInit+0xd8>)
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <SystemInit+0xe8>)
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <SystemInit+0xd8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <SystemInit+0xd8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <SystemInit+0xd8>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <SystemInit+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <SystemInit+0xec>)
 8000fb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	52002000 	.word	0x52002000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fd8:	02020200 	.word	0x02020200
 8000fdc:	01ff0000 	.word	0x01ff0000
 8000fe0:	01010280 	.word	0x01010280
 8000fe4:	52004000 	.word	0x52004000

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f7ff ff84 	bl	8000ef8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001016:	f006 fa2d 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fae9 	bl	80005f0 <main>
  bx  lr
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001028:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 800102c:	08007548 	.word	0x08007548
  ldr r2, =_sbss
 8001030:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8001034:	24000210 	.word	0x24000210

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001042:	2003      	movs	r0, #3
 8001044:	f001 f8da 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001048:	f002 f8f6 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 800104c:	4602      	mov	r2, r0
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_Init+0x68>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4913      	ldr	r1, [pc, #76]	; (80010a8 <HAL_Init+0x6c>)
 800105a:	5ccb      	ldrb	r3, [r1, r3]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_Init+0x6c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_Init+0x70>)
 800107e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_Init+0x74>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f814 	bl	80010b4 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e002      	b.n	800109c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fdcb 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400
 80010a8:	080074e4 	.word	0x080074e4
 80010ac:	24000004 	.word	0x24000004
 80010b0:	24000000 	.word	0x24000000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e021      	b.n	800110c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_InitTick+0x64>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_InitTick+0x60>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f8bf 	bl	8002262 <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fc:	f001 f889 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x68>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2400000c 	.word	0x2400000c
 8001118:	24000000 	.word	0x24000000
 800111c:	24000008 	.word	0x24000008

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c
 8001144:	240001f8 	.word	0x240001f8

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	240001f8 	.word	0x240001f8

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2400000c 	.word	0x2400000c

080011a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3360      	adds	r3, #96	; 0x60
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	430b      	orrs	r3, r1
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	611a      	str	r2, [r3, #16]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001282:	b480      	push	{r7}
 8001284:	b087      	sub	sp, #28
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	461a      	mov	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
  }
}
 80012ac:	bf00      	nop
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3330      	adds	r3, #48	; 0x30
 80012c8:	461a      	mov	r2, r3
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	4413      	add	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	211f      	movs	r1, #31
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	401a      	ands	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0e9b      	lsrs	r3, r3, #26
 80012f0:	f003 011f 	and.w	r1, r3, #31
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	431a      	orrs	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001304:	bf00      	nop
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3314      	adds	r3, #20
 8001320:	461a      	mov	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	0e5b      	lsrs	r3, r3, #25
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	0d1b      	lsrs	r3, r3, #20
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2107      	movs	r1, #7
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	0d1b      	lsrs	r3, r3, #20
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001380:	43db      	mvns	r3, r3
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0318 	and.w	r3, r3, #24
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800138c:	40d9      	lsrs	r1, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	400b      	ands	r3, r1
 8001392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	000fffff 	.word	0x000fffff

080013b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80013be:	4013      	ands	r3, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6093      	str	r3, [r2, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	5fffffc0 	.word	0x5fffffc0

080013d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e8:	d101      	bne.n	80013ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <LL_ADC_EnableInternalRegulator+0x24>)
 800140a:	4013      	ands	r3, r2
 800140c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	6fffffc0 	.word	0x6fffffc0

08001424 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001438:	d101      	bne.n	800143e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <LL_ADC_IsEnabled+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_ADC_IsEnabled+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b04      	cmp	r3, #4
 8001484:	d101      	bne.n	800148a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e138      	b.n	800174c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fbbb 	bl	8000c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff67 	bl	80013d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff4d 	bl	80013b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff82 	bl	8001424 <LL_ADC_IsInternalRegulatorEnabled>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d114      	bne.n	8001550 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff66 	bl	80013fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001530:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_ADC_Init+0x294>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	4a88      	ldr	r2, [pc, #544]	; (8001758 <HAL_ADC_Init+0x298>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	3301      	adds	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001542:	e002      	b.n	800154a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	3b01      	subs	r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff65 	bl	8001424 <LL_ADC_IsInternalRegulatorEnabled>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10d      	bne.n	800157c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	f043 0210 	orr.w	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff76 	bl	8001472 <LL_ADC_REG_IsConversionOngoing>
 8001586:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 80d2 	bne.w	800173a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 80ce 	bne.w	800173a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015a6:	f043 0202 	orr.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff4a 	bl	800144c <LL_ADC_IsEnabled>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d110      	bne.n	80015e0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015be:	4867      	ldr	r0, [pc, #412]	; (800175c <HAL_ADC_Init+0x29c>)
 80015c0:	f7ff ff44 	bl	800144c <LL_ADC_IsEnabled>
 80015c4:	4604      	mov	r4, r0
 80015c6:	4866      	ldr	r0, [pc, #408]	; (8001760 <HAL_ADC_Init+0x2a0>)
 80015c8:	f7ff ff40 	bl	800144c <LL_ADC_IsEnabled>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4323      	orrs	r3, r4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4619      	mov	r1, r3
 80015da:	4862      	ldr	r0, [pc, #392]	; (8001764 <HAL_ADC_Init+0x2a4>)
 80015dc:	f7ff fde4 	bl	80011a8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7d5b      	ldrb	r3, [r3, #21]
 80015e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ea:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80015f0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7f1b      	ldrb	r3, [r3, #28]
 80015f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7f1b      	ldrb	r3, [r3, #28]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d106      	bne.n	8001612 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	3b01      	subs	r3, #1
 800160a:	045b      	lsls	r3, r3, #17
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_ADC_Init+0x2a8>)
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	69b9      	ldr	r1, [r7, #24]
 800163e:	430b      	orrs	r3, r1
 8001640:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff13 	bl	8001472 <LL_ADC_REG_IsConversionOngoing>
 800164c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ff20 	bl	8001498 <LL_ADC_INJ_IsConversionOngoing>
 8001658:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d14a      	bne.n	80016f6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d147      	bne.n	80016f6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7d1b      	ldrb	r3, [r3, #20]
 800166a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <HAL_ADC_Init+0x2ac>)
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	430b      	orrs	r3, r1
 8001686:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800168e:	2b01      	cmp	r3, #1
 8001690:	d11b      	bne.n	80016ca <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_ADC_Init+0x2b0>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016a6:	3a01      	subs	r2, #1
 80016a8:	0411      	lsls	r1, r2, #16
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016b4:	4311      	orrs	r1, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ba:	430a      	orrs	r2, r1
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	e007      	b.n	80016da <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fb25 	bl	8001d40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10c      	bne.n	8001718 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f023 010f 	bic.w	r1, r3, #15
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
 8001716:	e007      	b.n	8001728 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020f 	bic.w	r2, r2, #15
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	f023 0303 	bic.w	r3, r3, #3
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
 8001738:	e007      	b.n	800174a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800174a:	7ffb      	ldrb	r3, [r7, #31]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3724      	adds	r7, #36	; 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	24000000 	.word	0x24000000
 8001758:	053e2d63 	.word	0x053e2d63
 800175c:	40022000 	.word	0x40022000
 8001760:	40022100 	.word	0x40022100
 8001764:	40022300 	.word	0x40022300
 8001768:	fff0c003 	.word	0xfff0c003
 800176c:	ffffbffc 	.word	0xffffbffc
 8001770:	fc00f81e 	.word	0xfc00f81e

08001774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b0a1      	sub	sp, #132	; 0x84
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a9a      	ldr	r2, [pc, #616]	; (80019f8 <HAL_ADC_ConfigChannel+0x284>)
 800178e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_ConfigChannel+0x2a>
 800179a:	2302      	movs	r3, #2
 800179c:	e2bc      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x5a4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe61 	bl	8001472 <LL_ADC_REG_IsConversionOngoing>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 82a1 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x62>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e9b      	lsrs	r3, r3, #26
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2201      	movs	r2, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	e016      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017e6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80017ee:	2320      	movs	r3, #32
 80017f0:	e003      	b.n	80017fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80017f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2201      	movs	r2, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	69d1      	ldr	r1, [r2, #28]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	430b      	orrs	r3, r1
 8001810:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6859      	ldr	r1, [r3, #4]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	f7ff fd4a 	bl	80012b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fe22 	bl	8001472 <LL_ADC_REG_IsConversionOngoing>
 800182e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe2f 	bl	8001498 <LL_ADC_INJ_IsConversionOngoing>
 800183a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80a0 	bne.w	8001984 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 809c 	bne.w	8001984 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	461a      	mov	r2, r3
 800185a:	f7ff fd59 	bl	8001310 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x110>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	e00a      	b.n	800189a <HAL_ADC_ConfigChannel+0x126>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d027      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6919      	ldr	r1, [r3, #16]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b2:	f7ff fcad 	bl	8001210 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6919      	ldr	r1, [r3, #16]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7e5b      	ldrb	r3, [r3, #25]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d102      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x158>
 80018c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018ca:	e000      	b.n	80018ce <HAL_ADC_ConfigChannel+0x15a>
 80018cc:	2300      	movs	r3, #0
 80018ce:	461a      	mov	r2, r3
 80018d0:	f7ff fcd7 	bl	8001282 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6919      	ldr	r1, [r3, #16]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7e1b      	ldrb	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x176>
 80018e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e8:	e000      	b.n	80018ec <HAL_ADC_ConfigChannel+0x178>
 80018ea:	2300      	movs	r3, #0
 80018ec:	461a      	mov	r2, r3
 80018ee:	f7ff fcaf 	bl	8001250 <LL_ADC_SetDataRightShift>
 80018f2:	e047      	b.n	8001984 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	069b      	lsls	r3, r3, #26
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001916:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800191e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	069b      	lsls	r3, r3, #26
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800193a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	069b      	lsls	r3, r3, #26
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800195e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	069b      	lsls	r3, r3, #26
 8001970:	429a      	cmp	r2, r3
 8001972:	d107      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001982:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fd5f 	bl	800144c <LL_ADC_IsEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	f040 81bb 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f7ff fce0 	bl	8001368 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_ADC_ConfigChannel+0x284>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	f040 8130 	bne.w	8001c14 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x268>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0e9b      	lsrs	r3, r3, #26
 80019ca:	3301      	adds	r3, #1
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	bf94      	ite	ls
 80019d4:	2301      	movls	r3, #1
 80019d6:	2300      	movhi	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e01b      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x2a0>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80019ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d103      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e005      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x290>
 80019f8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80019fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	bf94      	ite	ls
 8001a0e:	2301      	movls	r3, #1
 8001a10:	2300      	movhi	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d079      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x2c0>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	069b      	lsls	r3, r3, #26
 8001a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a32:	e015      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x2ec>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a44:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e003      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	069b      	lsls	r3, r3, #26
 8001a5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x30c>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e9b      	lsrs	r3, r3, #26
 8001a72:	3301      	adds	r3, #1
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	e017      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x33c>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a90:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001a98:	2320      	movs	r3, #32
 8001a9a:	e003      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	ea42 0103 	orr.w	r1, r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10a      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x362>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	051b      	lsls	r3, r3, #20
 8001ad4:	e018      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x394>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e003      	b.n	8001afa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	e07e      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d107      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x3b4>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	3301      	adds	r3, #1
 8001b20:	069b      	lsls	r3, r3, #26
 8001b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b26:	e015      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x3e0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	e003      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	069b      	lsls	r3, r3, #26
 8001b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x400>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0e9b      	lsrs	r3, r3, #26
 8001b66:	3301      	adds	r3, #1
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	e017      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x430>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	61bb      	str	r3, [r7, #24]
  return result;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	e003      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	ea42 0103 	orr.w	r1, r2, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x45c>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b1e      	subs	r3, #30
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bce:	e01b      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x494>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	60fb      	str	r3, [r7, #12]
  return result;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e003      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 021f 	and.w	r2, r3, #31
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b1e      	subs	r3, #30
 8001c02:	051b      	lsls	r3, r3, #20
 8001c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	6892      	ldr	r2, [r2, #8]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff fb7e 	bl	8001310 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da77      	bge.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <HAL_ADC_ConfigChannel+0x5ac>)
 8001c1e:	f7ff fae9 	bl	80011f4 <LL_ADC_GetCommonPathInternalCh>
 8001c22:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c24:	483f      	ldr	r0, [pc, #252]	; (8001d24 <HAL_ADC_ConfigChannel+0x5b0>)
 8001c26:	f7ff fc11 	bl	800144c <LL_ADC_IsEnabled>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	483e      	ldr	r0, [pc, #248]	; (8001d28 <HAL_ADC_ConfigChannel+0x5b4>)
 8001c2e:	f7ff fc0d 	bl	800144c <LL_ADC_IsEnabled>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4323      	orrs	r3, r4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d155      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	; (8001d2c <HAL_ADC_ConfigChannel+0x5b8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d122      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x516>
 8001c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11d      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <HAL_ADC_ConfigChannel+0x5b4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d159      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c5e:	4619      	mov	r1, r3
 8001c60:	482f      	ldr	r0, [pc, #188]	; (8001d20 <HAL_ADC_ConfigChannel+0x5ac>)
 8001c62:	f7ff fab4 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_ADC_ConfigChannel+0x5bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_ADC_ConfigChannel+0x5c0>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001c7a:	e002      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c88:	e040      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <HAL_ADC_ConfigChannel+0x5c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x544>
 8001c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_ADC_ConfigChannel+0x5b4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d131      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481b      	ldr	r0, [pc, #108]	; (8001d20 <HAL_ADC_ConfigChannel+0x5ac>)
 8001cb2:	f7ff fa8c 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb6:	e029      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_ADC_ConfigChannel+0x5c8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d124      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
 8001cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11f      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_ADC_ConfigChannel+0x5b4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11a      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4810      	ldr	r0, [pc, #64]	; (8001d20 <HAL_ADC_ConfigChannel+0x5ac>)
 8001ce0:	f7ff fa75 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
 8001ce4:	e012      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001cf8:	e008      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0220 	orr.w	r2, r3, #32
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3784      	adds	r7, #132	; 0x84
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	40022300 	.word	0x40022300
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022100 	.word	0x40022100
 8001d2c:	cb840000 	.word	0xcb840000
 8001d30:	24000000 	.word	0x24000000
 8001d34:	053e2d63 	.word	0x053e2d63
 8001d38:	bac04000 	.word	0xbac04000
 8001d3c:	cfb80000 	.word	0xcfb80000

08001d40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <ADC_ConfigureBoostMode+0x188>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001d54:	f001 fbea 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8001d58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d62:	d010      	beq.n	8001d86 <ADC_ConfigureBoostMode+0x46>
 8001d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d68:	d871      	bhi.n	8001e4e <ADC_ConfigureBoostMode+0x10e>
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d002      	beq.n	8001d76 <ADC_ConfigureBoostMode+0x36>
 8001d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d74:	d16b      	bne.n	8001e4e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	60fb      	str	r3, [r7, #12]
        break;
 8001d84:	e066      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	60fb      	str	r3, [r7, #12]
        break;
 8001d8c:	e062      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001d8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d92:	f002 fb33 	bl	80043fc <HAL_RCCEx_GetPeriphCLKFreq>
 8001d96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001da0:	d051      	beq.n	8001e46 <ADC_ConfigureBoostMode+0x106>
 8001da2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001da6:	d854      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001da8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001dac:	d047      	beq.n	8001e3e <ADC_ConfigureBoostMode+0xfe>
 8001dae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001db2:	d84e      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001db4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001db8:	d03d      	beq.n	8001e36 <ADC_ConfigureBoostMode+0xf6>
 8001dba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001dbe:	d848      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc4:	d033      	beq.n	8001e2e <ADC_ConfigureBoostMode+0xee>
 8001dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dca:	d842      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001dcc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001dd0:	d029      	beq.n	8001e26 <ADC_ConfigureBoostMode+0xe6>
 8001dd2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001dd6:	d83c      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001dd8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001ddc:	d01a      	beq.n	8001e14 <ADC_ConfigureBoostMode+0xd4>
 8001dde:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001de2:	d836      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001de4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001de8:	d014      	beq.n	8001e14 <ADC_ConfigureBoostMode+0xd4>
 8001dea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001dee:	d830      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df4:	d00e      	beq.n	8001e14 <ADC_ConfigureBoostMode+0xd4>
 8001df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dfa:	d82a      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001dfc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e00:	d008      	beq.n	8001e14 <ADC_ConfigureBoostMode+0xd4>
 8001e02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e06:	d824      	bhi.n	8001e52 <ADC_ConfigureBoostMode+0x112>
 8001e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e0c:	d002      	beq.n	8001e14 <ADC_ConfigureBoostMode+0xd4>
 8001e0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e12:	d11e      	bne.n	8001e52 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	60fb      	str	r3, [r7, #12]
        break;
 8001e24:	e016      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
        break;
 8001e2c:	e012      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	60fb      	str	r3, [r7, #12]
        break;
 8001e34:	e00e      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	60fb      	str	r3, [r7, #12]
        break;
 8001e3c:	e00a      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	09db      	lsrs	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]
        break;
 8001e44:	e006      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	60fb      	str	r3, [r7, #12]
        break;
 8001e4c:	e002      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
        break;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8001e52:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <ADC_ConfigureBoostMode+0x18c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d808      	bhi.n	8001e74 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e70:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001e72:	e025      	b.n	8001ec0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <ADC_ConfigureBoostMode+0x190>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d80a      	bhi.n	8001e92 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8e:	609a      	str	r2, [r3, #8]
}
 8001e90:	e016      	b.n	8001ec0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <ADC_ConfigureBoostMode+0x194>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d80a      	bhi.n	8001eb0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	609a      	str	r2, [r3, #8]
}
 8001eae:	e007      	b.n	8001ec0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022300 	.word	0x40022300
 8001ecc:	005f5e10 	.word	0x005f5e10
 8001ed0:	00bebc20 	.word	0x00bebc20
 8001ed4:	017d7840 	.word	0x017d7840

08001ed8 <LL_ADC_IsEnabled>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <LL_ADC_IsEnabled+0x18>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <LL_ADC_IsEnabled+0x1a>
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_REG_IsConversionOngoing>:
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b09f      	sub	sp, #124	; 0x7c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e080      	b.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d102      	bne.n	8001f62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	e001      	b.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f043 0220 	orr.w	r2, r3, #32
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e05f      	b.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ffb9 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ffb3 	bl	8001efe <LL_ADC_REG_IsConversionOngoing>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d141      	bne.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13e      	bne.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8001fa6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fc2:	4822      	ldr	r0, [pc, #136]	; (800204c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8001fc4:	f7ff ff88 	bl	8001ed8 <LL_ADC_IsEnabled>
 8001fc8:	4604      	mov	r4, r0
 8001fca:	4821      	ldr	r0, [pc, #132]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8001fcc:	f7ff ff84 	bl	8001ed8 <LL_ADC_IsEnabled>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4323      	orrs	r3, r4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d12e      	bne.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6811      	ldr	r1, [r2, #0]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	6892      	ldr	r2, [r2, #8]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff0:	e021      	b.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ffc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ffe:	4813      	ldr	r0, [pc, #76]	; (800204c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002000:	f7ff ff6a 	bl	8001ed8 <LL_ADC_IsEnabled>
 8002004:	4604      	mov	r4, r0
 8002006:	4812      	ldr	r0, [pc, #72]	; (8002050 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002008:	f7ff ff66 	bl	8001ed8 <LL_ADC_IsEnabled>
 800200c:	4603      	mov	r3, r0
 800200e:	4323      	orrs	r3, r4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d110      	bne.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800201a:	4013      	ands	r3, r2
 800201c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800201e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002020:	e009      	b.n	8002036 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0220 	orr.w	r2, r3, #32
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002034:	e000      	b.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002036:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002040:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002044:	4618      	mov	r0, r3
 8002046:	377c      	adds	r7, #124	; 0x7c
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	40022000 	.word	0x40022000
 8002050:	40022100 	.word	0x40022100
 8002054:	40022300 	.word	0x40022300
 8002058:	fffff0e0 	.word	0xfffff0e0

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <__NVIC_SetPriorityGrouping+0x40>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	4313      	orrs	r3, r2
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x40>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	05fa0000 	.word	0x05fa0000

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff29 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002220:	f7ff ff40 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 8002224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff90 	bl	8002150 <NVIC_EncodePriority>
 8002230:	4602      	mov	r2, r0
 8002232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff5f 	bl	80020fc <__NVIC_SetPriority>
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff33 	bl	80020c0 <__NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffa4 	bl	80021b8 <SysTick_Config>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <HAL_GPIO_Init+0x234>)
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800228e:	e194      	b.n	80025ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8186 	beq.w	80025b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x44>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d130      	bne.n	8002322 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f6:	2201      	movs	r2, #1
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 0201 	and.w	r2, r3, #1
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d017      	beq.n	800235e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d123      	bne.n	80023b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	69b9      	ldr	r1, [r7, #24]
 80023ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80e0 	beq.w	80025b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x238>)
 80023f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <HAL_GPIO_Init+0x238>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_GPIO_Init+0x238>)
 8002406:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_GPIO_Init+0x23c>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a20      	ldr	r2, [pc, #128]	; (80024bc <HAL_GPIO_Init+0x240>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d052      	beq.n	80024e4 <HAL_GPIO_Init+0x268>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_GPIO_Init+0x244>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_GPIO_Init+0x22e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_GPIO_Init+0x248>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <HAL_GPIO_Init+0x22a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_GPIO_Init+0x24c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x226>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_GPIO_Init+0x250>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x222>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_GPIO_Init+0x254>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x21e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_GPIO_Init+0x258>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x21a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_GPIO_Init+0x25c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x216>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_GPIO_Init+0x260>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x212>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_GPIO_Init+0x264>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x20e>
 8002486:	2309      	movs	r3, #9
 8002488:	e02d      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 800248a:	230a      	movs	r3, #10
 800248c:	e02b      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 800248e:	2308      	movs	r3, #8
 8002490:	e029      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 8002492:	2307      	movs	r3, #7
 8002494:	e027      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 8002496:	2306      	movs	r3, #6
 8002498:	e025      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 800249a:	2305      	movs	r3, #5
 800249c:	e023      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 800249e:	2304      	movs	r3, #4
 80024a0:	e021      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e01f      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e01d      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e01b      	b.n	80024e6 <HAL_GPIO_Init+0x26a>
 80024ae:	bf00      	nop
 80024b0:	58000080 	.word	0x58000080
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58000400 	.word	0x58000400
 80024bc:	58020000 	.word	0x58020000
 80024c0:	58020400 	.word	0x58020400
 80024c4:	58020800 	.word	0x58020800
 80024c8:	58020c00 	.word	0x58020c00
 80024cc:	58021000 	.word	0x58021000
 80024d0:	58021400 	.word	0x58021400
 80024d4:	58021800 	.word	0x58021800
 80024d8:	58021c00 	.word	0x58021c00
 80024dc:	58022000 	.word	0x58022000
 80024e0:	58022400 	.word	0x58022400
 80024e4:	2300      	movs	r3, #0
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f6:	4938      	ldr	r1, [pc, #224]	; (80025d8 <HAL_GPIO_Init+0x35c>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800252a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f ae63 	bne.w	8002290 <HAL_GPIO_Init+0x14>
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	3724      	adds	r7, #36	; 0x24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	58000400 	.word	0x58000400

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002618:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	2b06      	cmp	r3, #6
 8002622:	d00a      	beq.n	800263a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d001      	beq.n	8002636 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e040      	b.n	80026b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e03e      	b.n	80026b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002642:	491f      	ldr	r1, [pc, #124]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4313      	orrs	r3, r2
 8002648:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800264a:	f7fe fd7d 	bl	8001148 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002650:	e009      	b.n	8002666 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002652:	f7fe fd79 	bl	8001148 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d901      	bls.n	8002666 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e028      	b.n	80026b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002672:	d1ee      	bne.n	8002652 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b1e      	cmp	r3, #30
 8002678:	d008      	beq.n	800268c <HAL_PWREx_ConfigSupply+0x7c>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b2e      	cmp	r3, #46	; 0x2e
 800267e:	d005      	beq.n	800268c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d002      	beq.n	800268c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b2d      	cmp	r3, #45	; 0x2d
 800268a:	d114      	bne.n	80026b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800268c:	f7fe fd5c 	bl	8001148 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002692:	e009      	b.n	80026a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002694:	f7fe fd58 	bl	8001148 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a2:	d901      	bls.n	80026a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d1ee      	bne.n	8002694 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	58024800 	.word	0x58024800

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e3f4      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80b3 	beq.w	800284a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e4:	4b95      	ldr	r3, [pc, #596]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d007      	beq.n	800270a <HAL_RCC_OscConfig+0x46>
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	2b18      	cmp	r3, #24
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_OscConfig+0x62>
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d10d      	bne.n	8002726 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270a:	4b8c      	ldr	r3, [pc, #560]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8098 	beq.w	8002848 <HAL_RCC_OscConfig+0x184>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 8093 	bne.w	8002848 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e3cc      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x7a>
 8002730:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a81      	ldr	r2, [pc, #516]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e058      	b.n	80027f0 <HAL_RCC_OscConfig+0x12c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d112      	bne.n	800276c <HAL_RCC_OscConfig+0xa8>
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002758:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e041      	b.n	80027f0 <HAL_RCC_OscConfig+0x12c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d112      	bne.n	800279c <HAL_RCC_OscConfig+0xd8>
 8002776:	4b71      	ldr	r3, [pc, #452]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a70      	ldr	r2, [pc, #448]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6e      	ldr	r3, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6d      	ldr	r2, [pc, #436]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6b      	ldr	r3, [pc, #428]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6a      	ldr	r2, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e029      	b.n	80027f0 <HAL_RCC_OscConfig+0x12c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x108>
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a64      	ldr	r2, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b62      	ldr	r3, [pc, #392]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a61      	ldr	r2, [pc, #388]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e011      	b.n	80027f0 <HAL_RCC_OscConfig+0x12c>
 80027cc:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80027ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fca6 	bl	8001148 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fca2 	bl	8001148 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e356      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x13c>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fc92 	bl	8001148 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fc8e 	bl	8001148 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e342      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x164>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 808d 	beq.w	8002972 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002860:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <HAL_RCC_OscConfig+0x1ba>
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b18      	cmp	r3, #24
 8002872:	d137      	bne.n	80028e4 <HAL_RCC_OscConfig+0x220>
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d132      	bne.n	80028e4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x1d2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e314      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 0219 	bic.w	r2, r3, #25
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4926      	ldr	r1, [pc, #152]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a8:	f7fe fc4e 	bl	8001148 <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe fc4a 	bl	8001148 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e2fe      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	4917      	ldr	r1, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e2:	e046      	b.n	8002972 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d029      	beq.n	8002940 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 0219 	bic.w	r2, r3, #25
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4910      	ldr	r1, [pc, #64]	; (800293c <HAL_RCC_OscConfig+0x278>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc23 	bl	8001148 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fc1f 	bl	8001148 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e2d3      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_OscConfig+0x278>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4902      	ldr	r1, [pc, #8]	; (800293c <HAL_RCC_OscConfig+0x278>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x2ae>
 800293a:	bf00      	nop
 800293c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002940:	4b97      	ldr	r3, [pc, #604]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a96      	ldr	r2, [pc, #600]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fbfc 	bl	8001148 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002954:	f7fe fbf8 	bl	8001148 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e2ac      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002966:	4b8e      	ldr	r3, [pc, #568]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06a      	beq.n	8002a54 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002986:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002988:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d007      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2e0>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b18      	cmp	r3, #24
 8002998:	d11b      	bne.n	80029d2 <HAL_RCC_OscConfig+0x30e>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d116      	bne.n	80029d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a4:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x2f8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e281      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029bc:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	4975      	ldr	r1, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d0:	e040      	b.n	8002a54 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d023      	beq.n	8002a22 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029da:	4b71      	ldr	r3, [pc, #452]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a70      	ldr	r2, [pc, #448]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fbaf 	bl	8001148 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029ee:	f7fe fbab 	bl	8001148 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e25f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a00:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0c:	4b64      	ldr	r3, [pc, #400]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	4961      	ldr	r1, [pc, #388]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
 8002a20:	e018      	b.n	8002a54 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fb8b 	bl	8001148 <HAL_GetTick>
 8002a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a36:	f7fe fb87 	bl	8001148 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e23b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a48:	4b55      	ldr	r3, [pc, #340]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d036      	beq.n	8002ace <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d019      	beq.n	8002a9c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a68:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fb68 	bl	8001148 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fb64 	bl	8001148 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e218      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3b8>
 8002a9a:	e018      	b.n	8002ace <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b40      	ldr	r3, [pc, #256]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa0:	4a3f      	ldr	r2, [pc, #252]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fb4e 	bl	8001148 <HAL_GetTick>
 8002aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fb4a 	bl	8001148 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1fe      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2e      	ldr	r2, [pc, #184]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fb2b 	bl	8001148 <HAL_GetTick>
 8002af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7fe fb27 	bl	8001148 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1db      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x432>
 8002b14:	e018      	b.n	8002b48 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fb11 	bl	8001148 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b2a:	f7fe fb0d 	bl	8001148 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1c1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80af 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_RCC_OscConfig+0x4e0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_RCC_OscConfig+0x4e0>)
 8002b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b62:	f7fe faf1 	bl	8001148 <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b6a:	f7fe faed 	bl	8001148 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e1a1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_OscConfig+0x4e0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4e4>
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a02      	ldr	r2, [pc, #8]	; (8002ba0 <HAL_RCC_OscConfig+0x4dc>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	e05b      	b.n	8002c56 <HAL_RCC_OscConfig+0x592>
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58024800 	.word	0x58024800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x512>
 8002bb0:	4b9d      	ldr	r3, [pc, #628]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a9c      	ldr	r2, [pc, #624]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	4b9a      	ldr	r3, [pc, #616]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a99      	ldr	r2, [pc, #612]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b97      	ldr	r3, [pc, #604]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a96      	ldr	r2, [pc, #600]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	e03f      	b.n	8002c56 <HAL_RCC_OscConfig+0x592>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d112      	bne.n	8002c04 <HAL_RCC_OscConfig+0x540>
 8002bde:	4b92      	ldr	r3, [pc, #584]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a91      	ldr	r2, [pc, #580]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a8e      	ldr	r2, [pc, #568]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a8b      	ldr	r2, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70
 8002c02:	e028      	b.n	8002c56 <HAL_RCC_OscConfig+0x592>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b85      	cmp	r3, #133	; 0x85
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0x56e>
 8002c0c:	4b86      	ldr	r3, [pc, #536]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a85      	ldr	r2, [pc, #532]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a82      	ldr	r2, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a7f      	ldr	r2, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	e011      	b.n	8002c56 <HAL_RCC_OscConfig+0x592>
 8002c32:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a7c      	ldr	r2, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a79      	ldr	r2, [pc, #484]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b77      	ldr	r3, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a76      	ldr	r2, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d015      	beq.n	8002c8a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fa73 	bl	8001148 <HAL_GetTick>
 8002c62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fa6f 	bl	8001148 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e121      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ee      	beq.n	8002c66 <HAL_RCC_OscConfig+0x5a2>
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fa5d 	bl	8001148 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fa59 	bl	8001148 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e10b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca8:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8100 	beq.w	8002ebe <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cbe:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc6:	2b18      	cmp	r3, #24
 8002cc8:	f000 80bb 	beq.w	8002e42 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 8095 	bne.w	8002e00 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a53      	ldr	r2, [pc, #332]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fa31 	bl	8001148 <HAL_GetTick>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fe fa2d 	bl	8001148 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0e1      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0c:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x768>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d18:	0112      	lsls	r2, r2, #4
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	4942      	ldr	r1, [pc, #264]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	628b      	str	r3, [r1, #40]	; 0x28
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	3b01      	subs	r3, #1
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d52:	4935      	ldr	r1, [pc, #212]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d5e:	f023 0301 	bic.w	r3, r3, #1
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d70:	00d2      	lsls	r2, r2, #3
 8002d72:	492d      	ldr	r1, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f023 020c 	bic.w	r2, r3, #12
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4928      	ldr	r1, [pc, #160]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f023 0202 	bic.w	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4924      	ldr	r1, [pc, #144]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f9b6 	bl	8001148 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f9b2 	bl	8001148 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e066      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x71c>
 8002dfe:	e05e      	b.n	8002ebe <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x764>)
 8002e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f99c 	bl	8001148 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e12:	e00f      	b.n	8002e34 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe f998 	bl	8001148 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	fffffc0c 	.word	0xfffffc0c
 8002e30:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x804>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e9      	bne.n	8002e14 <HAL_RCC_OscConfig+0x750>
 8002e40:	e03d      	b.n	8002ebe <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_RCC_OscConfig+0x804>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_OscConfig+0x804>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d031      	beq.n	8002eba <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0203 	and.w	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d12a      	bne.n	8002eba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d122      	bne.n	8002eba <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d11a      	bne.n	8002eba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d111      	bne.n	8002eba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d108      	bne.n	8002eba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	0e1b      	lsrs	r3, r3, #24
 8002eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3730      	adds	r7, #48	; 0x30
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	58024400 	.word	0x58024400

08002ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e19c      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b8a      	ldr	r3, [pc, #552]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b87      	ldr	r3, [pc, #540]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 020f 	bic.w	r2, r3, #15
 8002ef6:	4985      	ldr	r1, [pc, #532]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b83      	ldr	r3, [pc, #524]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e184      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d908      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f2c:	4b78      	ldr	r3, [pc, #480]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	4975      	ldr	r1, [pc, #468]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d908      	bls.n	8002f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	496a      	ldr	r1, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	495e      	ldr	r1, [pc, #376]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fb6:	4b56      	ldr	r3, [pc, #344]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4953      	ldr	r1, [pc, #332]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d908      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f023 020f 	bic.w	r2, r3, #15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4947      	ldr	r1, [pc, #284]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d055      	beq.n	80030ae <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4940      	ldr	r1, [pc, #256]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8003010:	4313      	orrs	r3, r2
 8003012:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d107      	bne.n	800302c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800301c:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d121      	bne.n	800306c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0f6      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003034:	4b36      	ldr	r3, [pc, #216]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d115      	bne.n	800306c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0ea      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0de      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0d6      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f023 0207 	bic.w	r2, r3, #7
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fe f863 	bl	8001148 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003084:	e00a      	b.n	800309c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003086:	f7fe f85f 	bl	8001148 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0be      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d1eb      	bne.n	8003086 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d208      	bcs.n	80030dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	490e      	ldr	r1, [pc, #56]	; (8003110 <HAL_RCC_ClockConfig+0x244>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d214      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4906      	ldr	r1, [pc, #24]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e086      	b.n	800321a <HAL_RCC_ClockConfig+0x34e>
 800310c:	52002000 	.word	0x52002000
 8003110:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d010      	beq.n	8003142 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800312c:	429a      	cmp	r2, r3
 800312e:	d208      	bcs.n	8003142 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003130:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	4939      	ldr	r1, [pc, #228]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 800313e:	4313      	orrs	r3, r2
 8003140:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d010      	beq.n	8003170 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315a:	429a      	cmp	r2, r3
 800315c:	d208      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	492e      	ldr	r1, [pc, #184]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 800316c:	4313      	orrs	r3, r2
 800316e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003188:	429a      	cmp	r2, r3
 800318a:	d208      	bcs.n	800319e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 800319a:	4313      	orrs	r3, r2
 800319c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80031cc:	f000 f834 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	4912      	ldr	r1, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x35c>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x358>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <HAL_RCC_ClockConfig+0x35c>)
 80031f4:	5cd3      	ldrb	r3, [r2, r3]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x360>)
 8003202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003204:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x364>)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x368>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd ff50 	bl	80010b4 <HAL_InitTick>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	58024400 	.word	0x58024400
 8003228:	080074e4 	.word	0x080074e4
 800322c:	24000004 	.word	0x24000004
 8003230:	24000000 	.word	0x24000000
 8003234:	24000008 	.word	0x24000008

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323e:	4bb3      	ldr	r3, [pc, #716]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003246:	2b18      	cmp	r3, #24
 8003248:	f200 8155 	bhi.w	80034f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	080032b9 	.word	0x080032b9
 8003258:	080034f7 	.word	0x080034f7
 800325c:	080034f7 	.word	0x080034f7
 8003260:	080034f7 	.word	0x080034f7
 8003264:	080034f7 	.word	0x080034f7
 8003268:	080034f7 	.word	0x080034f7
 800326c:	080034f7 	.word	0x080034f7
 8003270:	080034f7 	.word	0x080034f7
 8003274:	080032df 	.word	0x080032df
 8003278:	080034f7 	.word	0x080034f7
 800327c:	080034f7 	.word	0x080034f7
 8003280:	080034f7 	.word	0x080034f7
 8003284:	080034f7 	.word	0x080034f7
 8003288:	080034f7 	.word	0x080034f7
 800328c:	080034f7 	.word	0x080034f7
 8003290:	080034f7 	.word	0x080034f7
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080034f7 	.word	0x080034f7
 800329c:	080034f7 	.word	0x080034f7
 80032a0:	080034f7 	.word	0x080034f7
 80032a4:	080034f7 	.word	0x080034f7
 80032a8:	080034f7 	.word	0x080034f7
 80032ac:	080034f7 	.word	0x080034f7
 80032b0:	080034f7 	.word	0x080034f7
 80032b4:	080032eb 	.word	0x080032eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b8:	4b94      	ldr	r3, [pc, #592]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032c4:	4b91      	ldr	r3, [pc, #580]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	4a90      	ldr	r2, [pc, #576]	; (8003510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032d6:	e111      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032d8:	4b8d      	ldr	r3, [pc, #564]	; (8003510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032da:	61bb      	str	r3, [r7, #24]
    break;
 80032dc:	e10e      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032de:	4b8d      	ldr	r3, [pc, #564]	; (8003514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e0:	61bb      	str	r3, [r7, #24]
    break;
 80032e2:	e10b      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032e4:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032e6:	61bb      	str	r3, [r7, #24]
    break;
 80032e8:	e108      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032ea:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032f4:	4b85      	ldr	r3, [pc, #532]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003300:	4b82      	ldr	r3, [pc, #520]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800330a:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80e1 	beq.w	80034f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f000 8083 	beq.w	800343c <HAL_RCC_GetSysClockFreq+0x204>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b02      	cmp	r3, #2
 800333a:	f200 80a1 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x248>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x114>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d056      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800334a:	e099      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800334c:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d02d      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003358:	4b6c      	ldr	r3, [pc, #432]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	08db      	lsrs	r3, r3, #3
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	4a6b      	ldr	r2, [pc, #428]	; (8003510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a02 	vldr	s12, [r7, #8]
 8003396:	eddf 5a61 	vldr	s11, [pc, #388]	; 800351c <HAL_RCC_GetSysClockFreq+0x2e4>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033b2:	e087      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003520 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b51      	ldr	r3, [pc, #324]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800351c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033f6:	e065      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003524 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b40      	ldr	r3, [pc, #256]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800351c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800343a:	e043      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800351c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347e:	e021      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800351c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	3301      	adds	r3, #1
 80034d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80034e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e8:	ee17 3a90 	vmov	r3, s15
 80034ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034ee:	e005      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f8:	61bb      	str	r3, [r7, #24]
    break;
 80034fa:	bf00      	nop
  }

  return sysclockfreq;
 80034fc:	69bb      	ldr	r3, [r7, #24]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	58024400 	.word	0x58024400
 8003510:	03d09000 	.word	0x03d09000
 8003514:	003d0900 	.word	0x003d0900
 8003518:	007a1200 	.word	0x007a1200
 800351c:	46000000 	.word	0x46000000
 8003520:	4c742400 	.word	0x4c742400
 8003524:	4a742400 	.word	0x4a742400
 8003528:	4af42400 	.word	0x4af42400

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003532:	f7ff fe81 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_RCC_GetHCLKFreq+0x50>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490f      	ldr	r1, [pc, #60]	; (8003580 <HAL_RCC_GetHCLKFreq+0x54>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_GetHCLKFreq+0x50>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_GetHCLKFreq+0x54>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	fa22 f303 	lsr.w	r3, r2, r3
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_RCC_GetHCLKFreq+0x58>)
 8003568:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800356a:	4a07      	ldr	r2, [pc, #28]	; (8003588 <HAL_RCC_GetHCLKFreq+0x5c>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCC_GetHCLKFreq+0x58>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	58024400 	.word	0x58024400
 8003580:	080074e4 	.word	0x080074e4
 8003584:	24000004 	.word	0x24000004
 8003588:	24000000 	.word	0x24000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003590:	f7ff ffcc 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4904      	ldr	r1, [pc, #16]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	58024400 	.word	0x58024400
 80035b4:	080074e4 	.word	0x080074e4

080035b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80035bc:	f7ff ffb6 	bl	800352c <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	58024400 	.word	0x58024400
 80035e0:	080074e4 	.word	0x080074e4

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03f      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800360a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003614:	d018      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003624:	d007      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b9f      	ldr	r3, [pc, #636]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a9e      	ldr	r2, [pc, #632]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f001 ff1b 	bl	8005478 <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f001 ffc4 	bl	80055dc <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003668:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003674:	498c      	ldr	r1, [pc, #560]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	650b      	str	r3, [r1, #80]	; 0x50
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003690:	2b04      	cmp	r3, #4
 8003692:	d826      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036e9 	.word	0x080036e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a7c      	ldr	r2, [pc, #496]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e015      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fed7 	bl	8005478 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 ff80 	bl	80055dc <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e003      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	f023 0207 	bic.w	r2, r3, #7
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	496a      	ldr	r1, [pc, #424]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	650b      	str	r3, [r1, #80]	; 0x50
 8003702:	e001      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003710:	2b00      	cmp	r3, #0
 8003712:	d04a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800371c:	d031      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800371e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003722:	d82b      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003728:	d02d      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d825      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003730:	2bc0      	cmp	r3, #192	; 0xc0
 8003732:	d02a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003734:	2bc0      	cmp	r3, #192	; 0xc0
 8003736:	d821      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d016      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d81d      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d007      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003748:	e018      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374a:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003756:	e019      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fe8a 	bl	8005478 <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003768:	e010      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3324      	adds	r3, #36	; 0x24
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f001 ff33 	bl	80055dc <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800377a:	e007      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	e004      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800378a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003792:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003796:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	4942      	ldr	r1, [pc, #264]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	650b      	str	r3, [r1, #80]	; 0x50
 80037a4:	e001      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80037be:	d036      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80037c0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80037c4:	d830      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ca:	d032      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	d82a      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80037d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037d6:	d02e      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80037d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037dc:	d824      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d018      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d81e      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f2:	d007      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80037f4:	e018      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f6:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003802:	e019      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fe34 	bl	8005478 <RCCEx_PLL2_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003814:	e010      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3324      	adds	r3, #36	; 0x24
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fedd 	bl	80055dc <RCCEx_PLL3_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003826:	e007      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	e004      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800382e:	bf00      	nop
 8003830:	e002      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003832:	bf00      	nop
 8003834:	e000      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	4917      	ldr	r1, [pc, #92]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	650b      	str	r3, [r1, #80]	; 0x50
 8003850:	e001      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d034      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d01c      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d817      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d00c      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d813      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d018      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800387a:	2b10      	cmp	r3, #16
 800387c:	d10f      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800388a:	e010      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fdf0 	bl	8005478 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800389c:	e007      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038a8:	58024400 	.word	0x58024400
      break;
 80038ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038b4:	4b9b      	ldr	r3, [pc, #620]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c0:	4998      	ldr	r1, [pc, #608]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d047      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e0:	d030      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e6:	d82a      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80038e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038ec:	d02c      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80038ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f2:	d824      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f8:	d018      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fe:	d81e      	bhi.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d007      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800390a:	e018      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b85      	ldr	r3, [pc, #532]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a84      	ldr	r2, [pc, #528]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003918:	e017      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f001 fda9 	bl	8005478 <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800392a:	e00e      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3324      	adds	r3, #36	; 0x24
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fe52 	bl	80055dc <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800393c:	e005      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
      break;
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003950:	4b74      	ldr	r3, [pc, #464]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	4971      	ldr	r1, [pc, #452]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800395e:	4313      	orrs	r3, r2
 8003960:	650b      	str	r3, [r1, #80]	; 0x50
 8003962:	e001      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d049      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d02e      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800397e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003982:	d828      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003988:	d02a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800398a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800398e:	d822      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003994:	d026      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003996:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800399a:	d81c      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800399c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a6:	d816      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01d      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d111      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fd5d 	bl	8005478 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039c2:	e012      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3324      	adds	r3, #36	; 0x24
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fe06 	bl	80055dc <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039d4:	e009      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
      break;
 80039da:	e006      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80039dc:	bf00      	nop
 80039de:	e004      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039f0:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fc:	4949      	ldr	r1, [pc, #292]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	650b      	str	r3, [r1, #80]	; 0x50
 8003a02:	e001      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d053      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a1a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003a1e:	d034      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a20:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003a24:	d82e      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a2a:	d030      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a30:	d828      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a36:	d02c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d822      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a42:	d028      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a48:	d81c      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a54:	d816      	bhi.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01f      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a5e:	d111      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fd06 	bl	8005478 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a70:	e014      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3324      	adds	r3, #36	; 0x24
 8003a76:	2101      	movs	r1, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fdaf 	bl	80055dc <RCCEx_PLL3_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a82:	e00b      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	75fb      	strb	r3, [r7, #23]
      break;
 8003a88:	e008      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e006      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e004      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ab0:	491c      	ldr	r1, [pc, #112]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ab6:	e001      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d031      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d00e      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad6:	d814      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae0:	d10f      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003aee:	e00c      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fcbe 	bl	8005478 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1c:	4901      	ldr	r1, [pc, #4]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	650b      	str	r3, [r1, #80]	; 0x50
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d032      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d81b      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b7f 	.word	0x08003b7f
 8003b4c:	08003b59 	.word	0x08003b59
 8003b50:	08003b67 	.word	0x08003b67
 8003b54:	08003b7f 	.word	0x08003b7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4bb2      	ldr	r3, [pc, #712]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	4ab1      	ldr	r2, [pc, #708]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b64:	e00c      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 fc83 	bl	8005478 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b86:	4ba7      	ldr	r3, [pc, #668]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	49a4      	ldr	r1, [pc, #656]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b98:	e001      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8086 	beq.w	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bac:	4b9e      	ldr	r3, [pc, #632]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a9d      	ldr	r2, [pc, #628]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fac6 	bl	8001148 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fd fac2 	bl	8001148 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d902      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	75fb      	strb	r3, [r7, #23]
        break;
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd4:	4b94      	ldr	r3, [pc, #592]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ef      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d166      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003be6:	4b8f      	ldr	r3, [pc, #572]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003be8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bf0:	4053      	eors	r3, r2
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c04:	4b87      	ldr	r3, [pc, #540]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a86      	ldr	r2, [pc, #536]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b84      	ldr	r3, [pc, #528]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	4a83      	ldr	r2, [pc, #524]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c1c:	4a81      	ldr	r2, [pc, #516]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fa8b 	bl	8001148 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c34:	e00b      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fd fa87 	bl	8001148 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d902      	bls.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c4c:	e005      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c4e:	4b75      	ldr	r3, [pc, #468]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ed      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d126      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003c70:	4b6c      	ldr	r3, [pc, #432]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c7e:	0919      	lsrs	r1, r3, #4
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c82:	400b      	ands	r3, r1
 8003c84:	4967      	ldr	r1, [pc, #412]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	610b      	str	r3, [r1, #16]
 8003c8a:	e005      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003c8c:	4b65      	ldr	r3, [pc, #404]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	4a64      	ldr	r2, [pc, #400]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c96:	6113      	str	r3, [r2, #16]
 8003c98:	4b62      	ldr	r3, [pc, #392]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca6:	495f      	ldr	r1, [pc, #380]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	670b      	str	r3, [r1, #112]	; 0x70
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	75bb      	strb	r3, [r7, #22]
 8003cb2:	e001      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d07f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	2b28      	cmp	r3, #40	; 0x28
 8003ccc:	d866      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003cce:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003da3 	.word	0x08003da3
 8003cd8:	08003d9d 	.word	0x08003d9d
 8003cdc:	08003d9d 	.word	0x08003d9d
 8003ce0:	08003d9d 	.word	0x08003d9d
 8003ce4:	08003d9d 	.word	0x08003d9d
 8003ce8:	08003d9d 	.word	0x08003d9d
 8003cec:	08003d9d 	.word	0x08003d9d
 8003cf0:	08003d9d 	.word	0x08003d9d
 8003cf4:	08003d79 	.word	0x08003d79
 8003cf8:	08003d9d 	.word	0x08003d9d
 8003cfc:	08003d9d 	.word	0x08003d9d
 8003d00:	08003d9d 	.word	0x08003d9d
 8003d04:	08003d9d 	.word	0x08003d9d
 8003d08:	08003d9d 	.word	0x08003d9d
 8003d0c:	08003d9d 	.word	0x08003d9d
 8003d10:	08003d9d 	.word	0x08003d9d
 8003d14:	08003d8b 	.word	0x08003d8b
 8003d18:	08003d9d 	.word	0x08003d9d
 8003d1c:	08003d9d 	.word	0x08003d9d
 8003d20:	08003d9d 	.word	0x08003d9d
 8003d24:	08003d9d 	.word	0x08003d9d
 8003d28:	08003d9d 	.word	0x08003d9d
 8003d2c:	08003d9d 	.word	0x08003d9d
 8003d30:	08003d9d 	.word	0x08003d9d
 8003d34:	08003da3 	.word	0x08003da3
 8003d38:	08003d9d 	.word	0x08003d9d
 8003d3c:	08003d9d 	.word	0x08003d9d
 8003d40:	08003d9d 	.word	0x08003d9d
 8003d44:	08003d9d 	.word	0x08003d9d
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	08003d9d 	.word	0x08003d9d
 8003d50:	08003d9d 	.word	0x08003d9d
 8003d54:	08003da3 	.word	0x08003da3
 8003d58:	08003d9d 	.word	0x08003d9d
 8003d5c:	08003d9d 	.word	0x08003d9d
 8003d60:	08003d9d 	.word	0x08003d9d
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003d9d 	.word	0x08003d9d
 8003d70:	08003d9d 	.word	0x08003d9d
 8003d74:	08003da3 	.word	0x08003da3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fb7a 	bl	8005478 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3324      	adds	r3, #36	; 0x24
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fc23 	bl	80055dc <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	491a      	ldr	r1, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	654b      	str	r3, [r1, #84]	; 0x54
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d821      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003df9 	.word	0x08003df9
 8003de8:	08003e0b 	.word	0x08003e0b
 8003dec:	08003e31 	.word	0x08003e31
 8003df0:	08003e31 	.word	0x08003e31
 8003df4:	08003e31 	.word	0x08003e31
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fb3a 	bl	8005478 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e08:	e013      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3324      	adds	r3, #36	; 0x24
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fbe3 	bl	80055dc <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e20:	e007      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58024800 	.word	0x58024800
 8003e2c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e38:	4b9f      	ldr	r3, [pc, #636]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3c:	f023 0207 	bic.w	r2, r3, #7
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e44:	499c      	ldr	r1, [pc, #624]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	654b      	str	r3, [r1, #84]	; 0x54
 8003e4a:	e001      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d039      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d820      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003eaf 	.word	0x08003eaf
 8003e70:	08003e85 	.word	0x08003e85
 8003e74:	08003e97 	.word	0x08003e97
 8003e78:	08003eaf 	.word	0x08003eaf
 8003e7c:	08003eaf 	.word	0x08003eaf
 8003e80:	08003eaf 	.word	0x08003eaf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 faf4 	bl	8005478 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e94:	e00c      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fb9d 	bl	80055dc <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ea6:	e003      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb6:	4b80      	ldr	r3, [pc, #512]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	f023 0207 	bic.w	r2, r3, #7
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec4:	497c      	ldr	r1, [pc, #496]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d04b      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ee6:	d02e      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eec:	d828      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d02a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d822      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003efa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003efe:	d026      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f04:	d81c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f10:	d816      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01d      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f1a:	d111      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 faa8 	bl	8005478 <RCCEx_PLL2_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f2c:	e012      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3324      	adds	r3, #36	; 0x24
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fb51 	bl	80055dc <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f3e:	e009      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f5a:	4b57      	ldr	r3, [pc, #348]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f68:	4953      	ldr	r1, [pc, #332]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	654b      	str	r3, [r1, #84]	; 0x54
 8003f6e:	e001      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d04b      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f8a:	d02e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003f8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f90:	d828      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d02a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d822      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa2:	d026      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa8:	d81c      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb4:	d816      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d111      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fa56 	bl	8005478 <RCCEx_PLL2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fd0:	e012      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3324      	adds	r3, #36	; 0x24
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 faff 	bl	80055dc <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fe2:	e009      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003fea:	bf00      	nop
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800400c:	492a      	ldr	r1, [pc, #168]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	658b      	str	r3, [r1, #88]	; 0x58
 8004012:	e001      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d04d      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800402a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800402e:	d02e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004030:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004034:	d828      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403a:	d02a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d822      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004042:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004046:	d026      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004048:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800404c:	d81c      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800404e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004052:	d010      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004058:	d816      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01d      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	d111      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f001 fa04 	bl	8005478 <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004074:	e012      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3324      	adds	r3, #36	; 0x24
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f001 faad 	bl	80055dc <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004086:	e009      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
      break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800408e:	bf00      	nop
 8004090:	e004      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800409a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	658b      	str	r3, [r1, #88]	; 0x58
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80040b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d10a      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fa7c 	bl	80055dc <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	4988      	ldr	r1, [pc, #544]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004118:	d10a      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3324      	adds	r3, #36	; 0x24
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fa5b 	bl	80055dc <RCCEx_PLL3_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413e:	4978      	ldr	r1, [pc, #480]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d034      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800415a:	d01d      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004160:	d817      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416a:	d009      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800416c:	e011      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f97f 	bl	8005478 <RCCEx_PLL2_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800417e:	e00c      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fa28 	bl	80055dc <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004190:	e003      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a0:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041ae:	495c      	ldr	r1, [pc, #368]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	658b      	str	r3, [r1, #88]	; 0x58
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d033      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d0:	d01c      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80041d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041d6:	d816      	bhi.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80041d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041dc:	d003      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80041de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e2:	d007      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041e4:	e00f      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e6:	4b4e      	ldr	r3, [pc, #312]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80041ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041f2:	e00c      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3324      	adds	r3, #36	; 0x24
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f9ee 	bl	80055dc <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
      break;
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800420c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004222:	493f      	ldr	r1, [pc, #252]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	654b      	str	r3, [r1, #84]	; 0x54
 8004228:	e001      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d029      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d007      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424a:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a34      	ldr	r2, [pc, #208]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004254:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004256:	e00b      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2102      	movs	r1, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f90a 	bl	8005478 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	4927      	ldr	r1, [pc, #156]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004284:	4313      	orrs	r3, r2
 8004286:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004288:	e001      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3324      	adds	r3, #36	; 0x24
 800429e:	2102      	movs	r1, #2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f99b 	bl	80055dc <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d035      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d017      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042cc:	d811      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d2:	d013      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d80b      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d010      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80042de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e2:	d106      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042f0:	e007      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
      break;
 80042f6:	e004      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80042f8:	bf00      	nop
 80042fa:	e002      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004316:	4902      	ldr	r1, [pc, #8]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	654b      	str	r3, [r1, #84]	; 0x54
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800431e:	bf00      	nop
 8004320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004340:	492d      	ldr	r1, [pc, #180]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004342:	4313      	orrs	r3, r2
 8004344:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435e:	4926      	ldr	r1, [pc, #152]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004360:	4313      	orrs	r3, r2
 8004362:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	491e      	ldr	r1, [pc, #120]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800437e:	4313      	orrs	r3, r2
 8004380:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00d      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004398:	6113      	str	r3, [r2, #16]
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043a4:	4914      	ldr	r1, [pc, #80]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da08      	bge.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	490e      	ldr	r1, [pc, #56]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4906      	ldr	r1, [pc, #24]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043e4:	7dbb      	ldrb	r3, [r7, #22]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	58024400 	.word	0x58024400

080043fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b090      	sub	sp, #64	; 0x40
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440a:	f040 8089 	bne.w	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	2b04      	cmp	r3, #4
 800441c:	d87d      	bhi.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004439 	.word	0x08004439
 8004428:	0800445d 	.word	0x0800445d
 800442c:	08004481 	.word	0x08004481
 8004430:	08004515 	.word	0x08004515
 8004434:	080044a5 	.word	0x080044a5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004438:	4b86      	ldr	r3, [pc, #536]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004444:	d107      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fec2 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004454:	e3f4      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800445a:	e3f1      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800445c:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004468:	d107      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800446a:	f107 0318 	add.w	r3, r7, #24
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fc08 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004478:	e3e2      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800447e:	e3df      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004480:	4b74      	ldr	r3, [pc, #464]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d107      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fd4a 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800449c:	e3d0      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a2:	e3cd      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80044a4:	4b6b      	ldr	r3, [pc, #428]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80044a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044ae:	4b69      	ldr	r3, [pc, #420]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044c0:	4b64      	ldr	r3, [pc, #400]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	4a63      	ldr	r2, [pc, #396]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d2:	e01e      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80044d4:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e0:	d106      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e8:	d102      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ee:	e010      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80044f0:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044fc:	d106      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d102      	bne.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004506:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450a:	e002      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004510:	e396      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004512:	e395      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004518:	e392      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800451e:	e38f      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004526:	f040 809f 	bne.w	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800452a:	4b4a      	ldr	r3, [pc, #296]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004532:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d04d      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004542:	f200 8084 	bhi.w	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	2bc0      	cmp	r3, #192	; 0xc0
 800454a:	d07d      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	2bc0      	cmp	r3, #192	; 0xc0
 8004550:	d87d      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2b80      	cmp	r3, #128	; 0x80
 8004556:	d02d      	beq.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d877      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d012      	beq.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800456a:	e070      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800456c:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004578:	d107      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800457a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fe28 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004588:	e35a      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800458e:	e357      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004590:	4b30      	ldr	r3, [pc, #192]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459c:	d107      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800459e:	f107 0318 	add.w	r3, r7, #24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fb6e 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045ac:	e348      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045b2:	e345      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c0:	d107      	bne.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fcb0 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045d0:	e336      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045d6:	e333      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80045d8:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80045da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d10c      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80045ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004606:	e01e      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004614:	d106      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461c:	d102      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004622:	e010      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004630:	d106      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004638:	d102      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004644:	e2fc      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004646:	e2fb      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800464c:	e2f8      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004652:	e2f5      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004654:	58024400 	.word	0x58024400
 8004658:	03d09000 	.word	0x03d09000
 800465c:	003d0900 	.word	0x003d0900
 8004660:	007a1200 	.word	0x007a1200
 8004664:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	f040 809c 	bne.w	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004672:	4b9d      	ldr	r3, [pc, #628]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800467a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004682:	d054      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468a:	f200 808b 	bhi.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004694:	f000 8083 	beq.w	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800469e:	f200 8081 	bhi.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d02f      	beq.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b0:	d878      	bhi.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046be:	d012      	beq.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80046c0:	e070      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046c2:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ce:	d107      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd7d 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046de:	e2af      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046e4:	e2ac      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046e6:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f2:	d107      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046f4:	f107 0318 	add.w	r3, r7, #24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fac3 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004702:	e29d      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004708:	e29a      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800470a:	4b77      	ldr	r3, [pc, #476]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004716:	d107      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fc05 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004726:	e28b      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800472c:	e288      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800472e:	4b6e      	ldr	r3, [pc, #440]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004736:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004738:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b04      	cmp	r3, #4
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800474a:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	4a65      	ldr	r2, [pc, #404]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	e01e      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800475e:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d102      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004778:	e010      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800477a:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004786:	d106      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478e:	d102      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004790:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004794:	e002      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800479a:	e251      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800479c:	e250      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047a2:	e24d      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047a8:	e24a      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	f040 80a7 	bne.w	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80047b4:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c4:	d055      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	f200 8096 	bhi.w	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047d6:	f000 8084 	beq.w	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047e0:	f200 808c 	bhi.w	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	d030      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f2:	f200 8083 	bhi.w	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004802:	d012      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004804:	e07a      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004812:	d107      	bne.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fcdb 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004822:	e20d      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004828:	e20a      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004836:	d107      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004838:	f107 0318 	add.w	r3, r7, #24
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fa21 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004846:	e1fb      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800484c:	e1f8      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485a:	d107      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fb63 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800486a:	e1e9      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004870:	e1e6      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004872:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800487a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d10c      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a0:	e01e      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ae:	d106      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b6:	d102      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	e010      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d2:	d102      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	e002      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048de:	e1af      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80048e0:	e1ae      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048e6:	e1ab      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80048e8:	58024400 	.word	0x58024400
 80048ec:	03d09000 	.word	0x03d09000
 80048f0:	003d0900 	.word	0x003d0900
 80048f4:	007a1200 	.word	0x007a1200
 80048f8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004900:	e19e      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004908:	d173      	bne.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800490a:	4b9d      	ldr	r3, [pc, #628]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491a:	d02f      	beq.n	800497c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004922:	d863      	bhi.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d012      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8004932:	e05b      	b.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004934:	4b92      	ldr	r3, [pc, #584]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004940:	d107      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004942:	f107 0318 	add.w	r3, r7, #24
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f99c 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004950:	e176      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004956:	e173      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004958:	4b89      	ldr	r3, [pc, #548]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004964:	d107      	bne.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fade 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004974:	e164      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497a:	e161      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800497c:	4b80      	ldr	r3, [pc, #512]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004984:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004986:	4b7e      	ldr	r3, [pc, #504]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d10c      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004998:	4b79      	ldr	r3, [pc, #484]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4a78      	ldr	r2, [pc, #480]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049aa:	e01e      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049ac:	4b74      	ldr	r3, [pc, #464]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c0:	d102      	bne.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049c2:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c6:	e010      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049c8:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049dc:	d102      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049de:	4b6b      	ldr	r3, [pc, #428]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e2:	e002      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049e8:	e12a      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80049ea:	e129      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049f0:	e126      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d133      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80049fa:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d012      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004a12:	e023      	b.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a14:	4b5a      	ldr	r3, [pc, #360]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a20:	d107      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fbd4 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004a30:	e106      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a36:	e103      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a38:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a44:	d107      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a46:	f107 0318 	add.w	r3, r7, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f91a 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004a54:	e0f4      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a5a:	e0f1      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a60:	e0ee      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a68:	f040 809b 	bne.w	8004ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004a6c:	4b44      	ldr	r3, [pc, #272]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a7c:	f000 808b 	beq.w	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004a86:	f200 8089 	bhi.w	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a90:	d06c      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a98:	f200 8080 	bhi.w	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d056      	beq.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aaa:	d877      	bhi.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ab2:	d03b      	beq.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004aba:	d86f      	bhi.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac2:	d021      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aca:	d867      	bhi.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad8:	d004      	beq.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8004ada:	e05f      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004adc:	f000 f8bc 	bl	8004c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ae0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004ae2:	e0ad      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af0:	d107      	bne.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af2:	f107 0318 	add.w	r3, r7, #24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f8c4 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b00:	e09e      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b06:	e09b      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b14:	d107      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b16:	f107 030c 	add.w	r3, r7, #12
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fa06 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b24:	e08c      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b2a:	e089      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b38:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b4a:	e079      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b50:	e076      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b64:	e06c      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6a:	e069      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b78:	d10a      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b7e:	e05f      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004b80:	58024400 	.word	0x58024400
 8004b84:	03d09000 	.word	0x03d09000
 8004b88:	003d0900 	.word	0x003d0900
 8004b8c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b94:	e054      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b9a:	e051      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ba0:	e04e      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba8:	d148      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bb2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bba:	d02a      	beq.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc2:	d838      	bhi.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd0:	d00d      	beq.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8004bd2:	e030      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bd4:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be0:	d102      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004be6:	e02b      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bec:	e028      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fae7 	bl	80051d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c0a:	e019      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c10:	e016      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c12:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c20:	f107 0318 	add.w	r3, r7, #24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f82d 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c2e:	e007      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3a:	e001      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3740      	adds	r7, #64	; 0x40
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	00bb8000 	.word	0x00bb8000
 8004c50:	58024400 	.word	0x58024400
 8004c54:	007a1200 	.word	0x007a1200

08004c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004c5c:	f7fe fc66 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	; (8004c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	080074e4 	.word	0x080074e4

08004c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c8c:	4ba1      	ldr	r3, [pc, #644]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c96:	4b9f      	ldr	r3, [pc, #636]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	0b1b      	lsrs	r3, r3, #12
 8004c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ca2:	4b9c      	ldr	r3, [pc, #624]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004cae:	4b99      	ldr	r3, [pc, #612]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	08db      	lsrs	r3, r3, #3
 8004cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8111 	beq.w	8004ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	f000 8083 	beq.w	8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	f200 80a1 	bhi.w	8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d056      	beq.n	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004cee:	e099      	b.n	8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf0:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02d      	beq.n	8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cfc:	4b85      	ldr	r3, [pc, #532]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	08db      	lsrs	r3, r3, #3
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	4a84      	ldr	r2, [pc, #528]	; (8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d56:	e087      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d9a:	e065      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dde:	e043      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e22:	e021      	b.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004e68:	4b2a      	ldr	r3, [pc, #168]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	0a5b      	lsrs	r3, r3, #9
 8004e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8e:	ee17 2a90 	vmov	r2, s15
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea0:	ee07 3a90 	vmov	s15, r3
 8004ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	ee17 2a90 	vmov	r2, s15
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004ec4:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eea:	ee17 2a90 	vmov	r2, s15
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ef2:	e008      	b.n	8004f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]
}
 8004f06:	bf00      	nop
 8004f08:	3724      	adds	r7, #36	; 0x24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	03d09000 	.word	0x03d09000
 8004f1c:	46000000 	.word	0x46000000
 8004f20:	4c742400 	.word	0x4c742400
 8004f24:	4a742400 	.word	0x4a742400
 8004f28:	4af42400 	.word	0x4af42400

08004f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f34:	4ba1      	ldr	r3, [pc, #644]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004f3e:	4b9f      	ldr	r3, [pc, #636]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	0d1b      	lsrs	r3, r3, #20
 8004f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f4a:	4b9c      	ldr	r3, [pc, #624]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004f56:	4b99      	ldr	r3, [pc, #612]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8111 	beq.w	800519c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	f000 8083 	beq.w	8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	f200 80a1 	bhi.w	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d056      	beq.n	8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f96:	e099      	b.n	80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f98:	4b88      	ldr	r3, [pc, #544]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02d      	beq.n	8005000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa4:	4b85      	ldr	r3, [pc, #532]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	4a84      	ldr	r2, [pc, #528]	; (80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b7b      	ldr	r3, [pc, #492]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ffe:	e087      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a67 	vldr	s11, [pc, #412]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005042:	e065      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b59      	ldr	r3, [pc, #356]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a03 	vldr	s12, [r7, #12]
 800506a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005086:	e043      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b48      	ldr	r3, [pc, #288]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ca:	e021      	b.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80051c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005110:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512a:	edd7 6a07 	vldr	s13, [r7, #28]
 800512e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005136:	ee17 2a90 	vmov	r2, s15
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	0c1b      	lsrs	r3, r3, #16
 8005144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005158:	edd7 6a07 	vldr	s13, [r7, #28]
 800515c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005164:	ee17 2a90 	vmov	r2, s15
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005186:	edd7 6a07 	vldr	s13, [r7, #28]
 800518a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800518e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005192:	ee17 2a90 	vmov	r2, s15
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
}
 80051ae:	bf00      	nop
 80051b0:	3724      	adds	r7, #36	; 0x24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	58024400 	.word	0x58024400
 80051c0:	03d09000 	.word	0x03d09000
 80051c4:	46000000 	.word	0x46000000
 80051c8:	4c742400 	.word	0x4c742400
 80051cc:	4a742400 	.word	0x4a742400
 80051d0:	4af42400 	.word	0x4af42400

080051d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051dc:	4ba0      	ldr	r3, [pc, #640]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80051e6:	4b9e      	ldr	r3, [pc, #632]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80051f2:	4b9b      	ldr	r3, [pc, #620]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80051fc:	4b98      	ldr	r3, [pc, #608]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	fb02 f303 	mul.w	r3, r2, r3
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005214:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8111 	beq.w	8005442 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b02      	cmp	r3, #2
 8005224:	f000 8083 	beq.w	800532e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b02      	cmp	r3, #2
 800522c:	f200 80a1 	bhi.w	8005372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d056      	beq.n	80052ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800523c:	e099      	b.n	8005372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523e:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02d      	beq.n	80052a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800524a:	4b85      	ldr	r3, [pc, #532]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	08db      	lsrs	r3, r3, #3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	4a83      	ldr	r2, [pc, #524]	; (8005464 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005274:	4b7a      	ldr	r3, [pc, #488]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005284:	ed97 6a03 	vldr	s12, [r7, #12]
 8005288:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800528c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80052a4:	e087      	b.n	80053b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800546c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80052b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b8:	4b69      	ldr	r3, [pc, #420]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80052cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80052d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052e8:	e065      	b.n	80053b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005470 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80052f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fc:	4b58      	ldr	r3, [pc, #352]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005310:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005328:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800532c:	e043      	b.n	80053b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005338:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800533c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005340:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005350:	ed97 6a03 	vldr	s12, [r7, #12]
 8005354:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005370:	e021      	b.n	80053b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800546c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005384:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005394:	ed97 6a03 	vldr	s12, [r7, #12]
 8005398:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800539c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80053b6:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	0a5b      	lsrs	r3, r3, #9
 80053bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 2a90 	vmov	r2, s15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80053e4:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540a:	ee17 2a90 	vmov	r2, s15
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	0e1b      	lsrs	r3, r3, #24
 8005418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800542c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005438:	ee17 2a90 	vmov	r2, s15
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005440:	e008      	b.n	8005454 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	3724      	adds	r7, #36	; 0x24
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	58024400 	.word	0x58024400
 8005464:	03d09000 	.word	0x03d09000
 8005468:	46000000 	.word	0x46000000
 800546c:	4c742400 	.word	0x4c742400
 8005470:	4a742400 	.word	0x4a742400
 8005474:	4af42400 	.word	0x4af42400

08005478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005486:	4b53      	ldr	r3, [pc, #332]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d101      	bne.n	8005496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e099      	b.n	80055ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005496:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4e      	ldr	r2, [pc, #312]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800549c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fb fe51 	bl	8001148 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054a8:	e008      	b.n	80054bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054aa:	f7fb fe4d 	bl	8001148 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e086      	b.n	80055ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054bc:	4b45      	ldr	r3, [pc, #276]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054c8:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	493f      	ldr	r1, [pc, #252]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	628b      	str	r3, [r1, #40]	; 0x28
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	3b01      	subs	r3, #1
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800550c:	4931      	ldr	r1, [pc, #196]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005512:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	492d      	ldr	r1, [pc, #180]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	f023 0220 	bic.w	r2, r3, #32
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4928      	ldr	r1, [pc, #160]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005536:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800553c:	f023 0310 	bic.w	r3, r3, #16
 8005540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <RCCEx_PLL2_Config+0x160>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69d2      	ldr	r2, [r2, #28]
 800554e:	00d2      	lsls	r2, r2, #3
 8005550:	4920      	ldr	r1, [pc, #128]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800555c:	f043 0310 	orr.w	r3, r3, #16
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800556e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005572:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005574:	e00f      	b.n	8005596 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d106      	bne.n	800558a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800557c:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005586:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005588:	e005      	b.n	8005596 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005594:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0e      	ldr	r2, [pc, #56]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 800559c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fb fdd1 	bl	8001148 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055a8:	e008      	b.n	80055bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055aa:	f7fb fdcd 	bl	8001148 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e006      	b.n	80055ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <RCCEx_PLL2_Config+0x15c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	ffff0007 	.word	0xffff0007

080055dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055ea:	4b53      	ldr	r3, [pc, #332]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d101      	bne.n	80055fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e099      	b.n	800572e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055fa:	4b4f      	ldr	r3, [pc, #316]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a4e      	ldr	r2, [pc, #312]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fb fd9f 	bl	8001148 <HAL_GetTick>
 800560a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800560c:	e008      	b.n	8005620 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800560e:	f7fb fd9b 	bl	8001148 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e086      	b.n	800572e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005620:	4b45      	ldr	r3, [pc, #276]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800562c:	4b42      	ldr	r3, [pc, #264]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	051b      	lsls	r3, r3, #20
 800563a:	493f      	ldr	r1, [pc, #252]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 800563c:	4313      	orrs	r3, r2
 800563e:	628b      	str	r3, [r1, #40]	; 0x28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	3b01      	subs	r3, #1
 8005646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	3b01      	subs	r3, #1
 8005650:	025b      	lsls	r3, r3, #9
 8005652:	b29b      	uxth	r3, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	3b01      	subs	r3, #1
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	3b01      	subs	r3, #1
 800566a:	061b      	lsls	r3, r3, #24
 800566c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005670:	4931      	ldr	r1, [pc, #196]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005672:	4313      	orrs	r3, r2
 8005674:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005676:	4b30      	ldr	r3, [pc, #192]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	492d      	ldr	r1, [pc, #180]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005688:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	4928      	ldr	r1, [pc, #160]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	4a26      	ldr	r2, [pc, #152]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <RCCEx_PLL3_Config+0x160>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	69d2      	ldr	r2, [r2, #28]
 80056b2:	00d2      	lsls	r2, r2, #3
 80056b4:	4920      	ldr	r1, [pc, #128]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	4a19      	ldr	r2, [pc, #100]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056d8:	e00f      	b.n	80056fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a14      	ldr	r2, [pc, #80]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056ec:	e005      	b.n	80056fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056ee:	4b12      	ldr	r3, [pc, #72]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a11      	ldr	r2, [pc, #68]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005706:	f7fb fd1f 	bl	8001148 <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800570c:	e008      	b.n	8005720 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800570e:	f7fb fd1b 	bl	8001148 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e006      	b.n	800572e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <RCCEx_PLL3_Config+0x15c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	58024400 	.word	0x58024400
 800573c:	ffff0007 	.word	0xffff0007

08005740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e049      	b.n	80057e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fb faec 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4610      	mov	r0, r2
 8005780:	f000 f97c 	bl	8005a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d122      	bne.n	800584a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d11b      	bne.n	800584a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f06f 0202 	mvn.w	r2, #2
 800581a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f905 	bl	8005a40 <HAL_TIM_IC_CaptureCallback>
 8005836:	e005      	b.n	8005844 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f8f7 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f908 	bl	8005a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d122      	bne.n	800589e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0304 	and.w	r3, r3, #4
 8005862:	2b04      	cmp	r3, #4
 8005864:	d11b      	bne.n	800589e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0204 	mvn.w	r2, #4
 800586e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8db 	bl	8005a40 <HAL_TIM_IC_CaptureCallback>
 800588a:	e005      	b.n	8005898 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8cd 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8de 	bl	8005a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d122      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d11b      	bne.n	80058f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0208 	mvn.w	r2, #8
 80058c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2204      	movs	r2, #4
 80058c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8b1 	bl	8005a40 <HAL_TIM_IC_CaptureCallback>
 80058de:	e005      	b.n	80058ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8a3 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8b4 	bl	8005a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d122      	bne.n	8005946 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d11b      	bne.n	8005946 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f06f 0210 	mvn.w	r2, #16
 8005916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2208      	movs	r2, #8
 800591c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f887 	bl	8005a40 <HAL_TIM_IC_CaptureCallback>
 8005932:	e005      	b.n	8005940 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f879 	bl	8005a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f88a 	bl	8005a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b01      	cmp	r3, #1
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0201 	mvn.w	r2, #1
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fb f94f 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f913 	bl	8005bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f906 	bl	8005bd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f838 	bl	8005a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0220 	mvn.w	r2, #32
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8c6 	bl	8005bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a40      	ldr	r2, [pc, #256]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d013      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3d      	ldr	r2, [pc, #244]	; (8005b94 <TIM_Base_SetConfig+0x118>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3c      	ldr	r2, [pc, #240]	; (8005b98 <TIM_Base_SetConfig+0x11c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3b      	ldr	r2, [pc, #236]	; (8005b9c <TIM_Base_SetConfig+0x120>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3a      	ldr	r2, [pc, #232]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2f      	ldr	r2, [pc, #188]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d01b      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <TIM_Base_SetConfig+0x118>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2b      	ldr	r2, [pc, #172]	; (8005b98 <TIM_Base_SetConfig+0x11c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <TIM_Base_SetConfig+0x120>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <TIM_Base_SetConfig+0x128>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <TIM_Base_SetConfig+0x12c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a26      	ldr	r2, [pc, #152]	; (8005bac <TIM_Base_SetConfig+0x130>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <TIM_Base_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00f      	beq.n	8005b74 <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a12      	ldr	r2, [pc, #72]	; (8005ba0 <TIM_Base_SetConfig+0x124>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00b      	beq.n	8005b74 <TIM_Base_SetConfig+0xf8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a11      	ldr	r2, [pc, #68]	; (8005ba4 <TIM_Base_SetConfig+0x128>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d007      	beq.n	8005b74 <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <TIM_Base_SetConfig+0x12c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_Base_SetConfig+0xf8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a0f      	ldr	r2, [pc, #60]	; (8005bac <TIM_Base_SetConfig+0x130>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d103      	bne.n	8005b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	615a      	str	r2, [r3, #20]
}
 8005b82:	bf00      	nop
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40000400 	.word	0x40000400
 8005b98:	40000800 	.word	0x40000800
 8005b9c:	40000c00 	.word	0x40000c00
 8005ba0:	40010400 	.word	0x40010400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e042      	b.n	8005c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fb f8d7 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2224      	movs	r2, #36	; 0x24
 8005c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f82c 	bl	8005c8c <UART_SetConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e022      	b.n	8005c84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fe8c 	bl	8006964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ff13 	bl	8006aa8 <UART_CheckIdleState>
 8005c82:	4603      	mov	r3, r0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b092      	sub	sp, #72	; 0x48
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	4bbe      	ldr	r3, [pc, #760]	; (8005fb4 <UART_SetConfig+0x328>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4ab3      	ldr	r2, [pc, #716]	; (8005fb8 <UART_SetConfig+0x32c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	4baf      	ldr	r3, [pc, #700]	; (8005fbc <UART_SetConfig+0x330>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	f023 010f 	bic.w	r1, r3, #15
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4aa6      	ldr	r2, [pc, #664]	; (8005fc0 <UART_SetConfig+0x334>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d177      	bne.n	8005e1c <UART_SetConfig+0x190>
 8005d2c:	4ba5      	ldr	r3, [pc, #660]	; (8005fc4 <UART_SetConfig+0x338>)
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d34:	2b28      	cmp	r3, #40	; 0x28
 8005d36:	d86d      	bhi.n	8005e14 <UART_SetConfig+0x188>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0xb4>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005e15 	.word	0x08005e15
 8005d48:	08005e15 	.word	0x08005e15
 8005d4c:	08005e15 	.word	0x08005e15
 8005d50:	08005e15 	.word	0x08005e15
 8005d54:	08005e15 	.word	0x08005e15
 8005d58:	08005e15 	.word	0x08005e15
 8005d5c:	08005e15 	.word	0x08005e15
 8005d60:	08005ded 	.word	0x08005ded
 8005d64:	08005e15 	.word	0x08005e15
 8005d68:	08005e15 	.word	0x08005e15
 8005d6c:	08005e15 	.word	0x08005e15
 8005d70:	08005e15 	.word	0x08005e15
 8005d74:	08005e15 	.word	0x08005e15
 8005d78:	08005e15 	.word	0x08005e15
 8005d7c:	08005e15 	.word	0x08005e15
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005e15 	.word	0x08005e15
 8005d88:	08005e15 	.word	0x08005e15
 8005d8c:	08005e15 	.word	0x08005e15
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e15 	.word	0x08005e15
 8005d98:	08005e15 	.word	0x08005e15
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005dfd 	.word	0x08005dfd
 8005da4:	08005e15 	.word	0x08005e15
 8005da8:	08005e15 	.word	0x08005e15
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005e15 	.word	0x08005e15
 8005db8:	08005e15 	.word	0x08005e15
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e15 	.word	0x08005e15
 8005dc8:	08005e15 	.word	0x08005e15
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e15 	.word	0x08005e15
 8005ddc:	08005e15 	.word	0x08005e15
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e326      	b.n	800643a <UART_SetConfig+0x7ae>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e322      	b.n	800643a <UART_SetConfig+0x7ae>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e31e      	b.n	800643a <UART_SetConfig+0x7ae>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e02:	e31a      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e04:	2320      	movs	r3, #32
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0a:	e316      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e0c:	2340      	movs	r3, #64	; 0x40
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e12:	e312      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1a:	e30e      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a69      	ldr	r2, [pc, #420]	; (8005fc8 <UART_SetConfig+0x33c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d130      	bne.n	8005e88 <UART_SetConfig+0x1fc>
 8005e26:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <UART_SetConfig+0x338>)
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d826      	bhi.n	8005e80 <UART_SetConfig+0x1f4>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x1ac>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e2f0      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e2ec      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e2e8      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e2e4      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e76:	e2e0      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7e:	e2dc      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e86:	e2d8      	b.n	800643a <UART_SetConfig+0x7ae>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a4f      	ldr	r2, [pc, #316]	; (8005fcc <UART_SetConfig+0x340>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d130      	bne.n	8005ef4 <UART_SetConfig+0x268>
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <UART_SetConfig+0x338>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d826      	bhi.n	8005eec <UART_SetConfig+0x260>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x218>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e2ba      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e2b6      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e2b2      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eda:	e2ae      	b.n	800643a <UART_SetConfig+0x7ae>
 8005edc:	2320      	movs	r3, #32
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee2:	e2aa      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eea:	e2a6      	b.n	800643a <UART_SetConfig+0x7ae>
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e2a2      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a35      	ldr	r2, [pc, #212]	; (8005fd0 <UART_SetConfig+0x344>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d130      	bne.n	8005f60 <UART_SetConfig+0x2d4>
 8005efe:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <UART_SetConfig+0x338>)
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d826      	bhi.n	8005f58 <UART_SetConfig+0x2cc>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x284>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f29 	.word	0x08005f29
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	08005f39 	.word	0x08005f39
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f49 	.word	0x08005f49
 8005f24:	08005f51 	.word	0x08005f51
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e284      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e280      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e27c      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e278      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e274      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e270      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e26c      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <UART_SetConfig+0x348>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d142      	bne.n	8005ff0 <UART_SetConfig+0x364>
 8005f6a:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <UART_SetConfig+0x338>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d838      	bhi.n	8005fe8 <UART_SetConfig+0x35c>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x2f0>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fa5 	.word	0x08005fa5
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e24e      	b.n	800643a <UART_SetConfig+0x7ae>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e24a      	b.n	800643a <UART_SetConfig+0x7ae>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e246      	b.n	800643a <UART_SetConfig+0x7ae>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e242      	b.n	800643a <UART_SetConfig+0x7ae>
 8005fb4:	cfff69f3 	.word	0xcfff69f3
 8005fb8:	58000c00 	.word	0x58000c00
 8005fbc:	11fff4ff 	.word	0x11fff4ff
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	58024400 	.word	0x58024400
 8005fc8:	40004400 	.word	0x40004400
 8005fcc:	40004800 	.word	0x40004800
 8005fd0:	40004c00 	.word	0x40004c00
 8005fd4:	40005000 	.word	0x40005000
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fde:	e22c      	b.n	800643a <UART_SetConfig+0x7ae>
 8005fe0:	2340      	movs	r3, #64	; 0x40
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe6:	e228      	b.n	800643a <UART_SetConfig+0x7ae>
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fee:	e224      	b.n	800643a <UART_SetConfig+0x7ae>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4ab1      	ldr	r2, [pc, #708]	; (80062bc <UART_SetConfig+0x630>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d176      	bne.n	80060e8 <UART_SetConfig+0x45c>
 8005ffa:	4bb1      	ldr	r3, [pc, #708]	; (80062c0 <UART_SetConfig+0x634>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006002:	2b28      	cmp	r3, #40	; 0x28
 8006004:	d86c      	bhi.n	80060e0 <UART_SetConfig+0x454>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0x380>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	080060b1 	.word	0x080060b1
 8006010:	080060e1 	.word	0x080060e1
 8006014:	080060e1 	.word	0x080060e1
 8006018:	080060e1 	.word	0x080060e1
 800601c:	080060e1 	.word	0x080060e1
 8006020:	080060e1 	.word	0x080060e1
 8006024:	080060e1 	.word	0x080060e1
 8006028:	080060e1 	.word	0x080060e1
 800602c:	080060b9 	.word	0x080060b9
 8006030:	080060e1 	.word	0x080060e1
 8006034:	080060e1 	.word	0x080060e1
 8006038:	080060e1 	.word	0x080060e1
 800603c:	080060e1 	.word	0x080060e1
 8006040:	080060e1 	.word	0x080060e1
 8006044:	080060e1 	.word	0x080060e1
 8006048:	080060e1 	.word	0x080060e1
 800604c:	080060c1 	.word	0x080060c1
 8006050:	080060e1 	.word	0x080060e1
 8006054:	080060e1 	.word	0x080060e1
 8006058:	080060e1 	.word	0x080060e1
 800605c:	080060e1 	.word	0x080060e1
 8006060:	080060e1 	.word	0x080060e1
 8006064:	080060e1 	.word	0x080060e1
 8006068:	080060e1 	.word	0x080060e1
 800606c:	080060c9 	.word	0x080060c9
 8006070:	080060e1 	.word	0x080060e1
 8006074:	080060e1 	.word	0x080060e1
 8006078:	080060e1 	.word	0x080060e1
 800607c:	080060e1 	.word	0x080060e1
 8006080:	080060e1 	.word	0x080060e1
 8006084:	080060e1 	.word	0x080060e1
 8006088:	080060e1 	.word	0x080060e1
 800608c:	080060d1 	.word	0x080060d1
 8006090:	080060e1 	.word	0x080060e1
 8006094:	080060e1 	.word	0x080060e1
 8006098:	080060e1 	.word	0x080060e1
 800609c:	080060e1 	.word	0x080060e1
 80060a0:	080060e1 	.word	0x080060e1
 80060a4:	080060e1 	.word	0x080060e1
 80060a8:	080060e1 	.word	0x080060e1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e1c0      	b.n	800643a <UART_SetConfig+0x7ae>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e1bc      	b.n	800643a <UART_SetConfig+0x7ae>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e1b8      	b.n	800643a <UART_SetConfig+0x7ae>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e1b4      	b.n	800643a <UART_SetConfig+0x7ae>
 80060d0:	2320      	movs	r3, #32
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e1b0      	b.n	800643a <UART_SetConfig+0x7ae>
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060de:	e1ac      	b.n	800643a <UART_SetConfig+0x7ae>
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e1a8      	b.n	800643a <UART_SetConfig+0x7ae>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a75      	ldr	r2, [pc, #468]	; (80062c4 <UART_SetConfig+0x638>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d130      	bne.n	8006154 <UART_SetConfig+0x4c8>
 80060f2:	4b73      	ldr	r3, [pc, #460]	; (80062c0 <UART_SetConfig+0x634>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d826      	bhi.n	800614c <UART_SetConfig+0x4c0>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x478>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	0800611d 	.word	0x0800611d
 8006108:	08006125 	.word	0x08006125
 800610c:	0800612d 	.word	0x0800612d
 8006110:	08006135 	.word	0x08006135
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006145 	.word	0x08006145
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e18a      	b.n	800643a <UART_SetConfig+0x7ae>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e186      	b.n	800643a <UART_SetConfig+0x7ae>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e182      	b.n	800643a <UART_SetConfig+0x7ae>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e17e      	b.n	800643a <UART_SetConfig+0x7ae>
 800613c:	2320      	movs	r3, #32
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006142:	e17a      	b.n	800643a <UART_SetConfig+0x7ae>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614a:	e176      	b.n	800643a <UART_SetConfig+0x7ae>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e172      	b.n	800643a <UART_SetConfig+0x7ae>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5b      	ldr	r2, [pc, #364]	; (80062c8 <UART_SetConfig+0x63c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d130      	bne.n	80061c0 <UART_SetConfig+0x534>
 800615e:	4b58      	ldr	r3, [pc, #352]	; (80062c0 <UART_SetConfig+0x634>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b05      	cmp	r3, #5
 8006168:	d826      	bhi.n	80061b8 <UART_SetConfig+0x52c>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x4e4>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006189 	.word	0x08006189
 8006174:	08006191 	.word	0x08006191
 8006178:	08006199 	.word	0x08006199
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e154      	b.n	800643a <UART_SetConfig+0x7ae>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e150      	b.n	800643a <UART_SetConfig+0x7ae>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e14c      	b.n	800643a <UART_SetConfig+0x7ae>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e148      	b.n	800643a <UART_SetConfig+0x7ae>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e144      	b.n	800643a <UART_SetConfig+0x7ae>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e140      	b.n	800643a <UART_SetConfig+0x7ae>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e13c      	b.n	800643a <UART_SetConfig+0x7ae>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a41      	ldr	r2, [pc, #260]	; (80062cc <UART_SetConfig+0x640>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	f040 8082 	bne.w	80062d0 <UART_SetConfig+0x644>
 80061cc:	4b3c      	ldr	r3, [pc, #240]	; (80062c0 <UART_SetConfig+0x634>)
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d4:	2b28      	cmp	r3, #40	; 0x28
 80061d6:	d86d      	bhi.n	80062b4 <UART_SetConfig+0x628>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <UART_SetConfig+0x554>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006285 	.word	0x08006285
 80061e4:	080062b5 	.word	0x080062b5
 80061e8:	080062b5 	.word	0x080062b5
 80061ec:	080062b5 	.word	0x080062b5
 80061f0:	080062b5 	.word	0x080062b5
 80061f4:	080062b5 	.word	0x080062b5
 80061f8:	080062b5 	.word	0x080062b5
 80061fc:	080062b5 	.word	0x080062b5
 8006200:	0800628d 	.word	0x0800628d
 8006204:	080062b5 	.word	0x080062b5
 8006208:	080062b5 	.word	0x080062b5
 800620c:	080062b5 	.word	0x080062b5
 8006210:	080062b5 	.word	0x080062b5
 8006214:	080062b5 	.word	0x080062b5
 8006218:	080062b5 	.word	0x080062b5
 800621c:	080062b5 	.word	0x080062b5
 8006220:	08006295 	.word	0x08006295
 8006224:	080062b5 	.word	0x080062b5
 8006228:	080062b5 	.word	0x080062b5
 800622c:	080062b5 	.word	0x080062b5
 8006230:	080062b5 	.word	0x080062b5
 8006234:	080062b5 	.word	0x080062b5
 8006238:	080062b5 	.word	0x080062b5
 800623c:	080062b5 	.word	0x080062b5
 8006240:	0800629d 	.word	0x0800629d
 8006244:	080062b5 	.word	0x080062b5
 8006248:	080062b5 	.word	0x080062b5
 800624c:	080062b5 	.word	0x080062b5
 8006250:	080062b5 	.word	0x080062b5
 8006254:	080062b5 	.word	0x080062b5
 8006258:	080062b5 	.word	0x080062b5
 800625c:	080062b5 	.word	0x080062b5
 8006260:	080062a5 	.word	0x080062a5
 8006264:	080062b5 	.word	0x080062b5
 8006268:	080062b5 	.word	0x080062b5
 800626c:	080062b5 	.word	0x080062b5
 8006270:	080062b5 	.word	0x080062b5
 8006274:	080062b5 	.word	0x080062b5
 8006278:	080062b5 	.word	0x080062b5
 800627c:	080062b5 	.word	0x080062b5
 8006280:	080062ad 	.word	0x080062ad
 8006284:	2301      	movs	r3, #1
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e0d6      	b.n	800643a <UART_SetConfig+0x7ae>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e0d2      	b.n	800643a <UART_SetConfig+0x7ae>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e0ce      	b.n	800643a <UART_SetConfig+0x7ae>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e0ca      	b.n	800643a <UART_SetConfig+0x7ae>
 80062a4:	2320      	movs	r3, #32
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062aa:	e0c6      	b.n	800643a <UART_SetConfig+0x7ae>
 80062ac:	2340      	movs	r3, #64	; 0x40
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b2:	e0c2      	b.n	800643a <UART_SetConfig+0x7ae>
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e0be      	b.n	800643a <UART_SetConfig+0x7ae>
 80062bc:	40011400 	.word	0x40011400
 80062c0:	58024400 	.word	0x58024400
 80062c4:	40007800 	.word	0x40007800
 80062c8:	40007c00 	.word	0x40007c00
 80062cc:	40011800 	.word	0x40011800
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4aad      	ldr	r2, [pc, #692]	; (800658c <UART_SetConfig+0x900>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d176      	bne.n	80063c8 <UART_SetConfig+0x73c>
 80062da:	4bad      	ldr	r3, [pc, #692]	; (8006590 <UART_SetConfig+0x904>)
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e2:	2b28      	cmp	r3, #40	; 0x28
 80062e4:	d86c      	bhi.n	80063c0 <UART_SetConfig+0x734>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <UART_SetConfig+0x660>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006391 	.word	0x08006391
 80062f0:	080063c1 	.word	0x080063c1
 80062f4:	080063c1 	.word	0x080063c1
 80062f8:	080063c1 	.word	0x080063c1
 80062fc:	080063c1 	.word	0x080063c1
 8006300:	080063c1 	.word	0x080063c1
 8006304:	080063c1 	.word	0x080063c1
 8006308:	080063c1 	.word	0x080063c1
 800630c:	08006399 	.word	0x08006399
 8006310:	080063c1 	.word	0x080063c1
 8006314:	080063c1 	.word	0x080063c1
 8006318:	080063c1 	.word	0x080063c1
 800631c:	080063c1 	.word	0x080063c1
 8006320:	080063c1 	.word	0x080063c1
 8006324:	080063c1 	.word	0x080063c1
 8006328:	080063c1 	.word	0x080063c1
 800632c:	080063a1 	.word	0x080063a1
 8006330:	080063c1 	.word	0x080063c1
 8006334:	080063c1 	.word	0x080063c1
 8006338:	080063c1 	.word	0x080063c1
 800633c:	080063c1 	.word	0x080063c1
 8006340:	080063c1 	.word	0x080063c1
 8006344:	080063c1 	.word	0x080063c1
 8006348:	080063c1 	.word	0x080063c1
 800634c:	080063a9 	.word	0x080063a9
 8006350:	080063c1 	.word	0x080063c1
 8006354:	080063c1 	.word	0x080063c1
 8006358:	080063c1 	.word	0x080063c1
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080063c1 	.word	0x080063c1
 8006364:	080063c1 	.word	0x080063c1
 8006368:	080063c1 	.word	0x080063c1
 800636c:	080063b1 	.word	0x080063b1
 8006370:	080063c1 	.word	0x080063c1
 8006374:	080063c1 	.word	0x080063c1
 8006378:	080063c1 	.word	0x080063c1
 800637c:	080063c1 	.word	0x080063c1
 8006380:	080063c1 	.word	0x080063c1
 8006384:	080063c1 	.word	0x080063c1
 8006388:	080063c1 	.word	0x080063c1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e050      	b.n	800643a <UART_SetConfig+0x7ae>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e04c      	b.n	800643a <UART_SetConfig+0x7ae>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e048      	b.n	800643a <UART_SetConfig+0x7ae>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e044      	b.n	800643a <UART_SetConfig+0x7ae>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e040      	b.n	800643a <UART_SetConfig+0x7ae>
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e03c      	b.n	800643a <UART_SetConfig+0x7ae>
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e038      	b.n	800643a <UART_SetConfig+0x7ae>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	; (8006594 <UART_SetConfig+0x908>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d130      	bne.n	8006434 <UART_SetConfig+0x7a8>
 80063d2:	4b6f      	ldr	r3, [pc, #444]	; (8006590 <UART_SetConfig+0x904>)
 80063d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d826      	bhi.n	800642c <UART_SetConfig+0x7a0>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0x758>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063fd 	.word	0x080063fd
 80063e8:	08006405 	.word	0x08006405
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006425 	.word	0x08006425
 80063fc:	2302      	movs	r3, #2
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e01a      	b.n	800643a <UART_SetConfig+0x7ae>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e016      	b.n	800643a <UART_SetConfig+0x7ae>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e012      	b.n	800643a <UART_SetConfig+0x7ae>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e00e      	b.n	800643a <UART_SetConfig+0x7ae>
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e00a      	b.n	800643a <UART_SetConfig+0x7ae>
 8006424:	2340      	movs	r3, #64	; 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e006      	b.n	800643a <UART_SetConfig+0x7ae>
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006432:	e002      	b.n	800643a <UART_SetConfig+0x7ae>
 8006434:	2380      	movs	r3, #128	; 0x80
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a55      	ldr	r2, [pc, #340]	; (8006594 <UART_SetConfig+0x908>)
 8006440:	4293      	cmp	r3, r2
 8006442:	f040 80f8 	bne.w	8006636 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006446:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800644a:	2b20      	cmp	r3, #32
 800644c:	dc46      	bgt.n	80064dc <UART_SetConfig+0x850>
 800644e:	2b02      	cmp	r3, #2
 8006450:	db75      	blt.n	800653e <UART_SetConfig+0x8b2>
 8006452:	3b02      	subs	r3, #2
 8006454:	2b1e      	cmp	r3, #30
 8006456:	d872      	bhi.n	800653e <UART_SetConfig+0x8b2>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <UART_SetConfig+0x7d4>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	080064e3 	.word	0x080064e3
 8006464:	0800653f 	.word	0x0800653f
 8006468:	080064eb 	.word	0x080064eb
 800646c:	0800653f 	.word	0x0800653f
 8006470:	0800653f 	.word	0x0800653f
 8006474:	0800653f 	.word	0x0800653f
 8006478:	080064fb 	.word	0x080064fb
 800647c:	0800653f 	.word	0x0800653f
 8006480:	0800653f 	.word	0x0800653f
 8006484:	0800653f 	.word	0x0800653f
 8006488:	0800653f 	.word	0x0800653f
 800648c:	0800653f 	.word	0x0800653f
 8006490:	0800653f 	.word	0x0800653f
 8006494:	0800653f 	.word	0x0800653f
 8006498:	0800650b 	.word	0x0800650b
 800649c:	0800653f 	.word	0x0800653f
 80064a0:	0800653f 	.word	0x0800653f
 80064a4:	0800653f 	.word	0x0800653f
 80064a8:	0800653f 	.word	0x0800653f
 80064ac:	0800653f 	.word	0x0800653f
 80064b0:	0800653f 	.word	0x0800653f
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	0800653f 	.word	0x0800653f
 80064bc:	0800653f 	.word	0x0800653f
 80064c0:	0800653f 	.word	0x0800653f
 80064c4:	0800653f 	.word	0x0800653f
 80064c8:	0800653f 	.word	0x0800653f
 80064cc:	0800653f 	.word	0x0800653f
 80064d0:	0800653f 	.word	0x0800653f
 80064d4:	0800653f 	.word	0x0800653f
 80064d8:	08006531 	.word	0x08006531
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d02a      	beq.n	8006536 <UART_SetConfig+0x8aa>
 80064e0:	e02d      	b.n	800653e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064e2:	f7fe fbb9 	bl	8004c58 <HAL_RCCEx_GetD3PCLK1Freq>
 80064e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064e8:	e02f      	b.n	800654a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fbc8 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f8:	e027      	b.n	800654a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fa:	f107 0318 	add.w	r3, r7, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fd14 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006508:	e01f      	b.n	800654a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <UART_SetConfig+0x904>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <UART_SetConfig+0x904>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	08db      	lsrs	r3, r3, #3
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <UART_SetConfig+0x90c>)
 8006522:	fa22 f303 	lsr.w	r3, r2, r3
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006528:	e00f      	b.n	800654a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <UART_SetConfig+0x90c>)
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800652e:	e00c      	b.n	800654a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <UART_SetConfig+0x910>)
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006534:	e009      	b.n	800654a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653c:	e005      	b.n	800654a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006548:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 81ee 	beq.w	800692e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <UART_SetConfig+0x914>)
 8006558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800655c:	461a      	mov	r2, r3
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	fbb3 f3f2 	udiv	r3, r3, r2
 8006564:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	4413      	add	r3, r2
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	429a      	cmp	r2, r3
 8006574:	d305      	bcc.n	8006582 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800657c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657e:	429a      	cmp	r2, r3
 8006580:	d910      	bls.n	80065a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006588:	e1d1      	b.n	800692e <UART_SetConfig+0xca2>
 800658a:	bf00      	nop
 800658c:	40011c00 	.word	0x40011c00
 8006590:	58024400 	.word	0x58024400
 8006594:	58000c00 	.word	0x58000c00
 8006598:	03d09000 	.word	0x03d09000
 800659c:	003d0900 	.word	0x003d0900
 80065a0:	080074f4 	.word	0x080074f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a6:	2200      	movs	r2, #0
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	60fa      	str	r2, [r7, #12]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	4ac0      	ldr	r2, [pc, #768]	; (80068b4 <UART_SetConfig+0xc28>)
 80065b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2200      	movs	r2, #0
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065c6:	f7f9 fe91 	bl	80002ec <__aeabi_uldivmod>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	020b      	lsls	r3, r1, #8
 80065dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065e0:	0202      	lsls	r2, r0, #8
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	6849      	ldr	r1, [r1, #4]
 80065e6:	0849      	lsrs	r1, r1, #1
 80065e8:	2000      	movs	r0, #0
 80065ea:	460c      	mov	r4, r1
 80065ec:	4605      	mov	r5, r0
 80065ee:	eb12 0804 	adds.w	r8, r2, r4
 80065f2:	eb43 0905 	adc.w	r9, r3, r5
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	469a      	mov	sl, r3
 80065fe:	4693      	mov	fp, r2
 8006600:	4652      	mov	r2, sl
 8006602:	465b      	mov	r3, fp
 8006604:	4640      	mov	r0, r8
 8006606:	4649      	mov	r1, r9
 8006608:	f7f9 fe70 	bl	80002ec <__aeabi_uldivmod>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4613      	mov	r3, r2
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800661a:	d308      	bcc.n	800662e <UART_SetConfig+0x9a2>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006622:	d204      	bcs.n	800662e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800662a:	60da      	str	r2, [r3, #12]
 800662c:	e17f      	b.n	800692e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006634:	e17b      	b.n	800692e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663e:	f040 80bd 	bne.w	80067bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006642:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006646:	2b20      	cmp	r3, #32
 8006648:	dc48      	bgt.n	80066dc <UART_SetConfig+0xa50>
 800664a:	2b00      	cmp	r3, #0
 800664c:	db7b      	blt.n	8006746 <UART_SetConfig+0xaba>
 800664e:	2b20      	cmp	r3, #32
 8006650:	d879      	bhi.n	8006746 <UART_SetConfig+0xaba>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x9cc>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	080066e3 	.word	0x080066e3
 800665c:	080066eb 	.word	0x080066eb
 8006660:	08006747 	.word	0x08006747
 8006664:	08006747 	.word	0x08006747
 8006668:	080066f3 	.word	0x080066f3
 800666c:	08006747 	.word	0x08006747
 8006670:	08006747 	.word	0x08006747
 8006674:	08006747 	.word	0x08006747
 8006678:	08006703 	.word	0x08006703
 800667c:	08006747 	.word	0x08006747
 8006680:	08006747 	.word	0x08006747
 8006684:	08006747 	.word	0x08006747
 8006688:	08006747 	.word	0x08006747
 800668c:	08006747 	.word	0x08006747
 8006690:	08006747 	.word	0x08006747
 8006694:	08006747 	.word	0x08006747
 8006698:	08006713 	.word	0x08006713
 800669c:	08006747 	.word	0x08006747
 80066a0:	08006747 	.word	0x08006747
 80066a4:	08006747 	.word	0x08006747
 80066a8:	08006747 	.word	0x08006747
 80066ac:	08006747 	.word	0x08006747
 80066b0:	08006747 	.word	0x08006747
 80066b4:	08006747 	.word	0x08006747
 80066b8:	08006747 	.word	0x08006747
 80066bc:	08006747 	.word	0x08006747
 80066c0:	08006747 	.word	0x08006747
 80066c4:	08006747 	.word	0x08006747
 80066c8:	08006747 	.word	0x08006747
 80066cc:	08006747 	.word	0x08006747
 80066d0:	08006747 	.word	0x08006747
 80066d4:	08006747 	.word	0x08006747
 80066d8:	08006739 	.word	0x08006739
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d02e      	beq.n	800673e <UART_SetConfig+0xab2>
 80066e0:	e031      	b.n	8006746 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e2:	f7fc ff53 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 80066e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066e8:	e033      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ea:	f7fc ff65 	bl	80035b8 <HAL_RCC_GetPCLK2Freq>
 80066ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066f0:	e02f      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fac4 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006700:	e027      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fc10 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006710:	e01f      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006712:	4b69      	ldr	r3, [pc, #420]	; (80068b8 <UART_SetConfig+0xc2c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800671e:	4b66      	ldr	r3, [pc, #408]	; (80068b8 <UART_SetConfig+0xc2c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	4a64      	ldr	r2, [pc, #400]	; (80068bc <UART_SetConfig+0xc30>)
 800672a:	fa22 f303 	lsr.w	r3, r2, r3
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006730:	e00f      	b.n	8006752 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006732:	4b62      	ldr	r3, [pc, #392]	; (80068bc <UART_SetConfig+0xc30>)
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006736:	e00c      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <UART_SetConfig+0xc34>)
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800673c:	e009      	b.n	8006752 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006744:	e005      	b.n	8006752 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006750:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80ea 	beq.w	800692e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	4a55      	ldr	r2, [pc, #340]	; (80068b4 <UART_SetConfig+0xc28>)
 8006760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006764:	461a      	mov	r2, r3
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	fbb3 f3f2 	udiv	r3, r3, r2
 800676c:	005a      	lsls	r2, r3, #1
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	441a      	add	r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d916      	bls.n	80067b4 <UART_SetConfig+0xb28>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d212      	bcs.n	80067b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	b29b      	uxth	r3, r3
 8006792:	f023 030f 	bic.w	r3, r3, #15
 8006796:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067a6:	4313      	orrs	r3, r2
 80067a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	e0bc      	b.n	800692e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067ba:	e0b8      	b.n	800692e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	dc4b      	bgt.n	800685c <UART_SetConfig+0xbd0>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f2c0 8087 	blt.w	80068d8 <UART_SetConfig+0xc4c>
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f200 8084 	bhi.w	80068d8 <UART_SetConfig+0xc4c>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0xb4c>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	08006863 	.word	0x08006863
 80067dc:	0800686b 	.word	0x0800686b
 80067e0:	080068d9 	.word	0x080068d9
 80067e4:	080068d9 	.word	0x080068d9
 80067e8:	08006873 	.word	0x08006873
 80067ec:	080068d9 	.word	0x080068d9
 80067f0:	080068d9 	.word	0x080068d9
 80067f4:	080068d9 	.word	0x080068d9
 80067f8:	08006883 	.word	0x08006883
 80067fc:	080068d9 	.word	0x080068d9
 8006800:	080068d9 	.word	0x080068d9
 8006804:	080068d9 	.word	0x080068d9
 8006808:	080068d9 	.word	0x080068d9
 800680c:	080068d9 	.word	0x080068d9
 8006810:	080068d9 	.word	0x080068d9
 8006814:	080068d9 	.word	0x080068d9
 8006818:	08006893 	.word	0x08006893
 800681c:	080068d9 	.word	0x080068d9
 8006820:	080068d9 	.word	0x080068d9
 8006824:	080068d9 	.word	0x080068d9
 8006828:	080068d9 	.word	0x080068d9
 800682c:	080068d9 	.word	0x080068d9
 8006830:	080068d9 	.word	0x080068d9
 8006834:	080068d9 	.word	0x080068d9
 8006838:	080068d9 	.word	0x080068d9
 800683c:	080068d9 	.word	0x080068d9
 8006840:	080068d9 	.word	0x080068d9
 8006844:	080068d9 	.word	0x080068d9
 8006848:	080068d9 	.word	0x080068d9
 800684c:	080068d9 	.word	0x080068d9
 8006850:	080068d9 	.word	0x080068d9
 8006854:	080068d9 	.word	0x080068d9
 8006858:	080068cb 	.word	0x080068cb
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d037      	beq.n	80068d0 <UART_SetConfig+0xc44>
 8006860:	e03a      	b.n	80068d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006862:	f7fc fe93 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8006866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006868:	e03c      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800686a:	f7fc fea5 	bl	80035b8 <HAL_RCC_GetPCLK2Freq>
 800686e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006870:	e038      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fa04 	bl	8004c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006880:	e030      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006882:	f107 0318 	add.w	r3, r7, #24
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fb50 	bl	8004f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006890:	e028      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <UART_SetConfig+0xc2c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <UART_SetConfig+0xc2c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	4a04      	ldr	r2, [pc, #16]	; (80068bc <UART_SetConfig+0xc30>)
 80068aa:	fa22 f303 	lsr.w	r3, r2, r3
 80068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068b0:	e018      	b.n	80068e4 <UART_SetConfig+0xc58>
 80068b2:	bf00      	nop
 80068b4:	080074f4 	.word	0x080074f4
 80068b8:	58024400 	.word	0x58024400
 80068bc:	03d09000 	.word	0x03d09000
 80068c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <UART_SetConfig+0xccc>)
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c8:	e00c      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068ca:	4b24      	ldr	r3, [pc, #144]	; (800695c <UART_SetConfig+0xcd0>)
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ce:	e009      	b.n	80068e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d6:	e005      	b.n	80068e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068e2:	bf00      	nop
    }

    if (pclk != 0U)
 80068e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d021      	beq.n	800692e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <UART_SetConfig+0xcd4>)
 80068f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	441a      	add	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b0f      	cmp	r3, #15
 8006912:	d909      	bls.n	8006928 <UART_SetConfig+0xc9c>
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691a:	d205      	bcs.n	8006928 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	b29a      	uxth	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e002      	b.n	800692e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2201      	movs	r2, #1
 8006932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2201      	movs	r2, #1
 800693a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800694a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800694e:	4618      	mov	r0, r3
 8006950:	3748      	adds	r7, #72	; 0x48
 8006952:	46bd      	mov	sp, r7
 8006954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006958:	03d09000 	.word	0x03d09000
 800695c:	003d0900 	.word	0x003d0900
 8006960:	080074f4 	.word	0x080074f4

08006964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01a      	beq.n	8006a7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a62:	d10a      	bne.n	8006a7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	605a      	str	r2, [r3, #4]
  }
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab8:	f7fa fb46 	bl	8001148 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10e      	bne.n	8006aea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f82f 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e025      	b.n	8006b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d10e      	bne.n	8006b16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f819 	bl	8006b3e <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e00f      	b.n	8006b36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b09c      	sub	sp, #112	; 0x70
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4e:	e0a9      	b.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b56:	f000 80a5 	beq.w	8006ca4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fa faf5 	bl	8001148 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d140      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b84:	667b      	str	r3, [r7, #100]	; 0x64
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e069      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d051      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d149      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c6c:	623a      	str	r2, [r7, #32]
 8006c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e5      	bne.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e010      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4013      	ands	r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f43f af46 	beq.w	8006b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3770      	adds	r7, #112	; 0x70
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e027      	b.n	8006d34 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	; 0x24
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e02d      	b.n	8006db4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	; 0x24
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f84f 	bl	8006e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e02d      	b.n	8006e30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f811 	bl	8006e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d108      	bne.n	8006e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e58:	e031      	b.n	8006ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e5e:	2310      	movs	r3, #16
 8006e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0e5b      	lsrs	r3, r3, #25
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	0f5b      	lsrs	r3, r3, #29
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	7b3a      	ldrb	r2, [r7, #12]
 8006e86:	4911      	ldr	r1, [pc, #68]	; (8006ecc <UARTEx_SetNbDataToProcess+0x94>)
 8006e88:	5c8a      	ldrb	r2, [r1, r2]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e8e:	7b3a      	ldrb	r2, [r7, #12]
 8006e90:	490f      	ldr	r1, [pc, #60]	; (8006ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	7b7a      	ldrb	r2, [r7, #13]
 8006ea4:	4909      	ldr	r1, [pc, #36]	; (8006ecc <UARTEx_SetNbDataToProcess+0x94>)
 8006ea6:	5c8a      	ldrb	r2, [r1, r2]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eac:	7b7a      	ldrb	r2, [r7, #13]
 8006eae:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	0800750c 	.word	0x0800750c
 8006ed0:	08007514 	.word	0x08007514

08006ed4 <STEPPER_One_Step>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
}

static void STEPPER_One_Step(uint8_t i)
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8006ede:	79fa      	ldrb	r2, [r7, #7]
 8006ee0:	4999      	ldr	r1, [pc, #612]	; (8007148 <STEPPER_One_Step+0x274>)
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	331a      	adds	r3, #26
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 81c4 	bne.w	800727e <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8006ef6:	79fa      	ldrb	r2, [r7, #7]
 8006ef8:	4993      	ldr	r1, [pc, #588]	; (8007148 <STEPPER_One_Step+0x274>)
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	331b      	adds	r3, #27
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 8088 	bne.w	800701e <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8006f0e:	79fa      	ldrb	r2, [r7, #7]
 8006f10:	498d      	ldr	r1, [pc, #564]	; (8007148 <STEPPER_One_Step+0x274>)
 8006f12:	4613      	mov	r3, r2
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	79fa      	ldrb	r2, [r7, #7]
 8006f20:	4989      	ldr	r1, [pc, #548]	; (8007148 <STEPPER_One_Step+0x274>)
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	8819      	ldrh	r1, [r3, #0]
 8006f30:	79fa      	ldrb	r2, [r7, #7]
 8006f32:	4c86      	ldr	r4, [pc, #536]	; (800714c <STEPPER_One_Step+0x278>)
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4423      	add	r3, r4
 8006f3e:	330f      	adds	r3, #15
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	4b82      	ldr	r3, [pc, #520]	; (8007150 <STEPPER_One_Step+0x27c>)
 8006f46:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fb fb46 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8006f50:	79fa      	ldrb	r2, [r7, #7]
 8006f52:	497d      	ldr	r1, [pc, #500]	; (8007148 <STEPPER_One_Step+0x274>)
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3304      	adds	r3, #4
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	79fa      	ldrb	r2, [r7, #7]
 8006f64:	4978      	ldr	r1, [pc, #480]	; (8007148 <STEPPER_One_Step+0x274>)
 8006f66:	4613      	mov	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	3312      	adds	r3, #18
 8006f72:	8819      	ldrh	r1, [r3, #0]
 8006f74:	79fa      	ldrb	r2, [r7, #7]
 8006f76:	4c75      	ldr	r4, [pc, #468]	; (800714c <STEPPER_One_Step+0x278>)
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4423      	add	r3, r4
 8006f82:	330f      	adds	r3, #15
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	4a72      	ldr	r2, [pc, #456]	; (8007150 <STEPPER_One_Step+0x27c>)
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	785b      	ldrb	r3, [r3, #1]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fb fb24 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8006f94:	79fa      	ldrb	r2, [r7, #7]
 8006f96:	496c      	ldr	r1, [pc, #432]	; (8007148 <STEPPER_One_Step+0x274>)
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	4967      	ldr	r1, [pc, #412]	; (8007148 <STEPPER_One_Step+0x274>)
 8006faa:	4613      	mov	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	8819      	ldrh	r1, [r3, #0]
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	4c64      	ldr	r4, [pc, #400]	; (800714c <STEPPER_One_Step+0x278>)
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4423      	add	r3, r4
 8006fc6:	330f      	adds	r3, #15
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	4a61      	ldr	r2, [pc, #388]	; (8007150 <STEPPER_One_Step+0x27c>)
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	789b      	ldrb	r3, [r3, #2]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f7fb fb02 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8006fd8:	79fa      	ldrb	r2, [r7, #7]
 8006fda:	495b      	ldr	r1, [pc, #364]	; (8007148 <STEPPER_One_Step+0x274>)
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	79fa      	ldrb	r2, [r7, #7]
 8006fec:	4956      	ldr	r1, [pc, #344]	; (8007148 <STEPPER_One_Step+0x274>)
 8006fee:	4613      	mov	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	3316      	adds	r3, #22
 8006ffa:	8819      	ldrh	r1, [r3, #0]
 8006ffc:	79fa      	ldrb	r2, [r7, #7]
 8006ffe:	4c53      	ldr	r4, [pc, #332]	; (800714c <STEPPER_One_Step+0x278>)
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4423      	add	r3, r4
 800700a:	330f      	adds	r3, #15
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	4a50      	ldr	r2, [pc, #320]	; (8007150 <STEPPER_One_Step+0x27c>)
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	78db      	ldrb	r3, [r3, #3]
 8007016:	461a      	mov	r2, r3
 8007018:	f7fb fae0 	bl	80025dc <HAL_GPIO_WritePin>
 800701c:	e12f      	b.n	800727e <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800701e:	79fa      	ldrb	r2, [r7, #7]
 8007020:	4949      	ldr	r1, [pc, #292]	; (8007148 <STEPPER_One_Step+0x274>)
 8007022:	4613      	mov	r3, r2
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	331b      	adds	r3, #27
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	f040 8091 	bne.w	8007158 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007036:	79fa      	ldrb	r2, [r7, #7]
 8007038:	4943      	ldr	r1, [pc, #268]	; (8007148 <STEPPER_One_Step+0x274>)
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	79fa      	ldrb	r2, [r7, #7]
 8007048:	493f      	ldr	r1, [pc, #252]	; (8007148 <STEPPER_One_Step+0x274>)
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	3310      	adds	r3, #16
 8007056:	8819      	ldrh	r1, [r3, #0]
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	4c3c      	ldr	r4, [pc, #240]	; (800714c <STEPPER_One_Step+0x278>)
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4423      	add	r3, r4
 8007066:	330f      	adds	r3, #15
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	4b39      	ldr	r3, [pc, #228]	; (8007154 <STEPPER_One_Step+0x280>)
 800706e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007072:	461a      	mov	r2, r3
 8007074:	f7fb fab2 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007078:	79fa      	ldrb	r2, [r7, #7]
 800707a:	4933      	ldr	r1, [pc, #204]	; (8007148 <STEPPER_One_Step+0x274>)
 800707c:	4613      	mov	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	3304      	adds	r3, #4
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	79fa      	ldrb	r2, [r7, #7]
 800708c:	492e      	ldr	r1, [pc, #184]	; (8007148 <STEPPER_One_Step+0x274>)
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	3312      	adds	r3, #18
 800709a:	8819      	ldrh	r1, [r3, #0]
 800709c:	79fa      	ldrb	r2, [r7, #7]
 800709e:	4c2b      	ldr	r4, [pc, #172]	; (800714c <STEPPER_One_Step+0x278>)
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4423      	add	r3, r4
 80070aa:	330f      	adds	r3, #15
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4a29      	ldr	r2, [pc, #164]	; (8007154 <STEPPER_One_Step+0x280>)
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	461a      	mov	r2, r3
 80070b8:	f7fb fa90 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	4922      	ldr	r1, [pc, #136]	; (8007148 <STEPPER_One_Step+0x274>)
 80070c0:	4613      	mov	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3308      	adds	r3, #8
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	79fa      	ldrb	r2, [r7, #7]
 80070d0:	491d      	ldr	r1, [pc, #116]	; (8007148 <STEPPER_One_Step+0x274>)
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	3314      	adds	r3, #20
 80070de:	8819      	ldrh	r1, [r3, #0]
 80070e0:	79fa      	ldrb	r2, [r7, #7]
 80070e2:	4c1a      	ldr	r4, [pc, #104]	; (800714c <STEPPER_One_Step+0x278>)
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4423      	add	r3, r4
 80070ee:	330f      	adds	r3, #15
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4a18      	ldr	r2, [pc, #96]	; (8007154 <STEPPER_One_Step+0x280>)
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	789b      	ldrb	r3, [r3, #2]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7fb fa6e 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007100:	79fa      	ldrb	r2, [r7, #7]
 8007102:	4911      	ldr	r1, [pc, #68]	; (8007148 <STEPPER_One_Step+0x274>)
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	330c      	adds	r3, #12
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	79fa      	ldrb	r2, [r7, #7]
 8007114:	490c      	ldr	r1, [pc, #48]	; (8007148 <STEPPER_One_Step+0x274>)
 8007116:	4613      	mov	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	3316      	adds	r3, #22
 8007122:	8819      	ldrh	r1, [r3, #0]
 8007124:	79fa      	ldrb	r2, [r7, #7]
 8007126:	4c09      	ldr	r4, [pc, #36]	; (800714c <STEPPER_One_Step+0x278>)
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4423      	add	r3, r4
 8007132:	330f      	adds	r3, #15
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	4a07      	ldr	r2, [pc, #28]	; (8007154 <STEPPER_One_Step+0x280>)
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	78db      	ldrb	r3, [r3, #3]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fb fa4c 	bl	80025dc <HAL_GPIO_WritePin>
 8007144:	e09b      	b.n	800727e <STEPPER_One_Step+0x3aa>
 8007146:	bf00      	nop
 8007148:	0800751c 	.word	0x0800751c
 800714c:	240001fc 	.word	0x240001fc
 8007150:	24000010 	.word	0x24000010
 8007154:	24000020 	.word	0x24000020
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8007158:	79fa      	ldrb	r2, [r7, #7]
 800715a:	4988      	ldr	r1, [pc, #544]	; (800737c <STEPPER_One_Step+0x4a8>)
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	331b      	adds	r3, #27
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	f040 8087 	bne.w	800727e <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007170:	79fa      	ldrb	r2, [r7, #7]
 8007172:	4982      	ldr	r1, [pc, #520]	; (800737c <STEPPER_One_Step+0x4a8>)
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	79fa      	ldrb	r2, [r7, #7]
 8007182:	497e      	ldr	r1, [pc, #504]	; (800737c <STEPPER_One_Step+0x4a8>)
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	3310      	adds	r3, #16
 8007190:	8819      	ldrh	r1, [r3, #0]
 8007192:	79fa      	ldrb	r2, [r7, #7]
 8007194:	4c7a      	ldr	r4, [pc, #488]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4423      	add	r3, r4
 80071a0:	330f      	adds	r3, #15
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b77      	ldr	r3, [pc, #476]	; (8007384 <STEPPER_One_Step+0x4b0>)
 80071a8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80071ac:	461a      	mov	r2, r3
 80071ae:	f7fb fa15 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80071b2:	79fa      	ldrb	r2, [r7, #7]
 80071b4:	4971      	ldr	r1, [pc, #452]	; (800737c <STEPPER_One_Step+0x4a8>)
 80071b6:	4613      	mov	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3304      	adds	r3, #4
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	79fa      	ldrb	r2, [r7, #7]
 80071c6:	496d      	ldr	r1, [pc, #436]	; (800737c <STEPPER_One_Step+0x4a8>)
 80071c8:	4613      	mov	r3, r2
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	3312      	adds	r3, #18
 80071d4:	8819      	ldrh	r1, [r3, #0]
 80071d6:	79fa      	ldrb	r2, [r7, #7]
 80071d8:	4c69      	ldr	r4, [pc, #420]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4423      	add	r3, r4
 80071e4:	330f      	adds	r3, #15
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	4a66      	ldr	r2, [pc, #408]	; (8007384 <STEPPER_One_Step+0x4b0>)
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f7fb f9f3 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80071f6:	79fa      	ldrb	r2, [r7, #7]
 80071f8:	4960      	ldr	r1, [pc, #384]	; (800737c <STEPPER_One_Step+0x4a8>)
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3308      	adds	r3, #8
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	79fa      	ldrb	r2, [r7, #7]
 800720a:	495c      	ldr	r1, [pc, #368]	; (800737c <STEPPER_One_Step+0x4a8>)
 800720c:	4613      	mov	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	1a9b      	subs	r3, r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	3314      	adds	r3, #20
 8007218:	8819      	ldrh	r1, [r3, #0]
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	4c58      	ldr	r4, [pc, #352]	; (8007380 <STEPPER_One_Step+0x4ac>)
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4423      	add	r3, r4
 8007228:	330f      	adds	r3, #15
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4a55      	ldr	r2, [pc, #340]	; (8007384 <STEPPER_One_Step+0x4b0>)
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	461a      	mov	r2, r3
 8007236:	f7fb f9d1 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800723a:	79fa      	ldrb	r2, [r7, #7]
 800723c:	494f      	ldr	r1, [pc, #316]	; (800737c <STEPPER_One_Step+0x4a8>)
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	330c      	adds	r3, #12
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	79fa      	ldrb	r2, [r7, #7]
 800724e:	494b      	ldr	r1, [pc, #300]	; (800737c <STEPPER_One_Step+0x4a8>)
 8007250:	4613      	mov	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	440b      	add	r3, r1
 800725a:	3316      	adds	r3, #22
 800725c:	8819      	ldrh	r1, [r3, #0]
 800725e:	79fa      	ldrb	r2, [r7, #7]
 8007260:	4c47      	ldr	r4, [pc, #284]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4423      	add	r3, r4
 800726c:	330f      	adds	r3, #15
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	4a44      	ldr	r2, [pc, #272]	; (8007384 <STEPPER_One_Step+0x4b0>)
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	461a      	mov	r2, r3
 800727a:	f7fb f9af 	bl	80025dc <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800727e:	79fa      	ldrb	r2, [r7, #7]
 8007280:	493f      	ldr	r1, [pc, #252]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3311      	adds	r3, #17
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d132      	bne.n	80072fa <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8007294:	79fa      	ldrb	r2, [r7, #7]
 8007296:	493a      	ldr	r1, [pc, #232]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	330f      	adds	r3, #15
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d112      	bne.n	80072d0 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 80072aa:	79f9      	ldrb	r1, [r7, #7]
 80072ac:	79fa      	ldrb	r2, [r7, #7]
 80072ae:	4834      	ldr	r0, [pc, #208]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80072b0:	460b      	mov	r3, r1
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4403      	add	r3, r0
 80072ba:	3310      	adds	r3, #16
 80072bc:	7818      	ldrb	r0, [r3, #0]
 80072be:	4930      	ldr	r1, [pc, #192]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	440b      	add	r3, r1
 80072ca:	330f      	adds	r3, #15
 80072cc:	4602      	mov	r2, r0
 80072ce:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 80072d0:	79fa      	ldrb	r2, [r7, #7]
 80072d2:	492b      	ldr	r1, [pc, #172]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	330f      	adds	r3, #15
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b2d8      	uxtb	r0, r3
 80072e6:	4926      	ldr	r1, [pc, #152]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	330f      	adds	r3, #15
 80072f4:	4602      	mov	r2, r0
 80072f6:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80072f8:	e03c      	b.n	8007374 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80072fa:	79fa      	ldrb	r2, [r7, #7]
 80072fc:	4920      	ldr	r1, [pc, #128]	; (8007380 <STEPPER_One_Step+0x4ac>)
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3311      	adds	r3, #17
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d131      	bne.n	8007374 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8007310:	79fa      	ldrb	r2, [r7, #7]
 8007312:	491b      	ldr	r1, [pc, #108]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	330f      	adds	r3, #15
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	b2d8      	uxtb	r0, r3
 8007326:	4916      	ldr	r1, [pc, #88]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	330f      	adds	r3, #15
 8007334:	4602      	mov	r2, r0
 8007336:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8007338:	79fa      	ldrb	r2, [r7, #7]
 800733a:	4911      	ldr	r1, [pc, #68]	; (8007380 <STEPPER_One_Step+0x4ac>)
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	330f      	adds	r3, #15
 8007348:	7819      	ldrb	r1, [r3, #0]
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	480c      	ldr	r0, [pc, #48]	; (8007380 <STEPPER_One_Step+0x4ac>)
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4403      	add	r3, r0
 8007358:	3310      	adds	r3, #16
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	4299      	cmp	r1, r3
 800735e:	d109      	bne.n	8007374 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8007360:	79fa      	ldrb	r2, [r7, #7]
 8007362:	4907      	ldr	r1, [pc, #28]	; (8007380 <STEPPER_One_Step+0x4ac>)
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	330f      	adds	r3, #15
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	bd90      	pop	{r4, r7, pc}
 800737c:	0800751c 	.word	0x0800751c
 8007380:	240001fc 	.word	0x240001fc
 8007384:	24000030 	.word	0x24000030

08007388 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a34      	ldr	r2, [pc, #208]	; (800746c <STEPPER_TMR_OVF_ISR+0xe4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d162      	bne.n	8007464 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	e05c      	b.n	800745e <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80073a4:	7bfa      	ldrb	r2, [r7, #15]
 80073a6:	4932      	ldr	r1, [pc, #200]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	3304      	adds	r3, #4
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	7bfa      	ldrb	r2, [r7, #15]
 80073b8:	482d      	ldr	r0, [pc, #180]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4403      	add	r3, r0
 80073c4:	3308      	adds	r3, #8
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4299      	cmp	r1, r3
 80073ca:	d333      	bcc.n	8007434 <STEPPER_TMR_OVF_ISR+0xac>
 80073cc:	7bfa      	ldrb	r2, [r7, #15]
 80073ce:	4928      	ldr	r1, [pc, #160]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	330e      	adds	r3, #14
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d028      	beq.n	8007434 <STEPPER_TMR_OVF_ISR+0xac>
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	4922      	ldr	r1, [pc, #136]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01e      	beq.n	8007434 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fd6b 	bl	8006ed4 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 80073fe:	7bfa      	ldrb	r2, [r7, #15]
 8007400:	491b      	ldr	r1, [pc, #108]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	1e59      	subs	r1, r3, #1
 8007410:	4817      	ldr	r0, [pc, #92]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4403      	add	r3, r0
 800741c:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 800741e:	7bfa      	ldrb	r2, [r7, #15]
 8007420:	4913      	ldr	r1, [pc, #76]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	3304      	adds	r3, #4
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e011      	b.n	8007458 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	490e      	ldr	r1, [pc, #56]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3304      	adds	r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	1c59      	adds	r1, r3, #1
 8007448:	4809      	ldr	r0, [pc, #36]	; (8007470 <STEPPER_TMR_OVF_ISR+0xe8>)
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4403      	add	r3, r0
 8007454:	3304      	adds	r3, #4
 8007456:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	3301      	adds	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d09f      	beq.n	80073a4 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40014800 	.word	0x40014800
 8007470:	240001fc 	.word	0x240001fc

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4d0d      	ldr	r5, [pc, #52]	; (80074ac <__libc_init_array+0x38>)
 8007478:	4c0d      	ldr	r4, [pc, #52]	; (80074b0 <__libc_init_array+0x3c>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	2600      	movs	r6, #0
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	4d0b      	ldr	r5, [pc, #44]	; (80074b4 <__libc_init_array+0x40>)
 8007486:	4c0c      	ldr	r4, [pc, #48]	; (80074b8 <__libc_init_array+0x44>)
 8007488:	f000 f820 	bl	80074cc <_init>
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	2600      	movs	r6, #0
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	f855 3b04 	ldr.w	r3, [r5], #4
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	08007540 	.word	0x08007540
 80074b0:	08007540 	.word	0x08007540
 80074b4:	08007540 	.word	0x08007540
 80074b8:	08007544 	.word	0x08007544

080074bc <memset>:
 80074bc:	4402      	add	r2, r0
 80074be:	4603      	mov	r3, r0
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d100      	bne.n	80074c6 <memset+0xa>
 80074c4:	4770      	bx	lr
 80074c6:	f803 1b01 	strb.w	r1, [r3], #1
 80074ca:	e7f9      	b.n	80074c0 <memset+0x4>

080074cc <_init>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr

080074d8 <_fini>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr
