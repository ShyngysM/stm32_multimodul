
h7a3zi_combine2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08008ae0  08008ae0  00018ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008bf0  08008bf0  00018bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  08008bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00030f60  240000b4  08008ca8  000200b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24031014  08008ca8  00021014  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b0db  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ceb  00000000  00000000  0003b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0003dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013a0  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032e7a  00000000  00000000  000406f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001927e  00000000  00000000  00073572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001541c0  00000000  00000000  0008c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e09b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d08  00000000  00000000  001e0a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b4 	.word	0x240000b4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008ac8 	.word	0x08008ac8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	08008ac8 	.word	0x08008ac8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 ffb1 	bl	8001600 <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f84d 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f9e3 	bl	8000a6c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 f98d 	bl	80009c4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006aa:	f000 f9d7 	bl	8000a5c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006ae:	f000 f8c3 	bl	8000838 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006b2:	f000 f939 	bl	8000928 <MX_TIM16_Init>
  MX_TIM17_Init();
 80006b6:	f000 f95f 	bl	8000978 <MX_TIM17_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);
  // HAL_Delay(100);
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
  

  for (int m = 0; m < 10; m++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e02c      	b.n	800071a <main+0x86>
  // pump on
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2120      	movs	r1, #32
 80006c4:	4817      	ldr	r0, [pc, #92]	; (8000724 <main+0x90>)
 80006c6:	f002 fcdd 	bl	8003084 <HAL_GPIO_WritePin>
    HAL_Delay(4000);
 80006ca:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006ce:	f001 f829 	bl	8001724 <HAL_Delay>
    uart_buf_len = sprintf(uart_buf, "Number %d \r\n", m+1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	461a      	mov	r2, r3
 80006d8:	4913      	ldr	r1, [pc, #76]	; (8000728 <main+0x94>)
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <main+0x98>)
 80006dc:	f007 fd86 	bl	80081ec <siprintf>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <main+0x9c>)
 80006e4:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <main+0x9c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	490f      	ldr	r1, [pc, #60]	; (800072c <main+0x98>)
 80006f0:	4810      	ldr	r0, [pc, #64]	; (8000734 <main+0xa0>)
 80006f2:	f006 f8bf 	bl	8006874 <HAL_UART_Transmit>
    measure(&Meas);
 80006f6:	4810      	ldr	r0, [pc, #64]	; (8000738 <main+0xa4>)
 80006f8:	f000 fb0a 	bl	8000d10 <measure>
  // pump on
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2120      	movs	r1, #32
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <main+0x90>)
 8000702:	f002 fcbf 	bl	8003084 <HAL_GPIO_WritePin>
    uart_transmit_analog();
 8000706:	f000 fcb1 	bl	800106c <uart_transmit_analog>
    analyse(&Meas);
 800070a:	480b      	ldr	r0, [pc, #44]	; (8000738 <main+0xa4>)
 800070c:	f000 fbc2 	bl	8000e94 <analyse>
    // uart_transmit_digital();
    uart_transmit_info();
 8000710:	f000 fce0 	bl	80010d4 <uart_transmit_info>
  for (int m = 0; m < 10; m++) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3301      	adds	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b09      	cmp	r3, #9
 800071e:	ddcf      	ble.n	80006c0 <main+0x2c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000720:	e7fe      	b.n	8000720 <main+0x8c>
 8000722:	bf00      	nop
 8000724:	58020000 	.word	0x58020000
 8000728:	08008ae0 	.word	0x08008ae0
 800072c:	24030fb0 	.word	0x24030fb0
 8000730:	24030fe4 	.word	0x24030fe4
 8000734:	24030f20 	.word	0x24030f20
 8000738:	240000d0 	.word	0x240000d0

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	; 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	224c      	movs	r2, #76	; 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fd46 	bl	80081dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f007 fd40 	bl	80081dc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <SystemClock_Config+0xf4>)
 800075e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000766:	2004      	movs	r0, #4
 8000768:	f002 fca6 	bl	80030b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <SystemClock_Config+0xf8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <SystemClock_Config+0xf8>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <SystemClock_Config+0xf8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000788:	bf00      	nop
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemClock_Config+0xf8>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000796:	d1f8      	bne.n	800078a <SystemClock_Config+0x4e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xf4>)
 800079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079c:	f023 0303 	bic.w	r3, r3, #3
 80007a0:	4a23      	ldr	r2, [pc, #140]	; (8000830 <SystemClock_Config+0xf4>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007a8:	2321      	movs	r3, #33	; 0x21
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007c2:	2318      	movs	r3, #24
 80007c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ca:	2304      	movs	r3, #4
 80007cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d2:	230c      	movs	r3, #12
 80007d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fcc2 	bl	800316c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ee:	f000 fcc5 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2102      	movs	r1, #2
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f8ac 	bl	8003974 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000822:	f000 fcab 	bl	800117c <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	; 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58024400 	.word	0x58024400
 8000834:	58024800 	.word	0x58024800

08000838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_ADC1_Init+0xe4>)
 800085e:	4a30      	ldr	r2, [pc, #192]	; (8000920 <MX_ADC1_Init+0xe8>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_ADC1_Init+0xe4>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_ADC1_Init+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_ADC1_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_ADC1_Init+0xe4>)
 8000876:	2204      	movs	r2, #4
 8000878:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_ADC1_Init+0xe4>)
 8000888:	2201      	movs	r2, #1
 800088a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_ADC1_Init+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_ADC1_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ADC1_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ADC1_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_ADC1_Init+0xe4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_ADC1_Init+0xe4>)
 80008ba:	f001 f939 	bl	8001b30 <HAL_ADC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f000 fc5a 	bl	800117c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_ADC1_Init+0xe4>)
 80008d4:	f002 f87a 	bl	80029cc <HAL_ADCEx_MultiModeConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008de:	f000 fc4d 	bl	800117c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_ADC1_Init+0xec>)
 80008e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e6:	2306      	movs	r3, #6
 80008e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f4:	2304      	movs	r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_ADC1_Init+0xe4>)
 8000906:	f001 fc0d 	bl	8002124 <HAL_ADC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000910:	f000 fc34 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	24030e24 	.word	0x24030e24
 8000920:	40022000 	.word	0x40022000
 8000924:	3ef08000 	.word	0x3ef08000

08000928 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_TIM16_Init+0x48>)
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <MX_TIM16_Init+0x4c>)
 8000930:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_TIM16_Init+0x48>)
 8000934:	f242 527f 	movw	r2, #9599	; 0x257f
 8000938:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_TIM16_Init+0x48>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000-1;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_TIM16_Init+0x48>)
 8000942:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000946:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_TIM16_Init+0x48>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_TIM16_Init+0x48>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_TIM16_Init+0x48>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_TIM16_Init+0x48>)
 800095c:	f005 fc44 	bl	80061e8 <HAL_TIM_Base_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000966:	f000 fc09 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24030e88 	.word	0x24030e88
 8000974:	40014400 	.word	0x40014400

08000978 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_TIM17_Init+0x44>)
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <MX_TIM17_Init+0x48>)
 8000980:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_TIM17_Init+0x44>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_TIM17_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_TIM17_Init+0x44>)
 8000990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_TIM17_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_TIM17_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_TIM17_Init+0x44>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_TIM17_Init+0x44>)
 80009aa:	f005 fc1d 	bl	80061e8 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009b4:	f000 fbe2 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	24030ed4 	.word	0x24030ed4
 80009c0:	40014800 	.word	0x40014800

080009c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_USART3_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a0e:	f005 fee1 	bl	80067d4 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 fbb0 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a20:	f007 f818 	bl	8007a54 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 fba7 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a32:	f007 f84d 	bl	8007ad0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fb9e 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_USART3_UART_Init+0x90>)
 8000a42:	f006 ffce 	bl	80079e2 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fb96 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	24030f20 	.word	0x24030f20
 8000a58:	40004800 	.word	0x40004800

08000a5c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b95      	ldr	r3, [pc, #596]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a88:	4a93      	ldr	r2, [pc, #588]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a92:	4b91      	ldr	r3, [pc, #580]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa0:	4b8d      	ldr	r3, [pc, #564]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa6:	4a8c      	ldr	r2, [pc, #560]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab0:	4b89      	ldr	r3, [pc, #548]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4b86      	ldr	r3, [pc, #536]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	4a84      	ldr	r2, [pc, #528]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ace:	4b82      	ldr	r3, [pc, #520]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b7e      	ldr	r3, [pc, #504]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	4a7d      	ldr	r2, [pc, #500]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aec:	4b7a      	ldr	r3, [pc, #488]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b77      	ldr	r3, [pc, #476]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a75      	ldr	r2, [pc, #468]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b73      	ldr	r3, [pc, #460]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b18:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	4a6e      	ldr	r2, [pc, #440]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b28:	4b6b      	ldr	r3, [pc, #428]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	4b68      	ldr	r3, [pc, #416]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b3c:	4a66      	ldr	r2, [pc, #408]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b46:	4b64      	ldr	r3, [pc, #400]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b60      	ldr	r3, [pc, #384]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5a:	4a5f      	ldr	r2, [pc, #380]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b64:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <MX_GPIO_Init+0x26c>)
 8000b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	4858      	ldr	r0, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x270>)
 8000b7a:	f002 fa83 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_PA5_Pin_GPIO_Port, PUMP_PA5_Pin_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	4857      	ldr	r0, [pc, #348]	; (8000ce0 <MX_GPIO_Init+0x274>)
 8000b84:	f002 fa7e 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f244 0141 	movw	r1, #16449	; 0x4041
 8000b8e:	4855      	ldr	r0, [pc, #340]	; (8000ce4 <MX_GPIO_Init+0x278>)
 8000b90:	f002 fa78 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f246 0102 	movw	r1, #24578	; 0x6002
 8000b9a:	4853      	ldr	r0, [pc, #332]	; (8000ce8 <MX_GPIO_Init+0x27c>)
 8000b9c:	f002 fa72 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000ba6:	4851      	ldr	r0, [pc, #324]	; (8000cec <MX_GPIO_Init+0x280>)
 8000ba8:	f002 fa6c 	bl	8003084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	484b      	ldr	r0, [pc, #300]	; (8000cf0 <MX_GPIO_Init+0x284>)
 8000bc2:	f002 f8af 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	483f      	ldr	r0, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x270>)
 8000be0:	f002 f8a0 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUMP_PA5_Pin_Pin */
  GPIO_InitStruct.Pin = PUMP_PA5_Pin_Pin;
 8000be4:	2320      	movs	r3, #32
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PUMP_PA5_Pin_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <MX_GPIO_Init+0x274>)
 8000bfc:	f002 f892 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin STEPPER1_PB6_Pin_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|STEPPER1_PB6_Pin_Pin;
 8000c00:	f244 0341 	movw	r3, #16449	; 0x4041
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <MX_GPIO_Init+0x278>)
 8000c1a:	f002 f883 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER3_PE13_Pin_Pin STEPPER4_PE14_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = STEPPER3_PE13_Pin_Pin|STEPPER4_PE14_Pin_Pin|LD2_Pin;
 8000c1e:	f246 0302 	movw	r3, #24578	; 0x6002
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0x27c>)
 8000c38:	f002 f874 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <MX_GPIO_Init+0x280>)
 8000c52:	f002 f867 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481d      	ldr	r0, [pc, #116]	; (8000ce0 <MX_GPIO_Init+0x274>)
 8000c6c:	f002 f85a 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c82:	230a      	movs	r3, #10
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_GPIO_Init+0x274>)
 8000c8e:	f002 f849 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0x274>)
 8000cac:	f002 f83a 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : HELP_SIGNAL_PG9_Pin_Pin VIBROMOTOR_PG12_Pin_Pin STEPPER2_PG14_Pin_Pin */
  GPIO_InitStruct.Pin = HELP_SIGNAL_PG9_Pin_Pin|VIBROMOTOR_PG12_Pin_Pin|STEPPER2_PG14_Pin_Pin;
 8000cb0:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <MX_GPIO_Init+0x280>)
 8000cca:	f002 f82b 	bl	8002d24 <HAL_GPIO_Init>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58021400 	.word	0x58021400
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58021000 	.word	0x58021000
 8000cec:	58021800 	.word	0x58021800
 8000cf0:	58020800 	.word	0x58020800

08000cf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// calling an ISR for STEPPER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  STEPPER_TMR_OVF_ISR(htim);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f007 f9cd 	bl	800809c <STEPPER_TMR_OVF_ISR>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	0000      	movs	r0, r0
 8000d0c:	0000      	movs	r0, r0
	...

08000d10 <measure>:

void measure(struct MeasureData *s) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000d18:	f242 730f 	movw	r3, #9999	; 0x270f
 8000d1c:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000d26:	4858      	ldr	r0, [pc, #352]	; (8000e88 <measure+0x178>)
 8000d28:	f005 fab6 	bl	8006298 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d32:	4856      	ldr	r0, [pc, #344]	; (8000e8c <measure+0x17c>)
 8000d34:	f002 f9a6 	bl	8003084 <HAL_GPIO_WritePin>

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e079      	b.n	8000e32 <measure+0x122>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000d3e:	7efb      	ldrb	r3, [r7, #27]
 8000d40:	f083 0301 	eor.w	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d035      	beq.n	8000db6 <measure+0xa6>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d5e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000e78 <measure+0x168>
 8000d62:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	db22      	blt.n	8000db6 <measure+0xa6>
        tim_val_ms < ONESEC * 0.3) {
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d84:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8000e80 <measure+0x170>
 8000d88:	ee27 7b05 	vmul.f64	d7, d7, d5
    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2 &&
 8000d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	d50f      	bpl.n	8000db6 <measure+0xa6>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9c:	483b      	ldr	r0, [pc, #236]	; (8000e8c <measure+0x17c>)
 8000d9e:	f002 f971 	bl	8003084 <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000da8:	461a      	mov	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	76fb      	strb	r3, [r7, #27]
 8000db4:	e01d      	b.n	8000df2 <measure+0xe2>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000db6:	7efb      	ldrb	r3, [r7, #27]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01a      	beq.n	8000df2 <measure+0xe2>
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dd0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000e80 <measure+0x170>
 8000dd4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	db07      	blt.n	8000df2 <measure+0xe2>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <measure+0x17c>)
 8000dea:	f002 f94b 	bl	8003084 <HAL_GPIO_WritePin>
      is_vibrating = false;
 8000dee:	2300      	movs	r3, #0
 8000df0:	76fb      	strb	r3, [r7, #27]
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000df2:	4827      	ldr	r0, [pc, #156]	; (8000e90 <measure+0x180>)
 8000df4:	f000 fff6 	bl	8001de4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dfc:	4824      	ldr	r0, [pc, #144]	; (8000e90 <measure+0x180>)
 8000dfe:	f001 f8ab 	bl	8001f58 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <measure+0x180>)
 8000e04:	f001 f980 	bl	8002108 <HAL_ADC_GetValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e12:	461a      	mov	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	89f9      	ldrh	r1, [r7, #14]
 8000e20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <measure+0x178>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	db81      	blt.n	8000d3e <measure+0x2e>
  }
  // stoping and reseting timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000e3a:	4813      	ldr	r0, [pc, #76]	; (8000e88 <measure+0x178>)
 8000e3c:	f005 fa9c 	bl	8006378 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <measure+0x178>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  s->pulses = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e4e:	461a      	mov	r2, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
  s->htime = 0;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  // reset help signal (yellow led)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <measure+0x17c>)
 8000e6c:	f002 f90a 	bl	8003084 <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	9999999a 	.word	0x9999999a
 8000e7c:	3fc99999 	.word	0x3fc99999
 8000e80:	33333333 	.word	0x33333333
 8000e84:	3fd33333 	.word	0x3fd33333
 8000e88:	24030e88 	.word	0x24030e88
 8000e8c:	58021800 	.word	0x58021800
 8000e90:	24030e24 	.word	0x24030e24

08000e94 <analyse>:

void analyse(struct MeasureData *s) {
 8000e94:	b480      	push	{r7}
 8000e96:	b08b      	sub	sp, #44	; 0x2c
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000e9c:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000ea0:	617b      	str	r3, [r7, #20]
  const int SCALE = 1000;
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < s->t_end; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000eac:	e015      	b.n	8000eda <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dd05      	ble.n	8000eca <analyse+0x36>
      s->signal[i] = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000ec8:	e004      	b.n	8000ed4 <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	2101      	movs	r1, #1
 8000ed0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ee0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbe1      	blt.n	8000eae <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	e02d      	b.n	8000f4c <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000efa:	4619      	mov	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a3a      	ldr	r2, [r7, #32]
 8000f00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f04:	1acb      	subs	r3, r1, r3
 8000f06:	60fb      	str	r3, [r7, #12]
    if (edge == 1) { // count only negative pulses
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10a      	bne.n	8000f24 <analyse+0x90>
      s->pulses++;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f14:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000f18:	3301      	adds	r3, #1
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f20:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    }
    if (s->signal[i] == 1) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a3a      	ldr	r2, [r7, #32]
 8000f28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d10a      	bne.n	8000f46 <analyse+0xb2>
      s->htime++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f36:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000f42:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  for (int i = 0; i < s->t_end; i++) {
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f52:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000f56:	6a3a      	ldr	r2, [r7, #32]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbc9      	blt.n	8000ef0 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	e00f      	b.n	8000f8e <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d106      	bne.n	8000f88 <analyse+0xf4>
      s->bad = true;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8000f86:	e00a      	b.n	8000f9e <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000f94:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dde7      	ble.n	8000f6e <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fa4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb0:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000fb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fbc:	ee17 3a90 	vmov	r3, s15
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	e00f      	b.n	8000fe4 <analyse+0x150>
    if (s->signal[i] == 0) {
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <analyse+0x14a>
      s->bad = true;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8000fdc:	e00a      	b.n	8000ff4 <analyse+0x160>
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000fea:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbe7      	blt.n	8000fc4 <analyse+0x130>
    }
  }
  // check if sensor is not kurzgeschlossen all time
  if (s->pulses == 0) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000ffa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <analyse+0x17a>
    s->bad = true;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
  }
  // resolve the variables to human readable values
  s->htime = s->htime * SCALE / s->t_end;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001014:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	fb03 f202 	mul.w	r2, r3, r2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001024:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001028:	fb92 f3f3 	sdiv	r3, r2, r3
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8001032:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800103c:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	fb03 f202 	mul.w	r2, r3, r2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800104c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8001050:	fb92 f3f3 	sdiv	r3, r2, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 800105a:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
}
 800105e:	bf00      	nop
 8001060:	372c      	adds	r7, #44	; 0x2c
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <uart_transmit_analog>:


void uart_transmit_analog(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  /* Transmit an array with ANALOG data via uart */
  for (int j = 0; j < Meas.t_end; j++) {
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e016      	b.n	80010a6 <uart_transmit_analog+0x3a>
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <uart_transmit_analog+0x54>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4910      	ldr	r1, [pc, #64]	; (80010c4 <uart_transmit_analog+0x58>)
 8001084:	4810      	ldr	r0, [pc, #64]	; (80010c8 <uart_transmit_analog+0x5c>)
 8001086:	f007 f8b1 	bl	80081ec <siprintf>
 800108a:	4603      	mov	r3, r0
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <uart_transmit_analog+0x60>)
 800108e:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <uart_transmit_analog+0x60>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	b29a      	uxth	r2, r3
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	490b      	ldr	r1, [pc, #44]	; (80010c8 <uart_transmit_analog+0x5c>)
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <uart_transmit_analog+0x64>)
 800109c:	f005 fbea 	bl	8006874 <HAL_UART_Transmit>
  for (int j = 0; j < Meas.t_end; j++) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <uart_transmit_analog+0x54>)
 80010a8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010ac:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbe0      	blt.n	8001078 <uart_transmit_analog+0xc>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240000d0 	.word	0x240000d0
 80010c4:	08008af0 	.word	0x08008af0
 80010c8:	24030fb0 	.word	0x24030fb0
 80010cc:	24030fe4 	.word	0x24030fe4
 80010d0:	24030f20 	.word	0x24030f20

080010d4 <uart_transmit_info>:
  for (int j = 0; j < Meas.t_end; j++) {
    uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  }
}
void uart_transmit_info(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Transmit extra measurement data via uart */
  uart_buf_len = sprintf(uart_buf, "Measurements  \n");
 80010d8:	4921      	ldr	r1, [pc, #132]	; (8001160 <uart_transmit_info+0x8c>)
 80010da:	4822      	ldr	r0, [pc, #136]	; (8001164 <uart_transmit_info+0x90>)
 80010dc:	f007 f886 	bl	80081ec <siprintf>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <uart_transmit_info+0x94>)
 80010e4:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <uart_transmit_info+0x94>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	491d      	ldr	r1, [pc, #116]	; (8001164 <uart_transmit_info+0x90>)
 80010f0:	481e      	ldr	r0, [pc, #120]	; (800116c <uart_transmit_info+0x98>)
 80010f2:	f005 fbbf 	bl	8006874 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "htime = %d ms; pulses = %d;   \r\n",
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <uart_transmit_info+0x9c>)
 80010f8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80010fc:	f8d3 2d4c 	ldr.w	r2, [r3, #3404]	; 0xd4c
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <uart_transmit_info+0x9c>)
 8001102:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001106:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800110a:	491a      	ldr	r1, [pc, #104]	; (8001174 <uart_transmit_info+0xa0>)
 800110c:	4815      	ldr	r0, [pc, #84]	; (8001164 <uart_transmit_info+0x90>)
 800110e:	f007 f86d 	bl	80081ec <siprintf>
 8001112:	4603      	mov	r3, r0
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <uart_transmit_info+0x94>)
 8001116:	6013      	str	r3, [r2, #0]
                         Meas.htime, Meas.pulses);
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <uart_transmit_info+0x94>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29a      	uxth	r2, r3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	4910      	ldr	r1, [pc, #64]	; (8001164 <uart_transmit_info+0x90>)
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <uart_transmit_info+0x98>)
 8001124:	f005 fba6 	bl	8006874 <HAL_UART_Transmit>
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
                         Meas.bad, Meas.t_vibr_start);
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <uart_transmit_info+0x9c>)
 800112a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800112e:	f893 3d50 	ldrb.w	r3, [r3, #3408]	; 0xd50
  uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
 8001132:	461a      	mov	r2, r3
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <uart_transmit_info+0x9c>)
 8001136:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800113a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800113e:	490e      	ldr	r1, [pc, #56]	; (8001178 <uart_transmit_info+0xa4>)
 8001140:	4808      	ldr	r0, [pc, #32]	; (8001164 <uart_transmit_info+0x90>)
 8001142:	f007 f853 	bl	80081ec <siprintf>
 8001146:	4603      	mov	r3, r0
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <uart_transmit_info+0x94>)
 800114a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <uart_transmit_info+0x94>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b29a      	uxth	r2, r3
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	4903      	ldr	r1, [pc, #12]	; (8001164 <uart_transmit_info+0x90>)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <uart_transmit_info+0x98>)
 8001158:	f005 fb8c 	bl	8006874 <HAL_UART_Transmit>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	08008b08 	.word	0x08008b08
 8001164:	24030fb0 	.word	0x24030fb0
 8001168:	24030fe4 	.word	0x24030fe4
 800116c:	24030f20 	.word	0x24030f20
 8001170:	240000d0 	.word	0x240000d0
 8001174:	08008b18 	.word	0x08008b18
 8001178:	08008b3c 	.word	0x08008b3c

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_MspInit+0x30>)
 8001190:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001194:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x30>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x30>)
 80011a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	58024400 	.word	0x58024400

080011bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b8      	sub	sp, #224	; 0xe0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	22b8      	movs	r2, #184	; 0xb8
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fffd 	bl	80081dc <memset>
  if(hadc->Instance==ADC1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <HAL_ADC_MspInit+0xd4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d14c      	bne.n	8001286 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80011f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4618      	mov	r0, r3
 800121e:	f002 ff35 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001228:	f7ff ffa8 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 800122e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 800123e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 800124c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001250:	4a10      	ldr	r2, [pc, #64]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_ADC_MspInit+0xd8>)
 800125c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ANALOG_READ_PA3_Pin_Pin;
 8001268:	2309      	movs	r3, #9
 800126a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_ADC_MspInit+0xdc>)
 8001282:	f001 fd4f 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	37e0      	adds	r7, #224	; 0xe0
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000
 8001294:	58024400 	.word	0x58024400
 8001298:	58020000 	.word	0x58020000

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_TIM_Base_MspInit+0x74>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10f      	bne.n	80012ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80012cc:	e01b      	b.n	8001306 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_TIM_Base_MspInit+0x7c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d116      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_TIM_Base_MspInit+0x78>)
 80012ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2076      	movs	r0, #118	; 0x76
 80012fc:	f001 fcdd 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001300:	2076      	movs	r0, #118	; 0x76
 8001302:	f001 fcf4 	bl	8002cee <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40014400 	.word	0x40014400
 8001314:	58024400 	.word	0x58024400
 8001318:	40014800 	.word	0x40014800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0b8      	sub	sp, #224	; 0xe0
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	22b8      	movs	r2, #184	; 0xb8
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f006 ff4d 	bl	80081dc <memset>
  if(huart->Instance==USART3)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a25      	ldr	r2, [pc, #148]	; (80013dc <HAL_UART_MspInit+0xc0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d142      	bne.n	80013d2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fe96 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001366:	f7ff ff09 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 800136c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 800137c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 800138a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_UART_MspInit+0xc4>)
 800139a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c0:	2307      	movs	r3, #7
 80013c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_UART_MspInit+0xc8>)
 80013ce:	f001 fca9 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	37e0      	adds	r7, #224	; 0xe0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004800 	.word	0x40004800
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020c00 	.word	0x58020c00

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f956 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM17_IRQHandler+0x10>)
 8001442:	f004 ffc8 	bl	80063d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24030ed4 	.word	0x24030ed4

08001450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001458:	4a14      	ldr	r2, [pc, #80]	; (80014ac <_sbrk+0x5c>)
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <_sbrk+0x60>)
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <_sbrk+0x64>)
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <_sbrk+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	d207      	bcs.n	8001490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001480:	f006 fe82 	bl	8008188 <__errno>
 8001484:	4603      	mov	r3, r0
 8001486:	220c      	movs	r2, #12
 8001488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148e:	e009      	b.n	80014a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <_sbrk+0x64>)
 80014a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	24100000 	.word	0x24100000
 80014b0:	00000400 	.word	0x00000400
 80014b4:	24030fe8 	.word	0x24030fe8
 80014b8:	24031018 	.word	0x24031018

080014bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <SystemInit+0xd0>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a31      	ldr	r2, [pc, #196]	; (800158c <SystemInit+0xd0>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SystemInit+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d807      	bhi.n	80014ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SystemInit+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <SystemInit+0xd4>)
 80014e6:	f043 0303 	orr.w	r3, r3, #3
 80014ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SystemInit+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <SystemInit+0xd8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SystemInit+0xd8>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4924      	ldr	r1, [pc, #144]	; (8001594 <SystemInit+0xd8>)
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemInit+0xdc>)
 8001506:	4013      	ands	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SystemInit+0xd4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <SystemInit+0xd4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 030f 	bic.w	r3, r3, #15
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <SystemInit+0xd4>)
 8001520:	f043 0303 	orr.w	r3, r3, #3
 8001524:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <SystemInit+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <SystemInit+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <SystemInit+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <SystemInit+0xd8>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <SystemInit+0xe0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <SystemInit+0xd8>)
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <SystemInit+0xe4>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <SystemInit+0xd8>)
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <SystemInit+0xe8>)
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SystemInit+0xd8>)
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <SystemInit+0xe8>)
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemInit+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <SystemInit+0xd8>)
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <SystemInit+0xe8>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SystemInit+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <SystemInit+0xd8>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SystemInit+0xec>)
 800157c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001580:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	52002000 	.word	0x52002000
 8001594:	58024400 	.word	0x58024400
 8001598:	eaf6ed7f 	.word	0xeaf6ed7f
 800159c:	02020200 	.word	0x02020200
 80015a0:	01ff0000 	.word	0x01ff0000
 80015a4:	01010280 	.word	0x01010280
 80015a8:	52004000 	.word	0x52004000

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b0:	f7ff ff84 	bl	80014bc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015da:	f006 fddb 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff f859 	bl	8000694 <main>
  bx  lr
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80015e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ec:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 80015f0:	08008bf4 	.word	0x08008bf4
  ldr r2, =_sbss
 80015f4:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 80015f8:	24031014 	.word	0x24031014

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001606:	2003      	movs	r0, #3
 8001608:	f001 fb4c 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800160c:	f002 fb68 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_Init+0x68>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	4913      	ldr	r1, [pc, #76]	; (800166c <HAL_Init+0x6c>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_Init+0x68>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_Init+0x6c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x70>)
 8001642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x74>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f814 	bl	8001678 <HAL_InitTick>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e002      	b.n	8001660 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800165a:	f7ff fd95 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	08008b5c 	.word	0x08008b5c
 8001670:	24000004 	.word	0x24000004
 8001674:	24000000 	.word	0x24000000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_InitTick+0x60>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e021      	b.n	80016d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_InitTick+0x64>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_InitTick+0x60>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 fb31 	bl	8002d0a <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c0:	f001 fafb 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x68>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2400000c 	.word	0x2400000c
 80016dc:	24000000 	.word	0x24000000
 80016e0:	24000008 	.word	0x24000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2400000c 	.word	0x2400000c
 8001708:	24030fec 	.word	0x24030fec

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	24030fec 	.word	0x24030fec

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2400000c 	.word	0x2400000c

0800176c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3360      	adds	r3, #96	; 0x60
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	431a      	orrs	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	611a      	str	r2, [r3, #16]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001846:	b480      	push	{r7}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3360      	adds	r3, #96	; 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
  }
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b087      	sub	sp, #28
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3330      	adds	r3, #48	; 0x30
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	4413      	add	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	211f      	movs	r1, #31
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0e9b      	lsrs	r3, r3, #26
 80018da:	f003 011f 	and.w	r1, r3, #31
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ee:	bf00      	nop
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3314      	adds	r3, #20
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	0e5b      	lsrs	r3, r3, #25
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	0d1b      	lsrs	r3, r3, #20
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2107      	movs	r1, #7
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	0d1b      	lsrs	r3, r3, #20
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001944:	bf00      	nop
 8001946:	371c      	adds	r7, #28
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0318 	and.w	r3, r3, #24
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001974:	40d9      	lsrs	r1, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	400b      	ands	r3, r1
 800197a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197e:	431a      	orrs	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	000fffff 	.word	0x000fffff

08001998 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 031f 	and.w	r3, r3, #31
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6093      	str	r3, [r2, #8]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	5fffffc0 	.word	0x5fffffc0

080019f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	6fffffc0 	.word	0x6fffffc0

08001a44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <LL_ADC_Enable+0x24>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	7fffffc0 	.word	0x7fffffc0

08001a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_IsEnabled+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_IsEnabled+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <LL_ADC_REG_StartConversion+0x24>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	f043 0204 	orr.w	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	7fffffc0 	.word	0x7fffffc0

08001ae4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d101      	bne.n	8001afc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d101      	bne.n	8001b22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e138      	b.n	8001dbc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fb2f 	bl	80011bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff3f 	bl	80019f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff25 	bl	80019d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff5a 	bl	8001a44 <LL_ADC_IsInternalRegulatorEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d114      	bne.n	8001bc0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff3e 	bl	8001a1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba0:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_ADC_Init+0x294>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	4a88      	ldr	r2, [pc, #544]	; (8001dc8 <HAL_ADC_Init+0x298>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff3d 	bl	8001a44 <LL_ADC_IsInternalRegulatorEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff77 	bl	8001ae4 <LL_ADC_REG_IsConversionOngoing>
 8001bf6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 80d2 	bne.w	8001daa <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 80ce 	bne.w	8001daa <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c16:	f043 0202 	orr.w	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff36 	bl	8001a94 <LL_ADC_IsEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d110      	bne.n	8001c50 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c2e:	4867      	ldr	r0, [pc, #412]	; (8001dcc <HAL_ADC_Init+0x29c>)
 8001c30:	f7ff ff30 	bl	8001a94 <LL_ADC_IsEnabled>
 8001c34:	4604      	mov	r4, r0
 8001c36:	4866      	ldr	r0, [pc, #408]	; (8001dd0 <HAL_ADC_Init+0x2a0>)
 8001c38:	f7ff ff2c 	bl	8001a94 <LL_ADC_IsEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4862      	ldr	r0, [pc, #392]	; (8001dd4 <HAL_ADC_Init+0x2a4>)
 8001c4c:	f7ff fd8e 	bl	800176c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7d5b      	ldrb	r3, [r3, #21]
 8001c54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c5a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c60:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7f1b      	ldrb	r3, [r3, #28]
 8001c66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d106      	bne.n	8001c82 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	045b      	lsls	r3, r3, #17
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_ADC_Init+0x2a8>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	69b9      	ldr	r1, [r7, #24]
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff14 	bl	8001ae4 <LL_ADC_REG_IsConversionOngoing>
 8001cbc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff21 	bl	8001b0a <LL_ADC_INJ_IsConversionOngoing>
 8001cc8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d14a      	bne.n	8001d66 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d147      	bne.n	8001d66 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7d1b      	ldrb	r3, [r3, #20]
 8001cda:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_ADC_Init+0x2ac>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	69b9      	ldr	r1, [r7, #24]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d11b      	bne.n	8001d3a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_ADC_Init+0x2b0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d16:	3a01      	subs	r2, #1
 8001d18:	0411      	lsls	r1, r2, #16
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	e007      	b.n	8001d4a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fd41 	bl	80027e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10c      	bne.n	8001d88 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f023 010f 	bic.w	r1, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020f 	bic.w	r2, r2, #15
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
 8001da8:	e007      	b.n	8001dba <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	24000000 	.word	0x24000000
 8001dc8:	053e2d63 	.word	0x053e2d63
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40022100 	.word	0x40022100
 8001dd4:	40022300 	.word	0x40022300
 8001dd8:	fff0c003 	.word	0xfff0c003
 8001ddc:	ffffbffc 	.word	0xffffbffc
 8001de0:	fc00f81e 	.word	0xfc00f81e

08001de4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dec:	4856      	ldr	r0, [pc, #344]	; (8001f48 <HAL_ADC_Start+0x164>)
 8001dee:	f7ff fdd3 	bl	8001998 <LL_ADC_GetMultimode>
 8001df2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fe73 	bl	8001ae4 <LL_ADC_REG_IsConversionOngoing>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 809a 	bne.w	8001f3a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Start+0x30>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e095      	b.n	8001f40 <HAL_ADC_Start+0x15c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fc67 	bl	80026f0 <ADC_Enable>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 8081 	bne.w	8001f30 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_ADC_Start+0x168>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <HAL_ADC_Start+0x16c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d002      	beq.n	8001e4e <HAL_ADC_Start+0x6a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	e000      	b.n	8001e50 <HAL_ADC_Start+0x6c>
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_ADC_Start+0x170>)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d002      	beq.n	8001e5e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d105      	bne.n	8001e6a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e76:	d106      	bne.n	8001e86 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f023 0206 	bic.w	r2, r3, #6
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	221c      	movs	r2, #28
 8001e92:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	; (8001f50 <HAL_ADC_Start+0x16c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_Start+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e000      	b.n	8001eae <HAL_ADC_Start+0xca>
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_ADC_Start+0x170>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d002      	beq.n	8001ec8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d114      	bne.n	8001ef2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ede:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fde6 	bl	8001abc <LL_ADC_REG_StartConversion>
 8001ef0:	e025      	b.n	8001f3e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <HAL_ADC_Start+0x16c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d002      	beq.n	8001f0e <HAL_ADC_Start+0x12a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_Start+0x12c>
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_ADC_Start+0x170>)
 8001f10:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00f      	beq.n	8001f3e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f2e:	e006      	b.n	8001f3e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f38:	e001      	b.n	8001f3e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40022300 	.word	0x40022300
 8001f4c:	fffff0fe 	.word	0xfffff0fe
 8001f50:	40022100 	.word	0x40022100
 8001f54:	40022000 	.word	0x40022000

08001f58 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f62:	4866      	ldr	r0, [pc, #408]	; (80020fc <HAL_ADC_PollForConversion+0x1a4>)
 8001f64:	f7ff fd18 	bl	8001998 <LL_ADC_GetMultimode>
 8001f68:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d102      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f72:	2308      	movs	r3, #8
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e02a      	b.n	8001fce <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d002      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	d111      	bne.n	8001fae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0a4      	b.n	80020f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fa8:	2304      	movs	r3, #4
 8001faa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001fac:	e00f      	b.n	8001fce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fae:	4853      	ldr	r0, [pc, #332]	; (80020fc <HAL_ADC_PollForConversion+0x1a4>)
 8001fb0:	f7ff fd00 	bl	80019b4 <LL_ADC_GetMultiDMATransfer>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e093      	b.n	80020f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fca:	2304      	movs	r3, #4
 8001fcc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fce:	f7ff fb9d 	bl	800170c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd4:	e021      	b.n	800201a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fdc:	d01d      	beq.n	800201a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fde:	f7ff fb95 	bl	800170c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <HAL_ADC_PollForConversion+0x9c>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d112      	bne.n	800201a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e06b      	b.n	80020f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0d6      	beq.n	8001fd6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fc1f 	bl	800187c <LL_ADC_REG_IsTriggerSourceSWStart>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7d5b      	ldrb	r3, [r3, #21]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d118      	bne.n	800207e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d111      	bne.n	800207e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_ADC_PollForConversion+0x1a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d002      	beq.n	800208e <HAL_ADC_PollForConversion+0x136>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	e000      	b.n	8002090 <HAL_ADC_PollForConversion+0x138>
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_ADC_PollForConversion+0x1ac>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4293      	cmp	r3, r2
 8002096:	d008      	beq.n	80020aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d104      	bne.n	80020b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e00c      	b.n	80020ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_ADC_PollForConversion+0x1a8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d002      	beq.n	80020c4 <HAL_ADC_PollForConversion+0x16c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e000      	b.n	80020c6 <HAL_ADC_PollForConversion+0x16e>
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_ADC_PollForConversion+0x1ac>)
 80020c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d104      	bne.n	80020de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2208      	movs	r2, #8
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e008      	b.n	80020f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	220c      	movs	r2, #12
 80020ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40022300 	.word	0x40022300
 8002100:	40022100 	.word	0x40022100
 8002104:	40022000 	.word	0x40022000

08002108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b0a1      	sub	sp, #132	; 0x84
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a9a      	ldr	r2, [pc, #616]	; (80023a8 <HAL_ADC_ConfigChannel+0x284>)
 800213e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x2a>
 800214a:	2302      	movs	r3, #2
 800214c:	e2bc      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x5a4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fcc2 	bl	8001ae4 <LL_ADC_REG_IsConversionOngoing>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 82a1 	bne.w	80026aa <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x62>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0e9b      	lsrs	r3, r3, #26
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2201      	movs	r2, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	e016      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x90>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002196:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e003      	b.n	80021aa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80021a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	69d1      	ldr	r1, [r2, #28]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	430b      	orrs	r3, r1
 80021c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f7ff fb67 	bl	80018a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fc83 	bl	8001ae4 <LL_ADC_REG_IsConversionOngoing>
 80021de:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fc90 	bl	8001b0a <LL_ADC_INJ_IsConversionOngoing>
 80021ea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80a0 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 809c 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	461a      	mov	r2, r3
 800220a:	f7ff fb76 	bl	80018fa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x110>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	e00a      	b.n	800224a <HAL_ADC_ConfigChannel+0x126>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d027      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6919      	ldr	r1, [r3, #16]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002262:	f7ff fab7 	bl	80017d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7e5b      	ldrb	r3, [r3, #25]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_ADC_ConfigChannel+0x158>
 8002276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800227a:	e000      	b.n	800227e <HAL_ADC_ConfigChannel+0x15a>
 800227c:	2300      	movs	r3, #0
 800227e:	461a      	mov	r2, r3
 8002280:	f7ff fae1 	bl	8001846 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6919      	ldr	r1, [r3, #16]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7e1b      	ldrb	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_ADC_ConfigChannel+0x176>
 8002294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002298:	e000      	b.n	800229c <HAL_ADC_ConfigChannel+0x178>
 800229a:	2300      	movs	r3, #0
 800229c:	461a      	mov	r2, r3
 800229e:	f7ff fab9 	bl	8001814 <LL_ADC_SetDataRightShift>
 80022a2:	e047      	b.n	8002334 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	069b      	lsls	r3, r3, #26
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d107      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800230e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	429a      	cmp	r2, r3
 8002322:	d107      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002332:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fbab 	bl	8001a94 <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 81bb 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff fafc 	bl	8001950 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_ADC_ConfigChannel+0x284>)
 800235e:	4293      	cmp	r3, r2
 8002360:	f040 8130 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_ADC_ConfigChannel+0x268>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	3301      	adds	r3, #1
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2b09      	cmp	r3, #9
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e01b      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x2a0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800239e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e005      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x290>
 80023a8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80023ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	bf94      	ite	ls
 80023be:	2301      	movls	r3, #1
 80023c0:	2300      	movhi	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d079      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x2c0>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	069b      	lsls	r3, r3, #26
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	e015      	b.n	8002410 <HAL_ADC_ConfigChannel+0x2ec>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x30c>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	e017      	b.n	8002460 <HAL_ADC_ConfigChannel+0x33c>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800244c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	ea42 0103 	orr.w	r1, r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x362>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	3301      	adds	r3, #1
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	051b      	lsls	r3, r3, #20
 8002484:	e018      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x394>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800249e:	2320      	movs	r3, #32
 80024a0:	e003      	b.n	80024aa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	fab3 f383 	clz	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b8:	430b      	orrs	r3, r1
 80024ba:	e07e      	b.n	80025ba <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x3b4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	3301      	adds	r3, #1
 80024d0:	069b      	lsls	r3, r3, #26
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d6:	e015      	b.n	8002504 <HAL_ADC_ConfigChannel+0x3e0>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e003      	b.n	80024fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3301      	adds	r3, #1
 80024fe:	069b      	lsls	r3, r3, #26
 8002500:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x400>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	3301      	adds	r3, #1
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	e017      	b.n	8002554 <HAL_ADC_ConfigChannel+0x430>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	61bb      	str	r3, [r7, #24]
  return result;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e003      	b.n	8002548 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	ea42 0103 	orr.w	r1, r2, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x45c>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	3301      	adds	r3, #1
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	3b1e      	subs	r3, #30
 8002578:	051b      	lsls	r3, r3, #20
 800257a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257e:	e01b      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x494>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	60fb      	str	r3, [r7, #12]
  return result;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	3b1e      	subs	r3, #30
 80025b2:	051b      	lsls	r3, r3, #20
 80025b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	430b      	orrs	r3, r1
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6892      	ldr	r2, [r2, #8]
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff f99b 	bl	80018fa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da77      	bge.n	80026bc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	4840      	ldr	r0, [pc, #256]	; (80026d0 <HAL_ADC_ConfigChannel+0x5ac>)
 80025ce:	f7ff f8f3 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 80025d2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d4:	483f      	ldr	r0, [pc, #252]	; (80026d4 <HAL_ADC_ConfigChannel+0x5b0>)
 80025d6:	f7ff fa5d 	bl	8001a94 <LL_ADC_IsEnabled>
 80025da:	4604      	mov	r4, r0
 80025dc:	483e      	ldr	r0, [pc, #248]	; (80026d8 <HAL_ADC_ConfigChannel+0x5b4>)
 80025de:	f7ff fa59 	bl	8001a94 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4323      	orrs	r3, r4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d155      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <HAL_ADC_ConfigChannel+0x5b8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d122      	bne.n	800263a <HAL_ADC_ConfigChannel+0x516>
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d159      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800260e:	4619      	mov	r1, r3
 8002610:	482f      	ldr	r0, [pc, #188]	; (80026d0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002612:	f7ff f8be 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002616:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <HAL_ADC_ConfigChannel+0x5bc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_ADC_ConfigChannel+0x5c0>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	3301      	adds	r3, #1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800262a:	e002      	b.n	8002632 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	3b01      	subs	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	e040      	b.n	80026bc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x544>
 8002644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d131      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265e:	4619      	mov	r1, r3
 8002660:	481b      	ldr	r0, [pc, #108]	; (80026d0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002662:	f7ff f896 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002666:	e029      	b.n	80026bc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_ADC_ConfigChannel+0x5c8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d124      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x598>
 8002672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11f      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11a      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800268c:	4619      	mov	r1, r3
 800268e:	4810      	ldr	r0, [pc, #64]	; (80026d0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002690:	f7ff f87f 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
 8002694:	e012      	b.n	80026bc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026a8:	e008      	b.n	80026bc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3784      	adds	r7, #132	; 0x84
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	40022300 	.word	0x40022300
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40022100 	.word	0x40022100
 80026dc:	cb840000 	.word	0xcb840000
 80026e0:	24000000 	.word	0x24000000
 80026e4:	053e2d63 	.word	0x053e2d63
 80026e8:	bac04000 	.word	0xbac04000
 80026ec:	cfb80000 	.word	0xcfb80000

080026f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f9c9 	bl	8001a94 <LL_ADC_IsEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d161      	bne.n	80027cc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <ADC_Enable+0xe8>)
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e04d      	b.n	80027ce <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff f998 	bl	8001a6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800273c:	f7fe ffe6 	bl	800170c <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002742:	4826      	ldr	r0, [pc, #152]	; (80027dc <ADC_Enable+0xec>)
 8002744:	f7ff f928 	bl	8001998 <LL_ADC_GetMultimode>
 8002748:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <ADC_Enable+0xf0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d002      	beq.n	800275a <ADC_Enable+0x6a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	e000      	b.n	800275c <ADC_Enable+0x6c>
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <ADC_Enable+0xf4>)
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4293      	cmp	r3, r2
 8002762:	d02c      	beq.n	80027be <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d130      	bne.n	80027cc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800276a:	e028      	b.n	80027be <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff f98f 	bl	8001a94 <LL_ADC_IsEnabled>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f973 	bl	8001a6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002786:	f7fe ffc1 	bl	800170c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00d      	beq.n	80027be <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d1cf      	bne.n	800276c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	8000003f 	.word	0x8000003f
 80027dc:	40022300 	.word	0x40022300
 80027e0:	40022100 	.word	0x40022100
 80027e4:	40022000 	.word	0x40022000

080027e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027f0:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <ADC_ConfigureBoostMode+0x188>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01c      	beq.n	8002836 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027fc:	f001 fbea 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8002800:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800280a:	d010      	beq.n	800282e <ADC_ConfigureBoostMode+0x46>
 800280c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002810:	d871      	bhi.n	80028f6 <ADC_ConfigureBoostMode+0x10e>
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d002      	beq.n	800281e <ADC_ConfigureBoostMode+0x36>
 8002818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800281c:	d16b      	bne.n	80028f6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
        break;
 800282c:	e066      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
        break;
 8002834:	e062      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002836:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800283a:	f002 fb33 	bl	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 800283e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002848:	d051      	beq.n	80028ee <ADC_ConfigureBoostMode+0x106>
 800284a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800284e:	d854      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 8002850:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002854:	d047      	beq.n	80028e6 <ADC_ConfigureBoostMode+0xfe>
 8002856:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800285a:	d84e      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 800285c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002860:	d03d      	beq.n	80028de <ADC_ConfigureBoostMode+0xf6>
 8002862:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002866:	d848      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 8002868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286c:	d033      	beq.n	80028d6 <ADC_ConfigureBoostMode+0xee>
 800286e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002872:	d842      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 8002874:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002878:	d029      	beq.n	80028ce <ADC_ConfigureBoostMode+0xe6>
 800287a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800287e:	d83c      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 8002880:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002884:	d01a      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd4>
 8002886:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800288a:	d836      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 800288c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002890:	d014      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd4>
 8002892:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002896:	d830      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 8002898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289c:	d00e      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd4>
 800289e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a2:	d82a      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 80028a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028a8:	d008      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd4>
 80028aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028ae:	d824      	bhi.n	80028fa <ADC_ConfigureBoostMode+0x112>
 80028b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b4:	d002      	beq.n	80028bc <ADC_ConfigureBoostMode+0xd4>
 80028b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ba:	d11e      	bne.n	80028fa <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0c9b      	lsrs	r3, r3, #18
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
        break;
 80028cc:	e016      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
        break;
 80028d4:	e012      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	60fb      	str	r3, [r7, #12]
        break;
 80028dc:	e00e      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	60fb      	str	r3, [r7, #12]
        break;
 80028e4:	e00a      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	09db      	lsrs	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
        break;
 80028ec:	e006      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	60fb      	str	r3, [r7, #12]
        break;
 80028f4:	e002      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
        break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80028fa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <ADC_ConfigureBoostMode+0x18c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d808      	bhi.n	800291c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002918:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800291a:	e025      	b.n	8002968 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <ADC_ConfigureBoostMode+0x190>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d80a      	bhi.n	800293a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	e016      	b.n	8002968 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <ADC_ConfigureBoostMode+0x194>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d80a      	bhi.n	8002958 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	e007      	b.n	8002968 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022300 	.word	0x40022300
 8002974:	005f5e10 	.word	0x005f5e10
 8002978:	00bebc20 	.word	0x00bebc20
 800297c:	017d7840 	.word	0x017d7840

08002980 <LL_ADC_IsEnabled>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d101      	bne.n	80029be <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b09f      	sub	sp, #124	; 0x7c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e080      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e001      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e05f      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffb9 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffb3 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d141      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13e      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a4e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a6a:	4822      	ldr	r0, [pc, #136]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a6c:	f7ff ff88 	bl	8002980 <LL_ADC_IsEnabled>
 8002a70:	4604      	mov	r4, r0
 8002a72:	4821      	ldr	r0, [pc, #132]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a74:	f7ff ff84 	bl	8002980 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12e      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	e021      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	4813      	ldr	r0, [pc, #76]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002aa8:	f7ff ff6a 	bl	8002980 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ab0:	f7ff ff66 	bl	8002980 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d110      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	e009      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002adc:	e000      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ade:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	377c      	adds	r7, #124	; 0x7c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	fffff0e0 	.word	0xfffff0e0

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff40 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff33 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa4 	bl	8002c60 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_GPIO_Init+0x234>)
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d36:	e194      	b.n	8003062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8186 	beq.w	800305c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x44>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d130      	bne.n	8002dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0201 	and.w	r2, r3, #1
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d017      	beq.n	8002e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d123      	bne.n	8002e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	69b9      	ldr	r1, [r7, #24]
 8002e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80e0 	beq.w	800305c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9c:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002e9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002eae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_GPIO_Init+0x23c>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <HAL_GPIO_Init+0x240>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d052      	beq.n	8002f8c <HAL_GPIO_Init+0x268>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_GPIO_Init+0x244>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d031      	beq.n	8002f52 <HAL_GPIO_Init+0x22e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_GPIO_Init+0x248>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02b      	beq.n	8002f4e <HAL_GPIO_Init+0x22a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x24c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_GPIO_Init+0x250>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_GPIO_Init+0x254>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_GPIO_Init+0x258>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_GPIO_Init+0x25c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x260>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_GPIO_Init+0x264>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f2e:	2309      	movs	r3, #9
 8002f30:	e02d      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f32:	230a      	movs	r3, #10
 8002f34:	e02b      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e029      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e027      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f3e:	2306      	movs	r3, #6
 8002f40:	e025      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e023      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f46:	2304      	movs	r3, #4
 8002f48:	e021      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e01f      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e01d      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01b      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f56:	bf00      	nop
 8002f58:	58000080 	.word	0x58000080
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	58000400 	.word	0x58000400
 8002f64:	58020000 	.word	0x58020000
 8002f68:	58020400 	.word	0x58020400
 8002f6c:	58020800 	.word	0x58020800
 8002f70:	58020c00 	.word	0x58020c00
 8002f74:	58021000 	.word	0x58021000
 8002f78:	58021400 	.word	0x58021400
 8002f7c:	58021800 	.word	0x58021800
 8002f80:	58021c00 	.word	0x58021c00
 8002f84:	58022000 	.word	0x58022000
 8002f88:	58022400 	.word	0x58022400
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f002 0203 	and.w	r2, r2, #3
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	4093      	lsls	r3, r2
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9e:	4938      	ldr	r1, [pc, #224]	; (8003080 <HAL_GPIO_Init+0x35c>)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f ae63 	bne.w	8002d38 <HAL_GPIO_Init+0x14>
  }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3724      	adds	r7, #36	; 0x24
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	58000400 	.word	0x58000400

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d00a      	beq.n	80030e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e040      	b.n	8003160 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e03e      	b.n	8003160 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80030ea:	491f      	ldr	r1, [pc, #124]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030f2:	f7fe fb0b 	bl	800170c <HAL_GetTick>
 80030f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030f8:	e009      	b.n	800310e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030fa:	f7fe fb07 	bl	800170c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003108:	d901      	bls.n	800310e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e028      	b.n	8003160 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	d1ee      	bne.n	80030fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b1e      	cmp	r3, #30
 8003120:	d008      	beq.n	8003134 <HAL_PWREx_ConfigSupply+0x7c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b2e      	cmp	r3, #46	; 0x2e
 8003126:	d005      	beq.n	8003134 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b1d      	cmp	r3, #29
 800312c:	d002      	beq.n	8003134 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b2d      	cmp	r3, #45	; 0x2d
 8003132:	d114      	bne.n	800315e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003134:	f7fe faea 	bl	800170c <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800313a:	e009      	b.n	8003150 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800313c:	f7fe fae6 	bl	800170c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314a:	d901      	bls.n	8003150 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_PWREx_ConfigSupply+0xb0>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d1ee      	bne.n	800313c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	58024800 	.word	0x58024800

0800316c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08c      	sub	sp, #48	; 0x30
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e3f4      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80b3 	beq.w	80032f2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318c:	4b95      	ldr	r3, [pc, #596]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003196:	4b93      	ldr	r3, [pc, #588]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	2b10      	cmp	r3, #16
 80031a0:	d007      	beq.n	80031b2 <HAL_RCC_OscConfig+0x46>
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	2b18      	cmp	r3, #24
 80031a6:	d112      	bne.n	80031ce <HAL_RCC_OscConfig+0x62>
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d10d      	bne.n	80031ce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b2:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8098 	beq.w	80032f0 <HAL_RCC_OscConfig+0x184>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 8093 	bne.w	80032f0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e3cc      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x7a>
 80031d8:	4b82      	ldr	r3, [pc, #520]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a81      	ldr	r2, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e058      	b.n	8003298 <HAL_RCC_OscConfig+0x12c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d112      	bne.n	8003214 <HAL_RCC_OscConfig+0xa8>
 80031ee:	4b7d      	ldr	r3, [pc, #500]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7c      	ldr	r2, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b7a      	ldr	r3, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a79      	ldr	r2, [pc, #484]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003200:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a76      	ldr	r2, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e041      	b.n	8003298 <HAL_RCC_OscConfig+0x12c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d112      	bne.n	8003244 <HAL_RCC_OscConfig+0xd8>
 800321e:	4b71      	ldr	r3, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a70      	ldr	r2, [pc, #448]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6d      	ldr	r2, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003230:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e029      	b.n	8003298 <HAL_RCC_OscConfig+0x12c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800324c:	d112      	bne.n	8003274 <HAL_RCC_OscConfig+0x108>
 800324e:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a64      	ldr	r2, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b62      	ldr	r3, [pc, #392]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a61      	ldr	r2, [pc, #388]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5e      	ldr	r2, [pc, #376]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e011      	b.n	8003298 <HAL_RCC_OscConfig+0x12c>
 8003274:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b55      	ldr	r3, [pc, #340]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a54      	ldr	r2, [pc, #336]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fa34 	bl	800170c <HAL_GetTick>
 80032a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fa30 	bl	800170c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e356      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x13c>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe fa20 	bl	800170c <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fa1c 	bl	800170c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e342      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e2:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x164>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 808d 	beq.w	800341a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003300:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003308:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_RCC_OscConfig+0x1ba>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2b18      	cmp	r3, #24
 800331a:	d137      	bne.n	800338c <HAL_RCC_OscConfig+0x220>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d132      	bne.n	800338c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x1d2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e314      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800333e:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0219 	bic.w	r2, r3, #25
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4926      	ldr	r1, [pc, #152]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003350:	f7fe f9dc 	bl	800170c <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe f9d8 	bl	800170c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e2fe      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4917      	ldr	r1, [pc, #92]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338a:	e046      	b.n	800341a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d029      	beq.n	80033e8 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 0219 	bic.w	r2, r3, #25
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4910      	ldr	r1, [pc, #64]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe f9b1 	bl	800170c <HAL_GetTick>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ae:	f7fe f9ad 	bl	800170c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e2d3      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	4902      	ldr	r1, [pc, #8]	; (80033e4 <HAL_RCC_OscConfig+0x278>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
 80033e0:	e01b      	b.n	800341a <HAL_RCC_OscConfig+0x2ae>
 80033e2:	bf00      	nop
 80033e4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e8:	4b97      	ldr	r3, [pc, #604]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a96      	ldr	r2, [pc, #600]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe f98a 	bl	800170c <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fc:	f7fe f986 	bl	800170c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e2ac      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800340e:	4b8e      	ldr	r3, [pc, #568]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06a      	beq.n	80034fc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003430:	4b85      	ldr	r3, [pc, #532]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d007      	beq.n	800344c <HAL_RCC_OscConfig+0x2e0>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b18      	cmp	r3, #24
 8003440:	d11b      	bne.n	800347a <HAL_RCC_OscConfig+0x30e>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d116      	bne.n	800347a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800344c:	4b7e      	ldr	r3, [pc, #504]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e281      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003464:	4b78      	ldr	r3, [pc, #480]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	4975      	ldr	r1, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003478:	e040      	b.n	80034fc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d023      	beq.n	80034ca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003482:	4b71      	ldr	r3, [pc, #452]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a70      	ldr	r2, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fe f93d 	bl	800170c <HAL_GetTick>
 8003492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003496:	f7fe f939 	bl	800170c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e25f      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034a8:	4b67      	ldr	r3, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034b4:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	061b      	lsls	r3, r3, #24
 80034c2:	4961      	ldr	r1, [pc, #388]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
 80034c8:	e018      	b.n	80034fc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5e      	ldr	r2, [pc, #376]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fe f919 	bl	800170c <HAL_GetTick>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034de:	f7fe f915 	bl	800170c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e23b      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034f0:	4b55      	ldr	r3, [pc, #340]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d036      	beq.n	8003576 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d019      	beq.n	8003544 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	4a4c      	ldr	r2, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe f8f6 	bl	800170c <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe f8f2 	bl	800170c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e218      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x3b8>
 8003542:	e018      	b.n	8003576 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b40      	ldr	r3, [pc, #256]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	4a3f      	ldr	r2, [pc, #252]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe f8dc 	bl	800170c <HAL_GetTick>
 8003554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe f8d8 	bl	800170c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1fe      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d036      	beq.n	80035f0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d019      	beq.n	80035be <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 8003590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003594:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003596:	f7fe f8b9 	bl	800170c <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800359e:	f7fe f8b5 	bl	800170c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1db      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x432>
 80035bc:	e018      	b.n	80035f0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035be:	4b22      	ldr	r3, [pc, #136]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80035c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ca:	f7fe f89f 	bl	800170c <HAL_GetTick>
 80035ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035d2:	f7fe f89b 	bl	800170c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e1c1      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80af 	beq.w	800375c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_OscConfig+0x4e0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x4e0>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800360a:	f7fe f87f 	bl	800170c <HAL_GetTick>
 800360e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fe f87b 	bl	800170c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b64      	cmp	r3, #100	; 0x64
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1a1      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x4e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x4e4>
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a02      	ldr	r2, [pc, #8]	; (8003648 <HAL_RCC_OscConfig+0x4dc>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	e05b      	b.n	80036fe <HAL_RCC_OscConfig+0x592>
 8003646:	bf00      	nop
 8003648:	58024400 	.word	0x58024400
 800364c:	58024800 	.word	0x58024800
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d112      	bne.n	800367e <HAL_RCC_OscConfig+0x512>
 8003658:	4b9d      	ldr	r3, [pc, #628]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a9c      	ldr	r2, [pc, #624]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b9a      	ldr	r3, [pc, #616]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a99      	ldr	r2, [pc, #612]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800366a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	4b97      	ldr	r3, [pc, #604]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a96      	ldr	r2, [pc, #600]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003676:	f023 0304 	bic.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	e03f      	b.n	80036fe <HAL_RCC_OscConfig+0x592>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d112      	bne.n	80036ac <HAL_RCC_OscConfig+0x540>
 8003686:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a91      	ldr	r2, [pc, #580]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a8e      	ldr	r2, [pc, #568]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	4b8c      	ldr	r3, [pc, #560]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a8b      	ldr	r2, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	e028      	b.n	80036fe <HAL_RCC_OscConfig+0x592>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b85      	cmp	r3, #133	; 0x85
 80036b2:	d112      	bne.n	80036da <HAL_RCC_OscConfig+0x56e>
 80036b4:	4b86      	ldr	r3, [pc, #536]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	4a85      	ldr	r2, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6713      	str	r3, [r2, #112]	; 0x70
 80036c0:	4b83      	ldr	r3, [pc, #524]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a82      	ldr	r2, [pc, #520]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	4b80      	ldr	r3, [pc, #512]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a7f      	ldr	r2, [pc, #508]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
 80036d8:	e011      	b.n	80036fe <HAL_RCC_OscConfig+0x592>
 80036da:	4b7d      	ldr	r3, [pc, #500]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	4b7a      	ldr	r3, [pc, #488]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a79      	ldr	r2, [pc, #484]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a76      	ldr	r2, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d015      	beq.n	8003732 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe f801 	bl	800170c <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fd fffd 	bl	800170c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e121      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ee      	beq.n	800370e <HAL_RCC_OscConfig+0x5a2>
 8003730:	e014      	b.n	800375c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003732:	f7fd ffeb 	bl	800170c <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd ffe7 	bl	800170c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e10b      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003750:	4b5f      	ldr	r3, [pc, #380]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ee      	bne.n	800373a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8100 	beq.w	8003966 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003766:	4b5a      	ldr	r3, [pc, #360]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800376e:	2b18      	cmp	r3, #24
 8003770:	f000 80bb 	beq.w	80038ea <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2b02      	cmp	r3, #2
 800377a:	f040 8095 	bne.w	80038a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a53      	ldr	r2, [pc, #332]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd ffbf 	bl	800170c <HAL_GetTick>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd ffbb 	bl	800170c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0e1      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a4:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80037b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b4:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x768>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	430a      	orrs	r2, r1
 80037c4:	4942      	ldr	r1, [pc, #264]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	628b      	str	r3, [r1, #40]	; 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	3b01      	subs	r3, #1
 80037da:	025b      	lsls	r3, r3, #9
 80037dc:	b29b      	uxth	r3, r3
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	3b01      	subs	r3, #1
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	3b01      	subs	r3, #1
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80037fa:	4935      	ldr	r1, [pc, #212]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a32      	ldr	r2, [pc, #200]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800380e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_RCC_OscConfig+0x76c>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003818:	00d2      	lsls	r2, r2, #3
 800381a:	492d      	ldr	r1, [pc, #180]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800381c:	4313      	orrs	r3, r2
 800381e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	f023 020c 	bic.w	r2, r3, #12
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	4928      	ldr	r1, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800382e:	4313      	orrs	r3, r2
 8003830:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003832:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f023 0202 	bic.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4924      	ldr	r1, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003840:	4313      	orrs	r3, r2
 8003842:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003844:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800384a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fd ff44 	bl	800170c <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd ff40 	bl	800170c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e066      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x71c>
 80038a6:	e05e      	b.n	8003966 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a08      	ldr	r2, [pc, #32]	; (80038d0 <HAL_RCC_OscConfig+0x764>)
 80038ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd ff2a 	bl	800170c <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ba:	e00f      	b.n	80038dc <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd ff26 	bl	800170c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d908      	bls.n	80038dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04c      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
 80038ce:	bf00      	nop
 80038d0:	58024400 	.word	0x58024400
 80038d4:	fffffc0c 	.word	0xfffffc0c
 80038d8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038dc:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x804>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e9      	bne.n	80038bc <HAL_RCC_OscConfig+0x750>
 80038e8:	e03d      	b.n	8003966 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_RCC_OscConfig+0x804>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_RCC_OscConfig+0x804>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d031      	beq.n	8003962 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d12a      	bne.n	8003962 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d122      	bne.n	8003962 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d11a      	bne.n	8003962 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	0a5b      	lsrs	r3, r3, #9
 8003930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d111      	bne.n	8003962 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d108      	bne.n	8003962 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0e1b      	lsrs	r3, r3, #24
 8003954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3730      	adds	r7, #48	; 0x30
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	58024400 	.word	0x58024400

08003974 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e19c      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b8a      	ldr	r3, [pc, #552]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d910      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b87      	ldr	r3, [pc, #540]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	4985      	ldr	r1, [pc, #532]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b83      	ldr	r3, [pc, #524]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e184      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	4b7b      	ldr	r3, [pc, #492]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d908      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039d4:	4b78      	ldr	r3, [pc, #480]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	4975      	ldr	r1, [pc, #468]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d010      	beq.n	8003a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d908      	bls.n	8003a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	496a      	ldr	r1, [pc, #424]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d908      	bls.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a30:	4b61      	ldr	r3, [pc, #388]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	495e      	ldr	r1, [pc, #376]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d908      	bls.n	8003a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a5e:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4953      	ldr	r1, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d908      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f023 020f 	bic.w	r2, r3, #15
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d055      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aaa:	4b43      	ldr	r3, [pc, #268]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4940      	ldr	r1, [pc, #256]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d121      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0f6      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003adc:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d115      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0ea      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003af4:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0de      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b04:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0d6      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f023 0207 	bic.w	r2, r3, #7
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4925      	ldr	r1, [pc, #148]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b26:	f7fd fdf1 	bl	800170c <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f7fd fded 	bl	800170c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e0be      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b44:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d1eb      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d208      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d214      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 020f 	bic.w	r2, r3, #15
 8003b9a:	4906      	ldr	r1, [pc, #24]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <HAL_RCC_ClockConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e086      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x34e>
 8003bb4:	52002000 	.word	0x52002000
 8003bb8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d208      	bcs.n	8003bea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4939      	ldr	r1, [pc, #228]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d208      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c06:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	492e      	ldr	r1, [pc, #184]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d208      	bcs.n	8003c46 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4922      	ldr	r1, [pc, #136]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d208      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4917      	ldr	r1, [pc, #92]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003c74:	f000 f834 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x35c>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x358>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_RCC_ClockConfig+0x35c>)
 8003c9c:	5cd3      	ldrb	r3, [r2, r3]
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x360>)
 8003caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x364>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x368>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fcde 	bl	8001678 <HAL_InitTick>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	08008b5c 	.word	0x08008b5c
 8003cd4:	24000004 	.word	0x24000004
 8003cd8:	24000000 	.word	0x24000000
 8003cdc:	24000008 	.word	0x24000008

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce6:	4bb3      	ldr	r3, [pc, #716]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cee:	2b18      	cmp	r3, #24
 8003cf0:	f200 8155 	bhi.w	8003f9e <HAL_RCC_GetSysClockFreq+0x2be>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003f9f 	.word	0x08003f9f
 8003d04:	08003f9f 	.word	0x08003f9f
 8003d08:	08003f9f 	.word	0x08003f9f
 8003d0c:	08003f9f 	.word	0x08003f9f
 8003d10:	08003f9f 	.word	0x08003f9f
 8003d14:	08003f9f 	.word	0x08003f9f
 8003d18:	08003f9f 	.word	0x08003f9f
 8003d1c:	08003d87 	.word	0x08003d87
 8003d20:	08003f9f 	.word	0x08003f9f
 8003d24:	08003f9f 	.word	0x08003f9f
 8003d28:	08003f9f 	.word	0x08003f9f
 8003d2c:	08003f9f 	.word	0x08003f9f
 8003d30:	08003f9f 	.word	0x08003f9f
 8003d34:	08003f9f 	.word	0x08003f9f
 8003d38:	08003f9f 	.word	0x08003f9f
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003f9f 	.word	0x08003f9f
 8003d44:	08003f9f 	.word	0x08003f9f
 8003d48:	08003f9f 	.word	0x08003f9f
 8003d4c:	08003f9f 	.word	0x08003f9f
 8003d50:	08003f9f 	.word	0x08003f9f
 8003d54:	08003f9f 	.word	0x08003f9f
 8003d58:	08003f9f 	.word	0x08003f9f
 8003d5c:	08003d93 	.word	0x08003d93
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d60:	4b94      	ldr	r3, [pc, #592]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d6c:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	08db      	lsrs	r3, r3, #3
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	4a90      	ldr	r2, [pc, #576]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d7e:	e111      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d80:	4b8d      	ldr	r3, [pc, #564]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d82:	61bb      	str	r3, [r7, #24]
    break;
 8003d84:	e10e      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d86:	4b8d      	ldr	r3, [pc, #564]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d88:	61bb      	str	r3, [r7, #24]
    break;
 8003d8a:	e10b      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d8c:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d8e:	61bb      	str	r3, [r7, #24]
    break;
 8003d90:	e108      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d9c:	4b85      	ldr	r3, [pc, #532]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003da8:	4b82      	ldr	r3, [pc, #520]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003db2:	4b80      	ldr	r3, [pc, #512]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	08db      	lsrs	r3, r3, #3
 8003db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80e1 	beq.w	8003f98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f000 8083 	beq.w	8003ee4 <HAL_RCC_GetSysClockFreq+0x204>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f200 80a1 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x248>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x114>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d056      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003df2:	e099      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df4:	4b6f      	ldr	r3, [pc, #444]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02d      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e00:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	08db      	lsrs	r3, r3, #3
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e5a:	e087      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003fc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9e:	e065      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	e043      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f26:	e021      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	0a5b      	lsrs	r3, r3, #9
 8003f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f76:	3301      	adds	r3, #1
 8003f78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f90:	ee17 3a90 	vmov	r3, s15
 8003f94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f96:	e005      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
    break;
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fa0:	61bb      	str	r3, [r7, #24]
    break;
 8003fa2:	bf00      	nop
  }

  return sysclockfreq;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	; 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	03d09000 	.word	0x03d09000
 8003fbc:	003d0900 	.word	0x003d0900
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	46000000 	.word	0x46000000
 8003fc8:	4c742400 	.word	0x4c742400
 8003fcc:	4a742400 	.word	0x4a742400
 8003fd0:	4af42400 	.word	0x4af42400

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003fda:	f7ff fe81 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490f      	ldr	r1, [pc, #60]	; (8004028 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_GetHCLKFreq+0x54>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <HAL_RCC_GetHCLKFreq+0x58>)
 8004010:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004012:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_RCC_GetHCLKFreq+0x58>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	58024400 	.word	0x58024400
 8004028:	08008b5c 	.word	0x08008b5c
 800402c:	24000004 	.word	0x24000004
 8004030:	24000000 	.word	0x24000000

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004038:	f7ff ffcc 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCC_GetPCLK1Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	58024400 	.word	0x58024400
 800405c:	08008b5c 	.word	0x08008b5c

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004064:	f7ff ffb6 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	58024400 	.word	0x58024400
 8004088:	08008b5c 	.word	0x08008b5c

0800408c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004094:	2300      	movs	r3, #0
 8004096:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004098:	2300      	movs	r3, #0
 800409a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d03f      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b0:	d02a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040b6:	d824      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040bc:	d018      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c2:	d81e      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040cc:	d007      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040ce:	e018      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d0:	4b9f      	ldr	r3, [pc, #636]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	4a9e      	ldr	r2, [pc, #632]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040dc:	e015      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 ff1b 	bl	8005f20 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040ee:	e00c      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3324      	adds	r3, #36	; 0x24
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 ffc4 	bl	8006084 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
      break;
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004110:	4b8f      	ldr	r3, [pc, #572]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	498c      	ldr	r1, [pc, #560]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	650b      	str	r3, [r1, #80]	; 0x50
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d03d      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	2b04      	cmp	r3, #4
 800413a:	d826      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800413c:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004159 	.word	0x08004159
 8004148:	08004167 	.word	0x08004167
 800414c:	08004179 	.word	0x08004179
 8004150:	08004191 	.word	0x08004191
 8004154:	08004191 	.word	0x08004191
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004158:	4b7d      	ldr	r3, [pc, #500]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800415e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004164:	e015      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f001 fed7 	bl	8005f20 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004176:	e00c      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f001 ff80 	bl	8006084 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
      break;
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004192:	7dfb      	ldrb	r3, [r7, #23]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004198:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	f023 0207 	bic.w	r2, r3, #7
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	496a      	ldr	r1, [pc, #424]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	650b      	str	r3, [r1, #80]	; 0x50
 80041aa:	e001      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d04a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041c4:	d031      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80041c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041ca:	d82b      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d0:	d02d      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80041d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d6:	d825      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041d8:	2bc0      	cmp	r3, #192	; 0xc0
 80041da:	d02a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80041dc:	2bc0      	cmp	r3, #192	; 0xc0
 80041de:	d821      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d016      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d81d      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d007      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80041f0:	e018      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80041fe:	e019      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fe8a 	bl	8005f20 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004210:	e010      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3324      	adds	r3, #36	; 0x24
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f001 ff33 	bl	8006084 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004222:	e007      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	75fb      	strb	r3, [r7, #23]
      break;
 8004228:	e004      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800423a:	4b45      	ldr	r3, [pc, #276]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4942      	ldr	r1, [pc, #264]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	650b      	str	r3, [r1, #80]	; 0x50
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	2b00      	cmp	r3, #0
 800425c:	d04f      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004266:	d036      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004268:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800426c:	d830      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004272:	d032      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004278:	d82a      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800427a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800427e:	d02e      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004284:	d824      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d018      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x232>
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d81e      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429a:	d007      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x220>
 800429c:	e018      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429e:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	4a2b      	ldr	r2, [pc, #172]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80042aa:	e019      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fe34 	bl	8005f20 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80042bc:	e010      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3324      	adds	r3, #36	; 0x24
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 fedd 	bl	8006084 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80042ce:	e007      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	e004      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80042de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ea:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	4917      	ldr	r1, [pc, #92]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	650b      	str	r3, [r1, #80]	; 0x50
 80042f8:	e001      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d034      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d01c      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d817      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004316:	2b20      	cmp	r3, #32
 8004318:	d00c      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d813      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004322:	2b10      	cmp	r3, #16
 8004324:	d10f      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004332:	e010      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f001 fdf0 	bl	8005f20 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004344:	e007      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
      break;
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004350:	58024400 	.word	0x58024400
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800435c:	4b9b      	ldr	r3, [pc, #620]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004368:	4998      	ldr	r1, [pc, #608]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800436a:	4313      	orrs	r3, r2
 800436c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d047      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004388:	d030      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800438a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438e:	d82a      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004394:	d02c      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439a:	d824      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a0:	d018      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80043a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a6:	d81e      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80043ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b0:	d007      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80043b2:	e018      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b4:	4b85      	ldr	r3, [pc, #532]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a84      	ldr	r2, [pc, #528]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043c0:	e017      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fda9 	bl	8005f20 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043d2:	e00e      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 fe52 	bl	8006084 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043e4:	e005      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80043f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043f8:	4b74      	ldr	r3, [pc, #464]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80043fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	4971      	ldr	r1, [pc, #452]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004406:	4313      	orrs	r3, r2
 8004408:	650b      	str	r3, [r1, #80]	; 0x50
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d049      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442a:	d828      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800442c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004430:	d02a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004436:	d822      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443c:	d026      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800443e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004442:	d81c      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004448:	d010      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800444a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444e:	d816      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d111      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fd5d 	bl	8005f20 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800446a:	e012      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fe06 	bl	8006084 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800447c:	e009      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
      break;
 8004482:	e006      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004484:	bf00      	nop
 8004486:	e004      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004498:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a4:	4949      	ldr	r1, [pc, #292]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	650b      	str	r3, [r1, #80]	; 0x50
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d053      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80044c6:	d034      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80044c8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80044cc:	d82e      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80044ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d2:	d030      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80044d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d8:	d828      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d02c      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d822      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80044e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ea:	d028      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80044ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044f0:	d81c      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80044f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f6:	d010      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80044f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fc:	d816      	bhi.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01f      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004506:	d111      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2101      	movs	r1, #1
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fd06 	bl	8005f20 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004518:	e014      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3324      	adds	r3, #36	; 0x24
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fdaf 	bl	8006084 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800452a:	e00b      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	e008      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004532:	bf00      	nop
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004536:	bf00      	nop
 8004538:	e004      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800453a:	bf00      	nop
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004558:	491c      	ldr	r1, [pc, #112]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800455a:	4313      	orrs	r3, r2
 800455c:	658b      	str	r3, [r1, #88]	; 0x58
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d031      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004578:	d00e      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800457a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457e:	d814      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004588:	d10f      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004596:	e00c      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fcbe 	bl	8005f20 <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80045b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	4901      	ldr	r1, [pc, #4]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ca:	e003      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80045cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d032      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d81b      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004627 	.word	0x08004627
 80045f4:	08004601 	.word	0x08004601
 80045f8:	0800460f 	.word	0x0800460f
 80045fc:	08004627 	.word	0x08004627
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4bb2      	ldr	r3, [pc, #712]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4ab1      	ldr	r2, [pc, #708]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800460c:	e00c      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f001 fc83 	bl	8005f20 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800461e:	e003      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
      break;
 8004624:	e000      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800462e:	4ba7      	ldr	r3, [pc, #668]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	49a4      	ldr	r1, [pc, #656]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800463c:	4313      	orrs	r3, r2
 800463e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004640:	e001      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8086 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004654:	4b9e      	ldr	r3, [pc, #632]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a9d      	ldr	r2, [pc, #628]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004660:	f7fd f854 	bl	800170c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fd f850 	bl	800170c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d902      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	75fb      	strb	r3, [r7, #23]
        break;
 800467a:	e005      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467c:	4b94      	ldr	r3, [pc, #592]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ef      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d166      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800468e:	4b8f      	ldr	r3, [pc, #572]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004698:	4053      	eors	r3, r2
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d013      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a2:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b87      	ldr	r3, [pc, #540]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a86      	ldr	r2, [pc, #536]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046b8:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a83      	ldr	r2, [pc, #524]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046c4:	4a81      	ldr	r2, [pc, #516]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d115      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd f819 	bl	800170c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046dc:	e00b      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fd f815 	bl	800170c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d902      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	75fb      	strb	r3, [r7, #23]
            break;
 80046f4:	e005      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f6:	4b75      	ldr	r3, [pc, #468]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ed      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d126      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d10d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004718:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004726:	0919      	lsrs	r1, r3, #4
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800472a:	400b      	ands	r3, r1
 800472c:	4967      	ldr	r1, [pc, #412]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004734:	4b65      	ldr	r3, [pc, #404]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	4a64      	ldr	r2, [pc, #400]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800473a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800473e:	6113      	str	r3, [r2, #16]
 8004740:	4b62      	ldr	r3, [pc, #392]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800474a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474e:	495f      	ldr	r1, [pc, #380]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004750:	4313      	orrs	r3, r2
 8004752:	670b      	str	r3, [r1, #112]	; 0x70
 8004754:	e004      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	75bb      	strb	r3, [r7, #22]
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d07f      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	2b28      	cmp	r3, #40	; 0x28
 8004774:	d866      	bhi.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800484b 	.word	0x0800484b
 8004780:	08004845 	.word	0x08004845
 8004784:	08004845 	.word	0x08004845
 8004788:	08004845 	.word	0x08004845
 800478c:	08004845 	.word	0x08004845
 8004790:	08004845 	.word	0x08004845
 8004794:	08004845 	.word	0x08004845
 8004798:	08004845 	.word	0x08004845
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004845 	.word	0x08004845
 80047a4:	08004845 	.word	0x08004845
 80047a8:	08004845 	.word	0x08004845
 80047ac:	08004845 	.word	0x08004845
 80047b0:	08004845 	.word	0x08004845
 80047b4:	08004845 	.word	0x08004845
 80047b8:	08004845 	.word	0x08004845
 80047bc:	08004833 	.word	0x08004833
 80047c0:	08004845 	.word	0x08004845
 80047c4:	08004845 	.word	0x08004845
 80047c8:	08004845 	.word	0x08004845
 80047cc:	08004845 	.word	0x08004845
 80047d0:	08004845 	.word	0x08004845
 80047d4:	08004845 	.word	0x08004845
 80047d8:	08004845 	.word	0x08004845
 80047dc:	0800484b 	.word	0x0800484b
 80047e0:	08004845 	.word	0x08004845
 80047e4:	08004845 	.word	0x08004845
 80047e8:	08004845 	.word	0x08004845
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004845 	.word	0x08004845
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	0800484b 	.word	0x0800484b
 8004800:	08004845 	.word	0x08004845
 8004804:	08004845 	.word	0x08004845
 8004808:	08004845 	.word	0x08004845
 800480c:	08004845 	.word	0x08004845
 8004810:	08004845 	.word	0x08004845
 8004814:	08004845 	.word	0x08004845
 8004818:	08004845 	.word	0x08004845
 800481c:	0800484b 	.word	0x0800484b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f001 fb7a 	bl	8005f20 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004830:	e00c      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3324      	adds	r3, #36	; 0x24
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f001 fc23 	bl	8006084 <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004842:	e003      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
      break;
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800484a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004860:	491a      	ldr	r1, [pc, #104]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004862:	4313      	orrs	r3, r2
 8004864:	654b      	str	r3, [r1, #84]	; 0x54
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d03f      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	2b05      	cmp	r3, #5
 800487e:	d821      	bhi.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048d9 	.word	0x080048d9
 800488c:	080048a1 	.word	0x080048a1
 8004890:	080048b3 	.word	0x080048b3
 8004894:	080048d9 	.word	0x080048d9
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	2101      	movs	r1, #1
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 fb3a 	bl	8005f20 <RCCEx_PLL2_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048b0:	e013      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3324      	adds	r3, #36	; 0x24
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fbe3 	bl	8006084 <RCCEx_PLL3_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048c2:	e00a      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
      break;
 80048c8:	e007      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400
 80048d0:	58024800 	.word	0x58024800
 80048d4:	00ffffcf 	.word	0x00ffffcf
      break;
 80048d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048e0:	4b9f      	ldr	r3, [pc, #636]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f023 0207 	bic.w	r2, r3, #7
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ec:	499c      	ldr	r1, [pc, #624]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	654b      	str	r3, [r1, #84]	; 0x54
 80048f2:	e001      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d039      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800490a:	2b05      	cmp	r3, #5
 800490c:	d820      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004957 	.word	0x08004957
 8004918:	0800492d 	.word	0x0800492d
 800491c:	0800493f 	.word	0x0800493f
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2101      	movs	r1, #1
 8004932:	4618      	mov	r0, r3
 8004934:	f001 faf4 	bl	8005f20 <RCCEx_PLL2_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800493c:	e00c      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f001 fb9d 	bl	8006084 <RCCEx_PLL3_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800494e:	e003      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
      break;
 8004954:	e000      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800495e:	4b80      	ldr	r3, [pc, #512]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496c:	497c      	ldr	r1, [pc, #496]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	658b      	str	r3, [r1, #88]	; 0x58
 8004972:	e001      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d04b      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800498e:	d02e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004994:	d828      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499a:	d02a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d822      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80049a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049a6:	d026      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80049a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ac:	d81c      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80049ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b2:	d010      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80049b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b8:	d816      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c2:	d111      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 faa8 	bl	8005f20 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049d4:	e012      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fb51 	bl	8006084 <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049e6:	e009      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
      break;
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80049ee:	bf00      	nop
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80049fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a02:	4b57      	ldr	r3, [pc, #348]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a10:	4953      	ldr	r1, [pc, #332]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	654b      	str	r3, [r1, #84]	; 0x54
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d04b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a32:	d02e      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004a34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a38:	d828      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	d02a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a44:	d822      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a4a:	d026      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a50:	d81c      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a56:	d010      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5c:	d816      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d111      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fa56 	bl	8005f20 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a78:	e012      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 faff 	bl	8006084 <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a8a:	e009      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a92:	bf00      	nop
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ab4:	492a      	ldr	r1, [pc, #168]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aba:	e001      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d04d      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ad2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ad6:	d02e      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004ad8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004adc:	d828      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	d02a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae8:	d822      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004aea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004aee:	d026      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004af0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004af4:	d81c      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004afa:	d010      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b00:	d816      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01d      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	d111      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f001 fa04 	bl	8005f20 <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b1c:	e012      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3324      	adds	r3, #36	; 0x24
 8004b22:	2102      	movs	r1, #2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 faad 	bl	8006084 <RCCEx_PLL3_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b2e:	e009      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	75fb      	strb	r3, [r7, #23]
      break;
 8004b34:	e006      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b58:	4901      	ldr	r1, [pc, #4]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d10a      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fa7c 	bl	8006084 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b96:	4b8c      	ldr	r3, [pc, #560]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba4:	4988      	ldr	r1, [pc, #544]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d10a      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3324      	adds	r3, #36	; 0x24
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fa5b 	bl	8006084 <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be6:	4978      	ldr	r1, [pc, #480]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d034      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c02:	d01d      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c08:	d817      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d009      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004c14:	e011      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f97f 	bl	8005f20 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c26:	e00c      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fa28 	bl	8006084 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c48:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c56:	495c      	ldr	r1, [pc, #368]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8004c5c:	e001      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d033      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c78:	d01c      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c7e:	d816      	bhi.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c84:	d003      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d007      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004c8c:	e00f      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8e:	4b4e      	ldr	r3, [pc, #312]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a4d      	ldr	r2, [pc, #308]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c9a:	e00c      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f9ee 	bl	8006084 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cbc:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cca:	493f      	ldr	r1, [pc, #252]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	654b      	str	r3, [r1, #84]	; 0x54
 8004cd0:	e001      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d029      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d007      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004cf0:	e00f      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf2:	4b35      	ldr	r3, [pc, #212]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	4a34      	ldr	r2, [pc, #208]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	2102      	movs	r1, #2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f90a 	bl	8005f20 <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
      break;
 8004d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	4927      	ldr	r1, [pc, #156]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d30:	e001      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3324      	adds	r3, #36	; 0x24
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f99b 	bl	8006084 <RCCEx_PLL3_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d035      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d6e:	d017      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d74:	d811      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d80b      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d010      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d98:	e007      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9e:	e004      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004da0:	bf00      	nop
 8004da2:	e002      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004da4:	bf00      	nop
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbe:	4902      	ldr	r1, [pc, #8]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc4:	e004      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de8:	492d      	ldr	r1, [pc, #180]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dfa:	4b29      	ldr	r3, [pc, #164]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	4926      	ldr	r1, [pc, #152]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004e18:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	491e      	ldr	r1, [pc, #120]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e40:	6113      	str	r3, [r2, #16]
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e4c:	4914      	ldr	r1, [pc, #80]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da08      	bge.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e66:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e8c:	7dbb      	ldrb	r3, [r7, #22]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58024400 	.word	0x58024400

08004ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b090      	sub	sp, #64	; 0x40
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb2:	f040 8089 	bne.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004eb6:	4b91      	ldr	r3, [pc, #580]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d87d      	bhi.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ee1 	.word	0x08004ee1
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004fbd 	.word	0x08004fbd
 8004edc:	08004f4d 	.word	0x08004f4d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee0:	4b86      	ldr	r3, [pc, #536]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eec:	d107      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fec2 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004efc:	e3f4      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f02:	e3f1      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f04:	4b7d      	ldr	r3, [pc, #500]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d107      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fc08 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f20:	e3e2      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f26:	e3df      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f28:	4b74      	ldr	r3, [pc, #464]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f34:	d107      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fd4a 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f44:	e3d0      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f4a:	e3cd      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f4c:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f56:	4b69      	ldr	r3, [pc, #420]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f68:	4b64      	ldr	r3, [pc, #400]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	4a63      	ldr	r2, [pc, #396]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7a:	e01e      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f88:	d106      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f90:	d102      	bne.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f92:	4b5c      	ldr	r3, [pc, #368]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f96:	e010      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f98:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fac:	d102      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fae:	4b56      	ldr	r3, [pc, #344]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	e002      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fb8:	e396      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004fba:	e395      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fbc:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc0:	e392      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc6:	e38f      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fce:	f040 809f 	bne.w	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004fd2:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe2:	d04d      	beq.n	8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	f200 8084 	bhi.w	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff2:	d07d      	beq.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff8:	d87d      	bhi.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d02d      	beq.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d877      	bhi.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d012      	beq.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005012:	e070      	b.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005020:	d107      	bne.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fe28 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005030:	e35a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005036:	e357      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005044:	d107      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005046:	f107 0318 	add.w	r3, r7, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fb6e 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005054:	e348      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800505a:	e345      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005068:	d107      	bne.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fcb0 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005078:	e336      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800507e:	e333      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005088:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d10c      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ae:	e01e      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050b0:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050bc:	d106      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c4:	d102      	bne.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ca:	e010      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050d8:	d106      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e0:	d102      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e6:	e002      	b.n	80050ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050ec:	e2fc      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80050ee:	e2fb      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050f4:	e2f8      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050fa:	e2f5      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80050fc:	58024400 	.word	0x58024400
 8005100:	03d09000 	.word	0x03d09000
 8005104:	003d0900 	.word	0x003d0900
 8005108:	007a1200 	.word	0x007a1200
 800510c:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005116:	f040 809c 	bne.w	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800511a:	4b9d      	ldr	r3, [pc, #628]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800511c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005122:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512a:	d054      	beq.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005132:	f200 808b 	bhi.w	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800513c:	f000 8083 	beq.w	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005146:	f200 8081 	bhi.w	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d02f      	beq.n	80051b2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d878      	bhi.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005166:	d012      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005168:	e070      	b.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800516a:	4b89      	ldr	r3, [pc, #548]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005176:	d107      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fd7d 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005186:	e2af      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800518c:	e2ac      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800518e:	4b80      	ldr	r3, [pc, #512]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519a:	d107      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800519c:	f107 0318 	add.w	r3, r7, #24
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fac3 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051aa:	e29d      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b0:	e29a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051b2:	4b77      	ldr	r3, [pc, #476]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051be:	d107      	bne.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051c0:	f107 030c 	add.w	r3, r7, #12
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fc05 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80051ce:	e28b      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051d4:	e288      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80051d6:	4b6e      	ldr	r3, [pc, #440]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051e0:	4b6b      	ldr	r3, [pc, #428]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d10c      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051f2:	4b67      	ldr	r3, [pc, #412]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	4a65      	ldr	r2, [pc, #404]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	e01e      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005206:	4b62      	ldr	r3, [pc, #392]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d106      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521a:	d102      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800521c:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e010      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005222:	4b5b      	ldr	r3, [pc, #364]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522e:	d106      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005236:	d102      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005238:	4b58      	ldr	r3, [pc, #352]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	e002      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005242:	e251      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005244:	e250      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005246:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800524a:	e24d      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005250:	e24a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	f040 80a7 	bne.w	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800525c:	4b4c      	ldr	r3, [pc, #304]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526c:	d055      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005274:	f200 8096 	bhi.w	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800527e:	f000 8084 	beq.w	800538a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005288:	f200 808c 	bhi.w	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d030      	beq.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	f200 8083 	bhi.w	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d012      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80052ac:	e07a      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052ae:	4b38      	ldr	r3, [pc, #224]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ba:	d107      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fcdb 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052ca:	e20d      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d0:	e20a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052d2:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052de:	d107      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e0:	f107 0318 	add.w	r3, r7, #24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fa21 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052ee:	e1fb      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f4:	e1f8      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052f6:	4b26      	ldr	r3, [pc, #152]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005302:	d107      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005304:	f107 030c 	add.w	r3, r7, #12
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fb63 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005312:	e1e9      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005318:	e1e6      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005322:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b04      	cmp	r3, #4
 800532e:	d10c      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	08db      	lsrs	r3, r3, #3
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	e01e      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d106      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800535e:	d102      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	e010      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800537a:	d102      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800537c:	4b07      	ldr	r3, [pc, #28]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	e002      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005386:	e1af      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005388:	e1ae      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800538e:	e1ab      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005390:	58024400 	.word	0x58024400
 8005394:	03d09000 	.word	0x03d09000
 8005398:	003d0900 	.word	0x003d0900
 800539c:	007a1200 	.word	0x007a1200
 80053a0:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053a8:	e19e      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053b0:	d173      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80053b2:	4b9d      	ldr	r3, [pc, #628]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c2:	d02f      	beq.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ca:	d863      	bhi.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d8:	d012      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80053da:	e05b      	b.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053dc:	4b92      	ldr	r3, [pc, #584]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ea:	f107 0318 	add.w	r3, r7, #24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f99c 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f8:	e176      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053fe:	e173      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005400:	4b89      	ldr	r3, [pc, #548]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540c:	d107      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fade 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800541c:	e164      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005422:	e161      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005424:	4b80      	ldr	r3, [pc, #512]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800542c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800542e:	4b7e      	ldr	r3, [pc, #504]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d10c      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005440:	4b79      	ldr	r3, [pc, #484]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	4a78      	ldr	r2, [pc, #480]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005452:	e01e      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005454:	4b74      	ldr	r3, [pc, #464]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d106      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005468:	d102      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800546a:	4b71      	ldr	r3, [pc, #452]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546e:	e010      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005470:	4b6d      	ldr	r3, [pc, #436]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800547c:	d106      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005484:	d102      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005486:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005490:	e12a      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005492:	e129      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005498:	e126      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d133      	bne.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80054a2:	4b61      	ldr	r3, [pc, #388]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b8:	d012      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80054ba:	e023      	b.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054bc:	4b5a      	ldr	r3, [pc, #360]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054c8:	d107      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fbd4 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054d8:	e106      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054de:	e103      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054e0:	4b51      	ldr	r3, [pc, #324]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ec:	d107      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f91a 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80054fc:	e0f4      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005502:	e0f1      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005508:	e0ee      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005510:	f040 809b 	bne.w	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005514:	4b44      	ldr	r3, [pc, #272]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005524:	f000 808b 	beq.w	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800552e:	f200 8089 	bhi.w	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005538:	d06c      	beq.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005540:	f200 8080 	bhi.w	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d056      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005552:	d877      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800555a:	d03b      	beq.n	80055d4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005562:	d86f      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556a:	d021      	beq.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005572:	d867      	bhi.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005580:	d004      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8005582:	e05f      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005584:	f000 f8bc 	bl	8005700 <HAL_RCCEx_GetD3PCLK1Freq>
 8005588:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800558a:	e0ad      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800558c:	4b26      	ldr	r3, [pc, #152]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800559a:	f107 0318 	add.w	r3, r7, #24
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f8c4 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055a8:	e09e      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ae:	e09b      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d107      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa06 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055cc:	e08c      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d2:	e089      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d109      	bne.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80055f2:	e079      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055f8:	e076      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d102      	bne.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800560c:	e06c      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005612:	e069      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005620:	d10a      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005626:	e05f      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005628:	58024400 	.word	0x58024400
 800562c:	03d09000 	.word	0x03d09000
 8005630:	003d0900 	.word	0x003d0900
 8005634:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800563c:	e054      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800563e:	4b2d      	ldr	r3, [pc, #180]	; (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005642:	e051      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005648:	e04e      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005650:	d148      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005652:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005662:	d02a      	beq.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566a:	d838      	bhi.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005678:	d00d      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800567a:	e030      	b.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800567c:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005688:	d102      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800568e:	e02b      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005694:	e028      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005696:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056a2:	d107      	bne.n	80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fae7 	bl	8005c7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056b2:	e019      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b8:	e016      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c6:	d107      	bne.n	80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056c8:	f107 0318 	add.w	r3, r7, #24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f82d 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80056d6:	e007      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e2:	e001      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3740      	adds	r7, #64	; 0x40
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	00bb8000 	.word	0x00bb8000
 80056f8:	58024400 	.word	0x58024400
 80056fc:	007a1200 	.word	0x007a1200

08005700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005704:	f7fe fc66 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4904      	ldr	r1, [pc, #16]	; (8005728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	58024400 	.word	0x58024400
 8005728:	08008b5c 	.word	0x08008b5c

0800572c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005734:	4ba1      	ldr	r3, [pc, #644]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800573e:	4b9f      	ldr	r3, [pc, #636]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	0b1b      	lsrs	r3, r3, #12
 8005744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800574a:	4b9c      	ldr	r3, [pc, #624]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005756:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	08db      	lsrs	r3, r3, #3
 800575c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8111 	beq.w	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b02      	cmp	r3, #2
 800577e:	f000 8083 	beq.w	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b02      	cmp	r3, #2
 8005786:	f200 80a1 	bhi.w	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d056      	beq.n	8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005796:	e099      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02d      	beq.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a4:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	4a84      	ldr	r2, [pc, #528]	; (80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057fe:	e087      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a03 	vldr	s12, [r7, #12]
 8005826:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005842:	e065      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a03 	vldr	s12, [r7, #12]
 800586a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005886:	e043      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b48      	ldr	r3, [pc, #288]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ca:	e021      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800592a:	edd7 6a07 	vldr	s13, [r7, #28]
 800592e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005936:	ee17 2a90 	vmov	r2, s15
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800593e:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005958:	edd7 6a07 	vldr	s13, [r7, #28]
 800595c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005964:	ee17 2a90 	vmov	r2, s15
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	0e1b      	lsrs	r3, r3, #24
 8005972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005986:	edd7 6a07 	vldr	s13, [r7, #28]
 800598a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800598e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005992:	ee17 2a90 	vmov	r2, s15
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	46000000 	.word	0x46000000
 80059c8:	4c742400 	.word	0x4c742400
 80059cc:	4a742400 	.word	0x4a742400
 80059d0:	4af42400 	.word	0x4af42400

080059d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059dc:	4ba1      	ldr	r3, [pc, #644]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059e6:	4b9f      	ldr	r3, [pc, #636]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	0d1b      	lsrs	r3, r3, #20
 80059ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059f2:	4b9c      	ldr	r3, [pc, #624]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059fe:	4b99      	ldr	r3, [pc, #612]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8111 	beq.w	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f000 8083 	beq.w	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	f200 80a1 	bhi.w	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d056      	beq.n	8005aec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a3e:	e099      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a40:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02d      	beq.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a4c:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	08db      	lsrs	r3, r3, #3
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	4a84      	ldr	r2, [pc, #528]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005aa6:	e087      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ace:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	e065      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2e:	e043      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b72:	e021      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	0a5b      	lsrs	r3, r3, #9
 8005bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bde:	ee17 2a90 	vmov	r2, s15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0c:	ee17 2a90 	vmov	r2, s15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3a:	ee17 2a90 	vmov	r2, s15
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
}
 8005c56:	bf00      	nop
 8005c58:	3724      	adds	r7, #36	; 0x24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	03d09000 	.word	0x03d09000
 8005c6c:	46000000 	.word	0x46000000
 8005c70:	4c742400 	.word	0x4c742400
 8005c74:	4a742400 	.word	0x4a742400
 8005c78:	4af42400 	.word	0x4af42400

08005c7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c84:	4ba0      	ldr	r3, [pc, #640]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005c8e:	4b9e      	ldr	r3, [pc, #632]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c9a:	4b9b      	ldr	r3, [pc, #620]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ca4:	4b98      	ldr	r3, [pc, #608]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	08db      	lsrs	r3, r3, #3
 8005caa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8111 	beq.w	8005eea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	f000 8083 	beq.w	8005dd6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	f200 80a1 	bhi.w	8005e1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d056      	beq.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ce4:	e099      	b.n	8005e1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ce6:	4b88      	ldr	r3, [pc, #544]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d02d      	beq.n	8005d4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cf2:	4b85      	ldr	r3, [pc, #532]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	08db      	lsrs	r3, r3, #3
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	4a83      	ldr	r2, [pc, #524]	; (8005f0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005d02:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	ee07 3a90 	vmov	s15, r3
 8005d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1c:	4b7a      	ldr	r3, [pc, #488]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d4c:	e087      	b.n	8005e5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d60:	4b69      	ldr	r3, [pc, #420]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d90:	e065      	b.n	8005e5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da4:	4b58      	ldr	r3, [pc, #352]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd4:	e043      	b.n	8005e5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de8:	4b47      	ldr	r3, [pc, #284]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df0:	ee07 3a90 	vmov	s15, r3
 8005df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e18:	e021      	b.n	8005e5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005f14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2c:	4b36      	ldr	r3, [pc, #216]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005e5e:	4b2a      	ldr	r3, [pc, #168]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	0a5b      	lsrs	r3, r3, #9
 8005e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e68:	ee07 3a90 	vmov	s15, r3
 8005e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e84:	ee17 2a90 	vmov	r2, s15
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb2:	ee17 2a90 	vmov	r2, s15
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005eba:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	0e1b      	lsrs	r3, r3, #24
 8005ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee0:	ee17 2a90 	vmov	r2, s15
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005ee8:	e008      	b.n	8005efc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
}
 8005efc:	bf00      	nop
 8005efe:	3724      	adds	r7, #36	; 0x24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	03d09000 	.word	0x03d09000
 8005f10:	46000000 	.word	0x46000000
 8005f14:	4c742400 	.word	0x4c742400
 8005f18:	4a742400 	.word	0x4a742400
 8005f1c:	4af42400 	.word	0x4af42400

08005f20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f2e:	4b53      	ldr	r3, [pc, #332]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d101      	bne.n	8005f3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e099      	b.n	8006072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f3e:	4b4f      	ldr	r3, [pc, #316]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4e      	ldr	r2, [pc, #312]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4a:	f7fb fbdf 	bl	800170c <HAL_GetTick>
 8005f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f50:	e008      	b.n	8005f64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f52:	f7fb fbdb 	bl	800170c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e086      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1f0      	bne.n	8005f52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f70:	4b42      	ldr	r3, [pc, #264]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	493f      	ldr	r1, [pc, #252]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	628b      	str	r3, [r1, #40]	; 0x28
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	025b      	lsls	r3, r3, #9
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fb4:	4931      	ldr	r1, [pc, #196]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	492d      	ldr	r1, [pc, #180]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fcc:	4b2b      	ldr	r3, [pc, #172]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	f023 0220 	bic.w	r2, r3, #32
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	4928      	ldr	r1, [pc, #160]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	4a26      	ldr	r2, [pc, #152]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fea:	4b24      	ldr	r3, [pc, #144]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fee:	4b24      	ldr	r3, [pc, #144]	; (8006080 <RCCEx_PLL2_Config+0x160>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	69d2      	ldr	r2, [r2, #28]
 8005ff6:	00d2      	lsls	r2, r2, #3
 8005ff8:	4920      	ldr	r1, [pc, #128]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006004:	f043 0310 	orr.w	r3, r3, #16
 8006008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a19      	ldr	r2, [pc, #100]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800601c:	e00f      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d106      	bne.n	8006032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006024:	4b15      	ldr	r3, [pc, #84]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4a14      	ldr	r2, [pc, #80]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 800602a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006030:	e005      	b.n	800603e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	4a11      	ldr	r2, [pc, #68]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800603c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800603e:	4b0f      	ldr	r3, [pc, #60]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a0e      	ldr	r2, [pc, #56]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604a:	f7fb fb5f 	bl	800170c <HAL_GetTick>
 800604e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006050:	e008      	b.n	8006064 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006052:	f7fb fb5b 	bl	800170c <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e006      	b.n	8006072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <RCCEx_PLL2_Config+0x15c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	ffff0007 	.word	0xffff0007

08006084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006092:	4b53      	ldr	r3, [pc, #332]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b03      	cmp	r3, #3
 800609c:	d101      	bne.n	80060a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e099      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060a2:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a4e      	ldr	r2, [pc, #312]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ae:	f7fb fb2d 	bl	800170c <HAL_GetTick>
 80060b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060b4:	e008      	b.n	80060c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060b6:	f7fb fb29 	bl	800170c <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e086      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060c8:	4b45      	ldr	r3, [pc, #276]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060d4:	4b42      	ldr	r3, [pc, #264]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	493f      	ldr	r1, [pc, #252]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	; 0x28
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006118:	4931      	ldr	r1, [pc, #196]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800611e:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	492d      	ldr	r1, [pc, #180]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006130:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	4928      	ldr	r1, [pc, #160]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800613e:	4313      	orrs	r3, r2
 8006140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006142:	4b27      	ldr	r3, [pc, #156]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	4a26      	ldr	r2, [pc, #152]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800614c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800614e:	4b24      	ldr	r3, [pc, #144]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <RCCEx_PLL3_Config+0x160>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	69d2      	ldr	r2, [r2, #28]
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	4920      	ldr	r1, [pc, #128]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800615e:	4313      	orrs	r3, r2
 8006160:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006162:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006174:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	4a19      	ldr	r2, [pc, #100]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800617a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800617e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006180:	e00f      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d106      	bne.n	8006196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800618e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006194:	e005      	b.n	80061a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	4a11      	ldr	r2, [pc, #68]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ae:	f7fb faad 	bl	800170c <HAL_GetTick>
 80061b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061b4:	e008      	b.n	80061c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80061b6:	f7fb faa9 	bl	800170c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	58024400 	.word	0x58024400
 80061e4:	ffff0007 	.word	0xffff0007

080061e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e049      	b.n	800628e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fb f844 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f000 fa1c 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e04c      	b.n	800634a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a26      	ldr	r2, [pc, #152]	; (8006358 <HAL_TIM_Base_Start+0xc0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d01d      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_TIM_Base_Start+0xc4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_TIM_Base_Start+0xc8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <HAL_TIM_Base_Start+0xcc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1e      	ldr	r2, [pc, #120]	; (8006368 <HAL_TIM_Base_Start+0xd0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_TIM_Base_Start+0xd4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIM_Base_Start+0x70>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_TIM_Base_Start+0xd8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d115      	bne.n	8006334 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_TIM_Base_Start+0xdc>)
 8006310:	4013      	ands	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b06      	cmp	r3, #6
 8006318:	d015      	beq.n	8006346 <HAL_TIM_Base_Start+0xae>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d011      	beq.n	8006346 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006332:	e008      	b.n	8006346 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e000      	b.n	8006348 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40001800 	.word	0x40001800
 8006370:	40014000 	.word	0x40014000
 8006374:	00010007 	.word	0x00010007

08006378 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0201 	bic.w	r2, r2, #1
 800638e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	f241 1311 	movw	r3, #4369	; 0x1111
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10f      	bne.n	80063c0 <HAL_TIM_Base_Stop_IT+0x48>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	f240 4344 	movw	r3, #1092	; 0x444
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_Base_Stop_IT+0x48>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d122      	bne.n	8006432 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d11b      	bne.n	8006432 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f06f 0202 	mvn.w	r2, #2
 8006402:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f905 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 800641e:	e005      	b.n	800642c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f8f7 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f908 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d122      	bne.n	8006486 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d11b      	bne.n	8006486 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f06f 0204 	mvn.w	r2, #4
 8006456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8db 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 8006472:	e005      	b.n	8006480 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8cd 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8de 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d122      	bne.n	80064da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d11b      	bne.n	80064da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0208 	mvn.w	r2, #8
 80064aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2204      	movs	r2, #4
 80064b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8b1 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 80064c6:	e005      	b.n	80064d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8a3 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8b4 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d122      	bne.n	800652e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d11b      	bne.n	800652e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0210 	mvn.w	r2, #16
 80064fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2208      	movs	r2, #8
 8006504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f887 	bl	8006628 <HAL_TIM_IC_CaptureCallback>
 800651a:	e005      	b.n	8006528 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f879 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f88a 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d10e      	bne.n	800655a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d107      	bne.n	800655a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0201 	mvn.w	r2, #1
 8006552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fa fbcd 	bl	8000cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d10e      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d107      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800657e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f913 	bl	80067ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006594:	d10e      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a0:	2b80      	cmp	r3, #128	; 0x80
 80065a2:	d107      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f906 	bl	80067c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b40      	cmp	r3, #64	; 0x40
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f838 	bl	8006650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0220 	mvn.w	r2, #32
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8c6 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a40      	ldr	r2, [pc, #256]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a3d      	ldr	r2, [pc, #244]	; (800677c <TIM_Base_SetConfig+0x118>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <TIM_Base_SetConfig+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3a      	ldr	r2, [pc, #232]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_Base_SetConfig+0x114>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01f      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d01b      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2c      	ldr	r2, [pc, #176]	; (800677c <TIM_Base_SetConfig+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d017      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <TIM_Base_SetConfig+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00f      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a29      	ldr	r2, [pc, #164]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a28      	ldr	r2, [pc, #160]	; (800678c <TIM_Base_SetConfig+0x128>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <TIM_Base_SetConfig+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_Base_SetConfig+0x9a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <TIM_Base_SetConfig+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d108      	bne.n	8006710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00f      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a12      	ldr	r2, [pc, #72]	; (8006788 <TIM_Base_SetConfig+0x124>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00b      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a11      	ldr	r2, [pc, #68]	; (800678c <TIM_Base_SetConfig+0x128>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <TIM_Base_SetConfig+0x12c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <TIM_Base_SetConfig+0x130>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d103      	bne.n	8006764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	615a      	str	r2, [r3, #20]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40010400 	.word	0x40010400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e042      	b.n	800686c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fa fd8f 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8c2 	bl	80069a0 <UART_SetConfig>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e022      	b.n	800686c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 ff22 	bl	8007678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 ffa9 	bl	80077bc <UART_CheckIdleState>
 800686a:	4603      	mov	r3, r0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688a:	2b20      	cmp	r3, #32
 800688c:	f040 8083 	bne.w	8006996 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Transmit+0x28>
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e07b      	b.n	8006998 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Transmit+0x3a>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e074      	b.n	8006998 <HAL_UART_Transmit+0x124>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c6:	f7fa ff21 	bl	800170c <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d108      	bne.n	80068f8 <HAL_UART_Transmit+0x84>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e003      	b.n	8006900 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006908:	e02c      	b.n	8006964 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 ff9c 	bl	8007852 <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e039      	b.n	8006998 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	3302      	adds	r3, #2
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	e007      	b.n	8006952 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1cc      	bne.n	800690a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	2140      	movs	r1, #64	; 0x40
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 ff69 	bl	8007852 <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e006      	b.n	8006998 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a4:	b092      	sub	sp, #72	; 0x48
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	431a      	orrs	r2, r3
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4bbe      	ldr	r3, [pc, #760]	; (8006cc8 <UART_SetConfig+0x328>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d8:	430b      	orrs	r3, r1
 80069da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4ab3      	ldr	r2, [pc, #716]	; (8006ccc <UART_SetConfig+0x32c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	4baf      	ldr	r3, [pc, #700]	; (8006cd0 <UART_SetConfig+0x330>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a26:	f023 010f 	bic.w	r1, r3, #15
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4aa6      	ldr	r2, [pc, #664]	; (8006cd4 <UART_SetConfig+0x334>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d177      	bne.n	8006b30 <UART_SetConfig+0x190>
 8006a40:	4ba5      	ldr	r3, [pc, #660]	; (8006cd8 <UART_SetConfig+0x338>)
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a48:	2b28      	cmp	r3, #40	; 0x28
 8006a4a:	d86d      	bhi.n	8006b28 <UART_SetConfig+0x188>
 8006a4c:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <UART_SetConfig+0xb4>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006af9 	.word	0x08006af9
 8006a58:	08006b29 	.word	0x08006b29
 8006a5c:	08006b29 	.word	0x08006b29
 8006a60:	08006b29 	.word	0x08006b29
 8006a64:	08006b29 	.word	0x08006b29
 8006a68:	08006b29 	.word	0x08006b29
 8006a6c:	08006b29 	.word	0x08006b29
 8006a70:	08006b29 	.word	0x08006b29
 8006a74:	08006b01 	.word	0x08006b01
 8006a78:	08006b29 	.word	0x08006b29
 8006a7c:	08006b29 	.word	0x08006b29
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b29 	.word	0x08006b29
 8006a88:	08006b29 	.word	0x08006b29
 8006a8c:	08006b29 	.word	0x08006b29
 8006a90:	08006b29 	.word	0x08006b29
 8006a94:	08006b09 	.word	0x08006b09
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b29 	.word	0x08006b29
 8006aa0:	08006b29 	.word	0x08006b29
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006b29 	.word	0x08006b29
 8006aac:	08006b29 	.word	0x08006b29
 8006ab0:	08006b29 	.word	0x08006b29
 8006ab4:	08006b11 	.word	0x08006b11
 8006ab8:	08006b29 	.word	0x08006b29
 8006abc:	08006b29 	.word	0x08006b29
 8006ac0:	08006b29 	.word	0x08006b29
 8006ac4:	08006b29 	.word	0x08006b29
 8006ac8:	08006b29 	.word	0x08006b29
 8006acc:	08006b29 	.word	0x08006b29
 8006ad0:	08006b29 	.word	0x08006b29
 8006ad4:	08006b19 	.word	0x08006b19
 8006ad8:	08006b29 	.word	0x08006b29
 8006adc:	08006b29 	.word	0x08006b29
 8006ae0:	08006b29 	.word	0x08006b29
 8006ae4:	08006b29 	.word	0x08006b29
 8006ae8:	08006b29 	.word	0x08006b29
 8006aec:	08006b29 	.word	0x08006b29
 8006af0:	08006b29 	.word	0x08006b29
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e326      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e322      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e31e      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e31a      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e316      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b26:	e312      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2e:	e30e      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a69      	ldr	r2, [pc, #420]	; (8006cdc <UART_SetConfig+0x33c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d130      	bne.n	8006b9c <UART_SetConfig+0x1fc>
 8006b3a:	4b67      	ldr	r3, [pc, #412]	; (8006cd8 <UART_SetConfig+0x338>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d826      	bhi.n	8006b94 <UART_SetConfig+0x1f4>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x1ac>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b65 	.word	0x08006b65
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	08006b75 	.word	0x08006b75
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e2f0      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e2ec      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b74:	2308      	movs	r3, #8
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e2e8      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b82:	e2e4      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b84:	2320      	movs	r3, #32
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8a:	e2e0      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b92:	e2dc      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9a:	e2d8      	b.n	800714e <UART_SetConfig+0x7ae>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a4f      	ldr	r2, [pc, #316]	; (8006ce0 <UART_SetConfig+0x340>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d130      	bne.n	8006c08 <UART_SetConfig+0x268>
 8006ba6:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <UART_SetConfig+0x338>)
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	d826      	bhi.n	8006c00 <UART_SetConfig+0x260>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x218>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006be1 	.word	0x08006be1
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006bf1 	.word	0x08006bf1
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd6:	e2ba      	b.n	800714e <UART_SetConfig+0x7ae>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e2b6      	b.n	800714e <UART_SetConfig+0x7ae>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e2b2      	b.n	800714e <UART_SetConfig+0x7ae>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bee:	e2ae      	b.n	800714e <UART_SetConfig+0x7ae>
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e2aa      	b.n	800714e <UART_SetConfig+0x7ae>
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e2a6      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c00:	2380      	movs	r3, #128	; 0x80
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c06:	e2a2      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a35      	ldr	r2, [pc, #212]	; (8006ce4 <UART_SetConfig+0x344>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d130      	bne.n	8006c74 <UART_SetConfig+0x2d4>
 8006c12:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <UART_SetConfig+0x338>)
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d826      	bhi.n	8006c6c <UART_SetConfig+0x2cc>
 8006c1e:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0x284>)
 8006c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c45 	.word	0x08006c45
 8006c2c:	08006c4d 	.word	0x08006c4d
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c5d 	.word	0x08006c5d
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c42:	e284      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e280      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e27c      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e278      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e274      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c64:	2340      	movs	r3, #64	; 0x40
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e270      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e26c      	b.n	800714e <UART_SetConfig+0x7ae>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <UART_SetConfig+0x348>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d142      	bne.n	8006d04 <UART_SetConfig+0x364>
 8006c7e:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <UART_SetConfig+0x338>)
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d838      	bhi.n	8006cfc <UART_SetConfig+0x35c>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0x2f0>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ca9 	.word	0x08006ca9
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006ced 	.word	0x08006ced
 8006ca4:	08006cf5 	.word	0x08006cf5
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e24e      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e24a      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e246      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e242      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cc8:	cfff69f3 	.word	0xcfff69f3
 8006ccc:	58000c00 	.word	0x58000c00
 8006cd0:	11fff4ff 	.word	0x11fff4ff
 8006cd4:	40011000 	.word	0x40011000
 8006cd8:	58024400 	.word	0x58024400
 8006cdc:	40004400 	.word	0x40004400
 8006ce0:	40004800 	.word	0x40004800
 8006ce4:	40004c00 	.word	0x40004c00
 8006ce8:	40005000 	.word	0x40005000
 8006cec:	2320      	movs	r3, #32
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e22c      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e228      	b.n	800714e <UART_SetConfig+0x7ae>
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e224      	b.n	800714e <UART_SetConfig+0x7ae>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4ab1      	ldr	r2, [pc, #708]	; (8006fd0 <UART_SetConfig+0x630>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d176      	bne.n	8006dfc <UART_SetConfig+0x45c>
 8006d0e:	4bb1      	ldr	r3, [pc, #708]	; (8006fd4 <UART_SetConfig+0x634>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d16:	2b28      	cmp	r3, #40	; 0x28
 8006d18:	d86c      	bhi.n	8006df4 <UART_SetConfig+0x454>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x380>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006df5 	.word	0x08006df5
 8006d28:	08006df5 	.word	0x08006df5
 8006d2c:	08006df5 	.word	0x08006df5
 8006d30:	08006df5 	.word	0x08006df5
 8006d34:	08006df5 	.word	0x08006df5
 8006d38:	08006df5 	.word	0x08006df5
 8006d3c:	08006df5 	.word	0x08006df5
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006df5 	.word	0x08006df5
 8006d48:	08006df5 	.word	0x08006df5
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006df5 	.word	0x08006df5
 8006d54:	08006df5 	.word	0x08006df5
 8006d58:	08006df5 	.word	0x08006df5
 8006d5c:	08006df5 	.word	0x08006df5
 8006d60:	08006dd5 	.word	0x08006dd5
 8006d64:	08006df5 	.word	0x08006df5
 8006d68:	08006df5 	.word	0x08006df5
 8006d6c:	08006df5 	.word	0x08006df5
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006df5 	.word	0x08006df5
 8006d78:	08006df5 	.word	0x08006df5
 8006d7c:	08006df5 	.word	0x08006df5
 8006d80:	08006ddd 	.word	0x08006ddd
 8006d84:	08006df5 	.word	0x08006df5
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006df5 	.word	0x08006df5
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08006df5 	.word	0x08006df5
 8006d98:	08006df5 	.word	0x08006df5
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006de5 	.word	0x08006de5
 8006da4:	08006df5 	.word	0x08006df5
 8006da8:	08006df5 	.word	0x08006df5
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006df5 	.word	0x08006df5
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006df5 	.word	0x08006df5
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e1c0      	b.n	800714e <UART_SetConfig+0x7ae>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e1bc      	b.n	800714e <UART_SetConfig+0x7ae>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e1b8      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e1b4      	b.n	800714e <UART_SetConfig+0x7ae>
 8006de4:	2320      	movs	r3, #32
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e1b0      	b.n	800714e <UART_SetConfig+0x7ae>
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e1ac      	b.n	800714e <UART_SetConfig+0x7ae>
 8006df4:	2380      	movs	r3, #128	; 0x80
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfa:	e1a8      	b.n	800714e <UART_SetConfig+0x7ae>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a75      	ldr	r2, [pc, #468]	; (8006fd8 <UART_SetConfig+0x638>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d130      	bne.n	8006e68 <UART_SetConfig+0x4c8>
 8006e06:	4b73      	ldr	r3, [pc, #460]	; (8006fd4 <UART_SetConfig+0x634>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d826      	bhi.n	8006e60 <UART_SetConfig+0x4c0>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x478>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e18a      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e186      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e182      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e17e      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e17a      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5e:	e176      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e172      	b.n	800714e <UART_SetConfig+0x7ae>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5b      	ldr	r2, [pc, #364]	; (8006fdc <UART_SetConfig+0x63c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d130      	bne.n	8006ed4 <UART_SetConfig+0x534>
 8006e72:	4b58      	ldr	r3, [pc, #352]	; (8006fd4 <UART_SetConfig+0x634>)
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d826      	bhi.n	8006ecc <UART_SetConfig+0x52c>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x4e4>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e154      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e150      	b.n	800714e <UART_SetConfig+0x7ae>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e14c      	b.n	800714e <UART_SetConfig+0x7ae>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e148      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e144      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e140      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e13c      	b.n	800714e <UART_SetConfig+0x7ae>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a41      	ldr	r2, [pc, #260]	; (8006fe0 <UART_SetConfig+0x640>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	f040 8082 	bne.w	8006fe4 <UART_SetConfig+0x644>
 8006ee0:	4b3c      	ldr	r3, [pc, #240]	; (8006fd4 <UART_SetConfig+0x634>)
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee8:	2b28      	cmp	r3, #40	; 0x28
 8006eea:	d86d      	bhi.n	8006fc8 <UART_SetConfig+0x628>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x554>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f99 	.word	0x08006f99
 8006ef8:	08006fc9 	.word	0x08006fc9
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006fc9 	.word	0x08006fc9
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fa1 	.word	0x08006fa1
 8006f18:	08006fc9 	.word	0x08006fc9
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006fc9 	.word	0x08006fc9
 8006f54:	08006fb1 	.word	0x08006fb1
 8006f58:	08006fc9 	.word	0x08006fc9
 8006f5c:	08006fc9 	.word	0x08006fc9
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	08006fc9 	.word	0x08006fc9
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fb9 	.word	0x08006fb9
 8006f78:	08006fc9 	.word	0x08006fc9
 8006f7c:	08006fc9 	.word	0x08006fc9
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08006fc9 	.word	0x08006fc9
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
 8006f90:	08006fc9 	.word	0x08006fc9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e0d6      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e0d2      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e0ce      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e0ca      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e0c6      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e0c2      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e0be      	b.n	800714e <UART_SetConfig+0x7ae>
 8006fd0:	40011400 	.word	0x40011400
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	40007800 	.word	0x40007800
 8006fdc:	40007c00 	.word	0x40007c00
 8006fe0:	40011800 	.word	0x40011800
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4aad      	ldr	r2, [pc, #692]	; (80072a0 <UART_SetConfig+0x900>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d176      	bne.n	80070dc <UART_SetConfig+0x73c>
 8006fee:	4bad      	ldr	r3, [pc, #692]	; (80072a4 <UART_SetConfig+0x904>)
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff6:	2b28      	cmp	r3, #40	; 0x28
 8006ff8:	d86c      	bhi.n	80070d4 <UART_SetConfig+0x734>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x660>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070d5 	.word	0x080070d5
 8007008:	080070d5 	.word	0x080070d5
 800700c:	080070d5 	.word	0x080070d5
 8007010:	080070d5 	.word	0x080070d5
 8007014:	080070d5 	.word	0x080070d5
 8007018:	080070d5 	.word	0x080070d5
 800701c:	080070d5 	.word	0x080070d5
 8007020:	080070ad 	.word	0x080070ad
 8007024:	080070d5 	.word	0x080070d5
 8007028:	080070d5 	.word	0x080070d5
 800702c:	080070d5 	.word	0x080070d5
 8007030:	080070d5 	.word	0x080070d5
 8007034:	080070d5 	.word	0x080070d5
 8007038:	080070d5 	.word	0x080070d5
 800703c:	080070d5 	.word	0x080070d5
 8007040:	080070b5 	.word	0x080070b5
 8007044:	080070d5 	.word	0x080070d5
 8007048:	080070d5 	.word	0x080070d5
 800704c:	080070d5 	.word	0x080070d5
 8007050:	080070d5 	.word	0x080070d5
 8007054:	080070d5 	.word	0x080070d5
 8007058:	080070d5 	.word	0x080070d5
 800705c:	080070d5 	.word	0x080070d5
 8007060:	080070bd 	.word	0x080070bd
 8007064:	080070d5 	.word	0x080070d5
 8007068:	080070d5 	.word	0x080070d5
 800706c:	080070d5 	.word	0x080070d5
 8007070:	080070d5 	.word	0x080070d5
 8007074:	080070d5 	.word	0x080070d5
 8007078:	080070d5 	.word	0x080070d5
 800707c:	080070d5 	.word	0x080070d5
 8007080:	080070c5 	.word	0x080070c5
 8007084:	080070d5 	.word	0x080070d5
 8007088:	080070d5 	.word	0x080070d5
 800708c:	080070d5 	.word	0x080070d5
 8007090:	080070d5 	.word	0x080070d5
 8007094:	080070d5 	.word	0x080070d5
 8007098:	080070d5 	.word	0x080070d5
 800709c:	080070d5 	.word	0x080070d5
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e050      	b.n	800714e <UART_SetConfig+0x7ae>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e04c      	b.n	800714e <UART_SetConfig+0x7ae>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e048      	b.n	800714e <UART_SetConfig+0x7ae>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e044      	b.n	800714e <UART_SetConfig+0x7ae>
 80070c4:	2320      	movs	r3, #32
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e040      	b.n	800714e <UART_SetConfig+0x7ae>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e03c      	b.n	800714e <UART_SetConfig+0x7ae>
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070da:	e038      	b.n	800714e <UART_SetConfig+0x7ae>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	; (80072a8 <UART_SetConfig+0x908>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d130      	bne.n	8007148 <UART_SetConfig+0x7a8>
 80070e6:	4b6f      	ldr	r3, [pc, #444]	; (80072a4 <UART_SetConfig+0x904>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d826      	bhi.n	8007140 <UART_SetConfig+0x7a0>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x758>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007111 	.word	0x08007111
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007121 	.word	0x08007121
 8007104:	08007129 	.word	0x08007129
 8007108:	08007131 	.word	0x08007131
 800710c:	08007139 	.word	0x08007139
 8007110:	2302      	movs	r3, #2
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e01a      	b.n	800714e <UART_SetConfig+0x7ae>
 8007118:	2304      	movs	r3, #4
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e016      	b.n	800714e <UART_SetConfig+0x7ae>
 8007120:	2308      	movs	r3, #8
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e012      	b.n	800714e <UART_SetConfig+0x7ae>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e00e      	b.n	800714e <UART_SetConfig+0x7ae>
 8007130:	2320      	movs	r3, #32
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e00a      	b.n	800714e <UART_SetConfig+0x7ae>
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e006      	b.n	800714e <UART_SetConfig+0x7ae>
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e002      	b.n	800714e <UART_SetConfig+0x7ae>
 8007148:	2380      	movs	r3, #128	; 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a55      	ldr	r2, [pc, #340]	; (80072a8 <UART_SetConfig+0x908>)
 8007154:	4293      	cmp	r3, r2
 8007156:	f040 80f8 	bne.w	800734a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800715a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800715e:	2b20      	cmp	r3, #32
 8007160:	dc46      	bgt.n	80071f0 <UART_SetConfig+0x850>
 8007162:	2b02      	cmp	r3, #2
 8007164:	db75      	blt.n	8007252 <UART_SetConfig+0x8b2>
 8007166:	3b02      	subs	r3, #2
 8007168:	2b1e      	cmp	r3, #30
 800716a:	d872      	bhi.n	8007252 <UART_SetConfig+0x8b2>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x7d4>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	080071f7 	.word	0x080071f7
 8007178:	08007253 	.word	0x08007253
 800717c:	080071ff 	.word	0x080071ff
 8007180:	08007253 	.word	0x08007253
 8007184:	08007253 	.word	0x08007253
 8007188:	08007253 	.word	0x08007253
 800718c:	0800720f 	.word	0x0800720f
 8007190:	08007253 	.word	0x08007253
 8007194:	08007253 	.word	0x08007253
 8007198:	08007253 	.word	0x08007253
 800719c:	08007253 	.word	0x08007253
 80071a0:	08007253 	.word	0x08007253
 80071a4:	08007253 	.word	0x08007253
 80071a8:	08007253 	.word	0x08007253
 80071ac:	0800721f 	.word	0x0800721f
 80071b0:	08007253 	.word	0x08007253
 80071b4:	08007253 	.word	0x08007253
 80071b8:	08007253 	.word	0x08007253
 80071bc:	08007253 	.word	0x08007253
 80071c0:	08007253 	.word	0x08007253
 80071c4:	08007253 	.word	0x08007253
 80071c8:	08007253 	.word	0x08007253
 80071cc:	08007253 	.word	0x08007253
 80071d0:	08007253 	.word	0x08007253
 80071d4:	08007253 	.word	0x08007253
 80071d8:	08007253 	.word	0x08007253
 80071dc:	08007253 	.word	0x08007253
 80071e0:	08007253 	.word	0x08007253
 80071e4:	08007253 	.word	0x08007253
 80071e8:	08007253 	.word	0x08007253
 80071ec:	08007245 	.word	0x08007245
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d02a      	beq.n	800724a <UART_SetConfig+0x8aa>
 80071f4:	e02d      	b.n	8007252 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071f6:	f7fe fa83 	bl	8005700 <HAL_RCCEx_GetD3PCLK1Freq>
 80071fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071fc:	e02f      	b.n	800725e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fa92 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800720c:	e027      	b.n	800725e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720e:	f107 0318 	add.w	r3, r7, #24
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fbde 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800721c:	e01f      	b.n	800725e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <UART_SetConfig+0x904>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800722a:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <UART_SetConfig+0x904>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	08db      	lsrs	r3, r3, #3
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	4a1d      	ldr	r2, [pc, #116]	; (80072ac <UART_SetConfig+0x90c>)
 8007236:	fa22 f303 	lsr.w	r3, r2, r3
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800723c:	e00f      	b.n	800725e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <UART_SetConfig+0x90c>)
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007242:	e00c      	b.n	800725e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007244:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <UART_SetConfig+0x910>)
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007248:	e009      	b.n	800725e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007250:	e005      	b.n	800725e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800725c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800725e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 81ee 	beq.w	8007642 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	4a12      	ldr	r2, [pc, #72]	; (80072b4 <UART_SetConfig+0x914>)
 800726c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007270:	461a      	mov	r2, r3
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	fbb3 f3f2 	udiv	r3, r3, r2
 8007278:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	4413      	add	r3, r2
 8007284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007286:	429a      	cmp	r2, r3
 8007288:	d305      	bcc.n	8007296 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	429a      	cmp	r2, r3
 8007294:	d910      	bls.n	80072b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800729c:	e1d1      	b.n	8007642 <UART_SetConfig+0xca2>
 800729e:	bf00      	nop
 80072a0:	40011c00 	.word	0x40011c00
 80072a4:	58024400 	.word	0x58024400
 80072a8:	58000c00 	.word	0x58000c00
 80072ac:	03d09000 	.word	0x03d09000
 80072b0:	003d0900 	.word	0x003d0900
 80072b4:	08008b6c 	.word	0x08008b6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	2200      	movs	r2, #0
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	60fa      	str	r2, [r7, #12]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	4ac0      	ldr	r2, [pc, #768]	; (80075c8 <UART_SetConfig+0xc28>)
 80072c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2200      	movs	r2, #0
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072da:	f7f9 f859 	bl	8000390 <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4610      	mov	r0, r2
 80072e4:	4619      	mov	r1, r3
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	020b      	lsls	r3, r1, #8
 80072f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072f4:	0202      	lsls	r2, r0, #8
 80072f6:	6979      	ldr	r1, [r7, #20]
 80072f8:	6849      	ldr	r1, [r1, #4]
 80072fa:	0849      	lsrs	r1, r1, #1
 80072fc:	2000      	movs	r0, #0
 80072fe:	460c      	mov	r4, r1
 8007300:	4605      	mov	r5, r0
 8007302:	eb12 0804 	adds.w	r8, r2, r4
 8007306:	eb43 0905 	adc.w	r9, r3, r5
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	469a      	mov	sl, r3
 8007312:	4693      	mov	fp, r2
 8007314:	4652      	mov	r2, sl
 8007316:	465b      	mov	r3, fp
 8007318:	4640      	mov	r0, r8
 800731a:	4649      	mov	r1, r9
 800731c:	f7f9 f838 	bl	8000390 <__aeabi_uldivmod>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4613      	mov	r3, r2
 8007326:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732e:	d308      	bcc.n	8007342 <UART_SetConfig+0x9a2>
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007336:	d204      	bcs.n	8007342 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	e17f      	b.n	8007642 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007348:	e17b      	b.n	8007642 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007352:	f040 80bd 	bne.w	80074d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007356:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800735a:	2b20      	cmp	r3, #32
 800735c:	dc48      	bgt.n	80073f0 <UART_SetConfig+0xa50>
 800735e:	2b00      	cmp	r3, #0
 8007360:	db7b      	blt.n	800745a <UART_SetConfig+0xaba>
 8007362:	2b20      	cmp	r3, #32
 8007364:	d879      	bhi.n	800745a <UART_SetConfig+0xaba>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <UART_SetConfig+0x9cc>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	080073f7 	.word	0x080073f7
 8007370:	080073ff 	.word	0x080073ff
 8007374:	0800745b 	.word	0x0800745b
 8007378:	0800745b 	.word	0x0800745b
 800737c:	08007407 	.word	0x08007407
 8007380:	0800745b 	.word	0x0800745b
 8007384:	0800745b 	.word	0x0800745b
 8007388:	0800745b 	.word	0x0800745b
 800738c:	08007417 	.word	0x08007417
 8007390:	0800745b 	.word	0x0800745b
 8007394:	0800745b 	.word	0x0800745b
 8007398:	0800745b 	.word	0x0800745b
 800739c:	0800745b 	.word	0x0800745b
 80073a0:	0800745b 	.word	0x0800745b
 80073a4:	0800745b 	.word	0x0800745b
 80073a8:	0800745b 	.word	0x0800745b
 80073ac:	08007427 	.word	0x08007427
 80073b0:	0800745b 	.word	0x0800745b
 80073b4:	0800745b 	.word	0x0800745b
 80073b8:	0800745b 	.word	0x0800745b
 80073bc:	0800745b 	.word	0x0800745b
 80073c0:	0800745b 	.word	0x0800745b
 80073c4:	0800745b 	.word	0x0800745b
 80073c8:	0800745b 	.word	0x0800745b
 80073cc:	0800745b 	.word	0x0800745b
 80073d0:	0800745b 	.word	0x0800745b
 80073d4:	0800745b 	.word	0x0800745b
 80073d8:	0800745b 	.word	0x0800745b
 80073dc:	0800745b 	.word	0x0800745b
 80073e0:	0800745b 	.word	0x0800745b
 80073e4:	0800745b 	.word	0x0800745b
 80073e8:	0800745b 	.word	0x0800745b
 80073ec:	0800744d 	.word	0x0800744d
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	d02e      	beq.n	8007452 <UART_SetConfig+0xab2>
 80073f4:	e031      	b.n	800745a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f6:	f7fc fe1d 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 80073fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073fc:	e033      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073fe:	f7fc fe2f 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8007402:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007404:	e02f      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe f98e 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007414:	e027      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007416:	f107 0318 	add.w	r3, r7, #24
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fada 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007424:	e01f      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007426:	4b69      	ldr	r3, [pc, #420]	; (80075cc <UART_SetConfig+0xc2c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007432:	4b66      	ldr	r3, [pc, #408]	; (80075cc <UART_SetConfig+0xc2c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	08db      	lsrs	r3, r3, #3
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	4a64      	ldr	r2, [pc, #400]	; (80075d0 <UART_SetConfig+0xc30>)
 800743e:	fa22 f303 	lsr.w	r3, r2, r3
 8007442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007444:	e00f      	b.n	8007466 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007446:	4b62      	ldr	r3, [pc, #392]	; (80075d0 <UART_SetConfig+0xc30>)
 8007448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744a:	e00c      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800744c:	4b61      	ldr	r3, [pc, #388]	; (80075d4 <UART_SetConfig+0xc34>)
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007450:	e009      	b.n	8007466 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007458:	e005      	b.n	8007466 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 80ea 	beq.w	8007642 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	4a55      	ldr	r2, [pc, #340]	; (80075c8 <UART_SetConfig+0xc28>)
 8007474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007478:	461a      	mov	r2, r3
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007480:	005a      	lsls	r2, r3, #1
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	441a      	add	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d916      	bls.n	80074c8 <UART_SetConfig+0xb28>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a0:	d212      	bcs.n	80074c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	085b      	lsrs	r3, r3, #1
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074ba:	4313      	orrs	r3, r2
 80074bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	e0bc      	b.n	8007642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074ce:	e0b8      	b.n	8007642 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	dc4b      	bgt.n	8007570 <UART_SetConfig+0xbd0>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f2c0 8087 	blt.w	80075ec <UART_SetConfig+0xc4c>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	f200 8084 	bhi.w	80075ec <UART_SetConfig+0xc4c>
 80074e4:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0xb4c>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007577 	.word	0x08007577
 80074f0:	0800757f 	.word	0x0800757f
 80074f4:	080075ed 	.word	0x080075ed
 80074f8:	080075ed 	.word	0x080075ed
 80074fc:	08007587 	.word	0x08007587
 8007500:	080075ed 	.word	0x080075ed
 8007504:	080075ed 	.word	0x080075ed
 8007508:	080075ed 	.word	0x080075ed
 800750c:	08007597 	.word	0x08007597
 8007510:	080075ed 	.word	0x080075ed
 8007514:	080075ed 	.word	0x080075ed
 8007518:	080075ed 	.word	0x080075ed
 800751c:	080075ed 	.word	0x080075ed
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075ed 	.word	0x080075ed
 8007528:	080075ed 	.word	0x080075ed
 800752c:	080075a7 	.word	0x080075a7
 8007530:	080075ed 	.word	0x080075ed
 8007534:	080075ed 	.word	0x080075ed
 8007538:	080075ed 	.word	0x080075ed
 800753c:	080075ed 	.word	0x080075ed
 8007540:	080075ed 	.word	0x080075ed
 8007544:	080075ed 	.word	0x080075ed
 8007548:	080075ed 	.word	0x080075ed
 800754c:	080075ed 	.word	0x080075ed
 8007550:	080075ed 	.word	0x080075ed
 8007554:	080075ed 	.word	0x080075ed
 8007558:	080075ed 	.word	0x080075ed
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075df 	.word	0x080075df
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	d037      	beq.n	80075e4 <UART_SetConfig+0xc44>
 8007574:	e03a      	b.n	80075ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007576:	f7fc fd5d 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 800757a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800757c:	e03c      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800757e:	f7fc fd6f 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8007582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007584:	e038      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe f8ce 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007594:	e030      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007596:	f107 0318 	add.w	r3, r7, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fa1a 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075a4:	e028      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <UART_SetConfig+0xc2c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <UART_SetConfig+0xc2c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a04      	ldr	r2, [pc, #16]	; (80075d0 <UART_SetConfig+0xc30>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075c4:	e018      	b.n	80075f8 <UART_SetConfig+0xc58>
 80075c6:	bf00      	nop
 80075c8:	08008b6c 	.word	0x08008b6c
 80075cc:	58024400 	.word	0x58024400
 80075d0:	03d09000 	.word	0x03d09000
 80075d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80075d8:	4b24      	ldr	r3, [pc, #144]	; (800766c <UART_SetConfig+0xccc>)
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075dc:	e00c      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <UART_SetConfig+0xcd0>)
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e2:	e009      	b.n	80075f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075ea:	e005      	b.n	80075f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075f6:	bf00      	nop
    }

    if (pclk != 0U)
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d021      	beq.n	8007642 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <UART_SetConfig+0xcd4>)
 8007604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007608:	461a      	mov	r2, r3
 800760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	085b      	lsrs	r3, r3, #1
 8007616:	441a      	add	r2, r3
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b0f      	cmp	r3, #15
 8007626:	d909      	bls.n	800763c <UART_SetConfig+0xc9c>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762e:	d205      	bcs.n	800763c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	b29a      	uxth	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e002      	b.n	8007642 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2201      	movs	r2, #1
 8007646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2201      	movs	r2, #1
 800764e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800765e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007662:	4618      	mov	r0, r3
 8007664:	3748      	adds	r7, #72	; 0x48
 8007666:	46bd      	mov	sp, r7
 8007668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800766c:	03d09000 	.word	0x03d09000
 8007670:	003d0900 	.word	0x003d0900
 8007674:	08008b6c 	.word	0x08008b6c

08007678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01a      	beq.n	800778e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007776:	d10a      	bne.n	800778e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077cc:	f7f9 ff9e 	bl	800170c <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d10e      	bne.n	80077fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f82f 	bl	8007852 <UART_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e025      	b.n	800784a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b04      	cmp	r3, #4
 800780a:	d10e      	bne.n	800782a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800780c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f819 	bl	8007852 <UART_WaitOnFlagUntilTimeout>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e00f      	b.n	800784a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b09c      	sub	sp, #112	; 0x70
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	603b      	str	r3, [r7, #0]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007862:	e0a9      	b.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800786a:	f000 80a5 	beq.w	80079b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800786e:	f7f9 ff4d 	bl	800170c <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800787a:	429a      	cmp	r2, r3
 800787c:	d302      	bcc.n	8007884 <UART_WaitOnFlagUntilTimeout+0x32>
 800787e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007880:	2b00      	cmp	r3, #0
 8007882:	d140      	bne.n	8007906 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007898:	667b      	str	r3, [r7, #100]	; 0x64
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e6      	bne.n	8007884 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	663b      	str	r3, [r7, #96]	; 0x60
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3308      	adds	r3, #8
 80078d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e5      	bne.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e069      	b.n	80079da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d051      	beq.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800791e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007922:	d149      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800792c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
 800794e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	613b      	str	r3, [r7, #16]
   return(result);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f023 0301 	bic.w	r3, r3, #1
 8007976:	66bb      	str	r3, [r7, #104]	; 0x68
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007980:	623a      	str	r2, [r7, #32]
 8007982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	61bb      	str	r3, [r7, #24]
   return(result);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e5      	bne.n	8007960 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e010      	b.n	80079da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69da      	ldr	r2, [r3, #28]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f43f af46 	beq.w	8007864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3770      	adds	r7, #112	; 0x70
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e027      	b.n	8007a48 <HAL_UARTEx_DisableFifoMode+0x66>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2224      	movs	r2, #36	; 0x24
 8007a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e02d      	b.n	8007ac8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2224      	movs	r2, #36	; 0x24
 8007a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f84f 	bl	8007b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e02d      	b.n	8007b44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2224      	movs	r2, #36	; 0x24
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0201 	bic.w	r2, r2, #1
 8007b0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f811 	bl	8007b4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d108      	bne.n	8007b6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b6c:	e031      	b.n	8007bd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b6e:	2310      	movs	r3, #16
 8007b70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b72:	2310      	movs	r3, #16
 8007b74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	0e5b      	lsrs	r3, r3, #25
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	0f5b      	lsrs	r3, r3, #29
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	7b3a      	ldrb	r2, [r7, #12]
 8007b9a:	4911      	ldr	r1, [pc, #68]	; (8007be0 <UARTEx_SetNbDataToProcess+0x94>)
 8007b9c:	5c8a      	ldrb	r2, [r1, r2]
 8007b9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba2:	7b3a      	ldrb	r2, [r7, #12]
 8007ba4:	490f      	ldr	r1, [pc, #60]	; (8007be4 <UARTEx_SetNbDataToProcess+0x98>)
 8007ba6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	7b7a      	ldrb	r2, [r7, #13]
 8007bb8:	4909      	ldr	r1, [pc, #36]	; (8007be0 <UARTEx_SetNbDataToProcess+0x94>)
 8007bba:	5c8a      	ldrb	r2, [r1, r2]
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc0:	7b7a      	ldrb	r2, [r7, #13]
 8007bc2:	4908      	ldr	r1, [pc, #32]	; (8007be4 <UARTEx_SetNbDataToProcess+0x98>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	08008b84 	.word	0x08008b84
 8007be4:	08008b8c 	.word	0x08008b8c

08007be8 <STEPPER_One_Step>:
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
}

static void STEPPER_One_Step(uint8_t i)
{
 8007be8:	b590      	push	{r4, r7, lr}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8007bf2:	79fa      	ldrb	r2, [r7, #7]
 8007bf4:	4999      	ldr	r1, [pc, #612]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	331a      	adds	r3, #26
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f040 81c4 	bne.w	8007f92 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8007c0a:	79fa      	ldrb	r2, [r7, #7]
 8007c0c:	4993      	ldr	r1, [pc, #588]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	331b      	adds	r3, #27
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f040 8088 	bne.w	8007d32 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007c22:	79fa      	ldrb	r2, [r7, #7]
 8007c24:	498d      	ldr	r1, [pc, #564]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007c26:	4613      	mov	r3, r2
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	79fa      	ldrb	r2, [r7, #7]
 8007c34:	4989      	ldr	r1, [pc, #548]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007c36:	4613      	mov	r3, r2
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3310      	adds	r3, #16
 8007c42:	8819      	ldrh	r1, [r3, #0]
 8007c44:	79fa      	ldrb	r2, [r7, #7]
 8007c46:	4c86      	ldr	r4, [pc, #536]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4423      	add	r3, r4
 8007c52:	330f      	adds	r3, #15
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	4b82      	ldr	r3, [pc, #520]	; (8007e64 <STEPPER_One_Step+0x27c>)
 8007c5a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fb fa10 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	497d      	ldr	r1, [pc, #500]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007c68:	4613      	mov	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	3304      	adds	r3, #4
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	79fa      	ldrb	r2, [r7, #7]
 8007c78:	4978      	ldr	r1, [pc, #480]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	3312      	adds	r3, #18
 8007c86:	8819      	ldrh	r1, [r3, #0]
 8007c88:	79fa      	ldrb	r2, [r7, #7]
 8007c8a:	4c75      	ldr	r4, [pc, #468]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4423      	add	r3, r4
 8007c96:	330f      	adds	r3, #15
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	4a72      	ldr	r2, [pc, #456]	; (8007e64 <STEPPER_One_Step+0x27c>)
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fb f9ee 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007ca8:	79fa      	ldrb	r2, [r7, #7]
 8007caa:	496c      	ldr	r1, [pc, #432]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	79fa      	ldrb	r2, [r7, #7]
 8007cbc:	4967      	ldr	r1, [pc, #412]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3314      	adds	r3, #20
 8007cca:	8819      	ldrh	r1, [r3, #0]
 8007ccc:	79fa      	ldrb	r2, [r7, #7]
 8007cce:	4c64      	ldr	r4, [pc, #400]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4423      	add	r3, r4
 8007cda:	330f      	adds	r3, #15
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	4a61      	ldr	r2, [pc, #388]	; (8007e64 <STEPPER_One_Step+0x27c>)
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7fb f9cc 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007cec:	79fa      	ldrb	r2, [r7, #7]
 8007cee:	495b      	ldr	r1, [pc, #364]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	1a9b      	subs	r3, r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	79fa      	ldrb	r2, [r7, #7]
 8007d00:	4956      	ldr	r1, [pc, #344]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3316      	adds	r3, #22
 8007d0e:	8819      	ldrh	r1, [r3, #0]
 8007d10:	79fa      	ldrb	r2, [r7, #7]
 8007d12:	4c53      	ldr	r4, [pc, #332]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4423      	add	r3, r4
 8007d1e:	330f      	adds	r3, #15
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	4a50      	ldr	r2, [pc, #320]	; (8007e64 <STEPPER_One_Step+0x27c>)
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	78db      	ldrb	r3, [r3, #3]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7fb f9aa 	bl	8003084 <HAL_GPIO_WritePin>
 8007d30:	e12f      	b.n	8007f92 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8007d32:	79fa      	ldrb	r2, [r7, #7]
 8007d34:	4949      	ldr	r1, [pc, #292]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007d36:	4613      	mov	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	331b      	adds	r3, #27
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	f040 8091 	bne.w	8007e6c <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007d4a:	79fa      	ldrb	r2, [r7, #7]
 8007d4c:	4943      	ldr	r1, [pc, #268]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007d4e:	4613      	mov	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	79fa      	ldrb	r2, [r7, #7]
 8007d5c:	493f      	ldr	r1, [pc, #252]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007d5e:	4613      	mov	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	3310      	adds	r3, #16
 8007d6a:	8819      	ldrh	r1, [r3, #0]
 8007d6c:	79fa      	ldrb	r2, [r7, #7]
 8007d6e:	4c3c      	ldr	r4, [pc, #240]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4423      	add	r3, r4
 8007d7a:	330f      	adds	r3, #15
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4b39      	ldr	r3, [pc, #228]	; (8007e68 <STEPPER_One_Step+0x280>)
 8007d82:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7fb f97c 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007d8c:	79fa      	ldrb	r2, [r7, #7]
 8007d8e:	4933      	ldr	r1, [pc, #204]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007d90:	4613      	mov	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	1a9b      	subs	r3, r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	79fa      	ldrb	r2, [r7, #7]
 8007da0:	492e      	ldr	r1, [pc, #184]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	3312      	adds	r3, #18
 8007dae:	8819      	ldrh	r1, [r3, #0]
 8007db0:	79fa      	ldrb	r2, [r7, #7]
 8007db2:	4c2b      	ldr	r4, [pc, #172]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4423      	add	r3, r4
 8007dbe:	330f      	adds	r3, #15
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <STEPPER_One_Step+0x280>)
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f7fb f95a 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007dd0:	79fa      	ldrb	r2, [r7, #7]
 8007dd2:	4922      	ldr	r1, [pc, #136]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3308      	adds	r3, #8
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	79fa      	ldrb	r2, [r7, #7]
 8007de4:	491d      	ldr	r1, [pc, #116]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3314      	adds	r3, #20
 8007df2:	8819      	ldrh	r1, [r3, #0]
 8007df4:	79fa      	ldrb	r2, [r7, #7]
 8007df6:	4c1a      	ldr	r4, [pc, #104]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4423      	add	r3, r4
 8007e02:	330f      	adds	r3, #15
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	4a18      	ldr	r2, [pc, #96]	; (8007e68 <STEPPER_One_Step+0x280>)
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7fb f938 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007e14:	79fa      	ldrb	r2, [r7, #7]
 8007e16:	4911      	ldr	r1, [pc, #68]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007e18:	4613      	mov	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	330c      	adds	r3, #12
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	79fa      	ldrb	r2, [r7, #7]
 8007e28:	490c      	ldr	r1, [pc, #48]	; (8007e5c <STEPPER_One_Step+0x274>)
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	440b      	add	r3, r1
 8007e34:	3316      	adds	r3, #22
 8007e36:	8819      	ldrh	r1, [r3, #0]
 8007e38:	79fa      	ldrb	r2, [r7, #7]
 8007e3a:	4c09      	ldr	r4, [pc, #36]	; (8007e60 <STEPPER_One_Step+0x278>)
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4423      	add	r3, r4
 8007e46:	330f      	adds	r3, #15
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	4a07      	ldr	r2, [pc, #28]	; (8007e68 <STEPPER_One_Step+0x280>)
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	78db      	ldrb	r3, [r3, #3]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7fb f916 	bl	8003084 <HAL_GPIO_WritePin>
 8007e58:	e09b      	b.n	8007f92 <STEPPER_One_Step+0x3aa>
 8007e5a:	bf00      	nop
 8007e5c:	08008b94 	.word	0x08008b94
 8007e60:	24030ff0 	.word	0x24030ff0
 8007e64:	24000010 	.word	0x24000010
 8007e68:	24000020 	.word	0x24000020
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	4988      	ldr	r1, [pc, #544]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	331b      	adds	r3, #27
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	f040 8087 	bne.w	8007f92 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	4982      	ldr	r1, [pc, #520]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	79fa      	ldrb	r2, [r7, #7]
 8007e96:	497e      	ldr	r1, [pc, #504]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007e98:	4613      	mov	r3, r2
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	1a9b      	subs	r3, r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	3310      	adds	r3, #16
 8007ea4:	8819      	ldrh	r1, [r3, #0]
 8007ea6:	79fa      	ldrb	r2, [r7, #7]
 8007ea8:	4c7a      	ldr	r4, [pc, #488]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4423      	add	r3, r4
 8007eb4:	330f      	adds	r3, #15
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b77      	ldr	r3, [pc, #476]	; (8008098 <STEPPER_One_Step+0x4b0>)
 8007ebc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f7fb f8df 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8007ec6:	79fa      	ldrb	r2, [r7, #7]
 8007ec8:	4971      	ldr	r1, [pc, #452]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007eca:	4613      	mov	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	79fa      	ldrb	r2, [r7, #7]
 8007eda:	496d      	ldr	r1, [pc, #436]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007edc:	4613      	mov	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	3312      	adds	r3, #18
 8007ee8:	8819      	ldrh	r1, [r3, #0]
 8007eea:	79fa      	ldrb	r2, [r7, #7]
 8007eec:	4c69      	ldr	r4, [pc, #420]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4423      	add	r3, r4
 8007ef8:	330f      	adds	r3, #15
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	4a66      	ldr	r2, [pc, #408]	; (8008098 <STEPPER_One_Step+0x4b0>)
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	461a      	mov	r2, r3
 8007f06:	f7fb f8bd 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8007f0a:	79fa      	ldrb	r2, [r7, #7]
 8007f0c:	4960      	ldr	r1, [pc, #384]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	3308      	adds	r3, #8
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	79fa      	ldrb	r2, [r7, #7]
 8007f1e:	495c      	ldr	r1, [pc, #368]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3314      	adds	r3, #20
 8007f2c:	8819      	ldrh	r1, [r3, #0]
 8007f2e:	79fa      	ldrb	r2, [r7, #7]
 8007f30:	4c58      	ldr	r4, [pc, #352]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4423      	add	r3, r4
 8007f3c:	330f      	adds	r3, #15
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4a55      	ldr	r2, [pc, #340]	; (8008098 <STEPPER_One_Step+0x4b0>)
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f7fb f89b 	bl	8003084 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8007f4e:	79fa      	ldrb	r2, [r7, #7]
 8007f50:	494f      	ldr	r1, [pc, #316]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	1a9b      	subs	r3, r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	79fa      	ldrb	r2, [r7, #7]
 8007f62:	494b      	ldr	r1, [pc, #300]	; (8008090 <STEPPER_One_Step+0x4a8>)
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3316      	adds	r3, #22
 8007f70:	8819      	ldrh	r1, [r3, #0]
 8007f72:	79fa      	ldrb	r2, [r7, #7]
 8007f74:	4c47      	ldr	r4, [pc, #284]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4423      	add	r3, r4
 8007f80:	330f      	adds	r3, #15
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	4a44      	ldr	r2, [pc, #272]	; (8008098 <STEPPER_One_Step+0x4b0>)
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	78db      	ldrb	r3, [r3, #3]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f7fb f879 	bl	8003084 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8007f92:	79fa      	ldrb	r2, [r7, #7]
 8007f94:	493f      	ldr	r1, [pc, #252]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	3311      	adds	r3, #17
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d132      	bne.n	800800e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	493a      	ldr	r1, [pc, #232]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	330f      	adds	r3, #15
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d112      	bne.n	8007fe4 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 8007fbe:	79f9      	ldrb	r1, [r7, #7]
 8007fc0:	79fa      	ldrb	r2, [r7, #7]
 8007fc2:	4834      	ldr	r0, [pc, #208]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4403      	add	r3, r0
 8007fce:	3310      	adds	r3, #16
 8007fd0:	7818      	ldrb	r0, [r3, #0]
 8007fd2:	4930      	ldr	r1, [pc, #192]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	330f      	adds	r3, #15
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8007fe4:	79fa      	ldrb	r2, [r7, #7]
 8007fe6:	492b      	ldr	r1, [pc, #172]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	330f      	adds	r3, #15
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b2d8      	uxtb	r0, r3
 8007ffa:	4926      	ldr	r1, [pc, #152]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	330f      	adds	r3, #15
 8008008:	4602      	mov	r2, r0
 800800a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800800c:	e03c      	b.n	8008088 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800800e:	79fa      	ldrb	r2, [r7, #7]
 8008010:	4920      	ldr	r1, [pc, #128]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	3311      	adds	r3, #17
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d131      	bne.n	8008088 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	491b      	ldr	r1, [pc, #108]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	330f      	adds	r3, #15
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	b2d8      	uxtb	r0, r3
 800803a:	4916      	ldr	r1, [pc, #88]	; (8008094 <STEPPER_One_Step+0x4ac>)
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	330f      	adds	r3, #15
 8008048:	4602      	mov	r2, r0
 800804a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 800804c:	79fa      	ldrb	r2, [r7, #7]
 800804e:	4911      	ldr	r1, [pc, #68]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	330f      	adds	r3, #15
 800805c:	7819      	ldrb	r1, [r3, #0]
 800805e:	79fa      	ldrb	r2, [r7, #7]
 8008060:	480c      	ldr	r0, [pc, #48]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4403      	add	r3, r0
 800806c:	3310      	adds	r3, #16
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	4299      	cmp	r1, r3
 8008072:	d109      	bne.n	8008088 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 8008074:	79fa      	ldrb	r2, [r7, #7]
 8008076:	4907      	ldr	r1, [pc, #28]	; (8008094 <STEPPER_One_Step+0x4ac>)
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	330f      	adds	r3, #15
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}
 8008090:	08008b94 	.word	0x08008b94
 8008094:	24030ff0 	.word	0x24030ff0
 8008098:	24000030 	.word	0x24000030

0800809c <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	; (8008180 <STEPPER_TMR_OVF_ISR+0xe4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d162      	bne.n	8008178 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
 80080b6:	e05c      	b.n	8008172 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80080b8:	7bfa      	ldrb	r2, [r7, #15]
 80080ba:	4932      	ldr	r1, [pc, #200]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	3304      	adds	r3, #4
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	7bfa      	ldrb	r2, [r7, #15]
 80080cc:	482d      	ldr	r0, [pc, #180]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4403      	add	r3, r0
 80080d8:	3308      	adds	r3, #8
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4299      	cmp	r1, r3
 80080de:	d333      	bcc.n	8008148 <STEPPER_TMR_OVF_ISR+0xac>
 80080e0:	7bfa      	ldrb	r2, [r7, #15]
 80080e2:	4928      	ldr	r1, [pc, #160]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	330e      	adds	r3, #14
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d028      	beq.n	8008148 <STEPPER_TMR_OVF_ISR+0xac>
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	4922      	ldr	r1, [pc, #136]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01e      	beq.n	8008148 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fd6b 	bl	8007be8 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8008112:	7bfa      	ldrb	r2, [r7, #15]
 8008114:	491b      	ldr	r1, [pc, #108]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	1e59      	subs	r1, r3, #1
 8008124:	4817      	ldr	r0, [pc, #92]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4403      	add	r3, r0
 8008130:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8008132:	7bfa      	ldrb	r2, [r7, #15]
 8008134:	4913      	ldr	r1, [pc, #76]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	440b      	add	r3, r1
 8008140:	3304      	adds	r3, #4
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e011      	b.n	800816c <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8008148:	7bfa      	ldrb	r2, [r7, #15]
 800814a:	490e      	ldr	r1, [pc, #56]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	3304      	adds	r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	4809      	ldr	r0, [pc, #36]	; (8008184 <STEPPER_TMR_OVF_ISR+0xe8>)
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4403      	add	r3, r0
 8008168:	3304      	adds	r3, #4
 800816a:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	3301      	adds	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d09f      	beq.n	80080b8 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40014800 	.word	0x40014800
 8008184:	24030ff0 	.word	0x24030ff0

08008188 <__errno>:
 8008188:	4b01      	ldr	r3, [pc, #4]	; (8008190 <__errno+0x8>)
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	24000050 	.word	0x24000050

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4d0d      	ldr	r5, [pc, #52]	; (80081cc <__libc_init_array+0x38>)
 8008198:	4c0d      	ldr	r4, [pc, #52]	; (80081d0 <__libc_init_array+0x3c>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	2600      	movs	r6, #0
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	4d0b      	ldr	r5, [pc, #44]	; (80081d4 <__libc_init_array+0x40>)
 80081a6:	4c0c      	ldr	r4, [pc, #48]	; (80081d8 <__libc_init_array+0x44>)
 80081a8:	f000 fc8e 	bl	8008ac8 <_init>
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	2600      	movs	r6, #0
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	08008bec 	.word	0x08008bec
 80081d0:	08008bec 	.word	0x08008bec
 80081d4:	08008bec 	.word	0x08008bec
 80081d8:	08008bf0 	.word	0x08008bf0

080081dc <memset>:
 80081dc:	4402      	add	r2, r0
 80081de:	4603      	mov	r3, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d100      	bne.n	80081e6 <memset+0xa>
 80081e4:	4770      	bx	lr
 80081e6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ea:	e7f9      	b.n	80081e0 <memset+0x4>

080081ec <siprintf>:
 80081ec:	b40e      	push	{r1, r2, r3}
 80081ee:	b500      	push	{lr}
 80081f0:	b09c      	sub	sp, #112	; 0x70
 80081f2:	ab1d      	add	r3, sp, #116	; 0x74
 80081f4:	9002      	str	r0, [sp, #8]
 80081f6:	9006      	str	r0, [sp, #24]
 80081f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081fc:	4809      	ldr	r0, [pc, #36]	; (8008224 <siprintf+0x38>)
 80081fe:	9107      	str	r1, [sp, #28]
 8008200:	9104      	str	r1, [sp, #16]
 8008202:	4909      	ldr	r1, [pc, #36]	; (8008228 <siprintf+0x3c>)
 8008204:	f853 2b04 	ldr.w	r2, [r3], #4
 8008208:	9105      	str	r1, [sp, #20]
 800820a:	6800      	ldr	r0, [r0, #0]
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	a902      	add	r1, sp, #8
 8008210:	f000 f868 	bl	80082e4 <_svfiprintf_r>
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	b01c      	add	sp, #112	; 0x70
 800821c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008220:	b003      	add	sp, #12
 8008222:	4770      	bx	lr
 8008224:	24000050 	.word	0x24000050
 8008228:	ffff0208 	.word	0xffff0208

0800822c <__ssputs_r>:
 800822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	688e      	ldr	r6, [r1, #8]
 8008232:	429e      	cmp	r6, r3
 8008234:	4682      	mov	sl, r0
 8008236:	460c      	mov	r4, r1
 8008238:	4690      	mov	r8, r2
 800823a:	461f      	mov	r7, r3
 800823c:	d838      	bhi.n	80082b0 <__ssputs_r+0x84>
 800823e:	898a      	ldrh	r2, [r1, #12]
 8008240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008244:	d032      	beq.n	80082ac <__ssputs_r+0x80>
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	6909      	ldr	r1, [r1, #16]
 800824a:	eba5 0901 	sub.w	r9, r5, r1
 800824e:	6965      	ldr	r5, [r4, #20]
 8008250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008258:	3301      	adds	r3, #1
 800825a:	444b      	add	r3, r9
 800825c:	106d      	asrs	r5, r5, #1
 800825e:	429d      	cmp	r5, r3
 8008260:	bf38      	it	cc
 8008262:	461d      	movcc	r5, r3
 8008264:	0553      	lsls	r3, r2, #21
 8008266:	d531      	bpl.n	80082cc <__ssputs_r+0xa0>
 8008268:	4629      	mov	r1, r5
 800826a:	f000 fb63 	bl	8008934 <_malloc_r>
 800826e:	4606      	mov	r6, r0
 8008270:	b950      	cbnz	r0, 8008288 <__ssputs_r+0x5c>
 8008272:	230c      	movs	r3, #12
 8008274:	f8ca 3000 	str.w	r3, [sl]
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008288:	6921      	ldr	r1, [r4, #16]
 800828a:	464a      	mov	r2, r9
 800828c:	f000 fabe 	bl	800880c <memcpy>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	6126      	str	r6, [r4, #16]
 800829e:	6165      	str	r5, [r4, #20]
 80082a0:	444e      	add	r6, r9
 80082a2:	eba5 0509 	sub.w	r5, r5, r9
 80082a6:	6026      	str	r6, [r4, #0]
 80082a8:	60a5      	str	r5, [r4, #8]
 80082aa:	463e      	mov	r6, r7
 80082ac:	42be      	cmp	r6, r7
 80082ae:	d900      	bls.n	80082b2 <__ssputs_r+0x86>
 80082b0:	463e      	mov	r6, r7
 80082b2:	6820      	ldr	r0, [r4, #0]
 80082b4:	4632      	mov	r2, r6
 80082b6:	4641      	mov	r1, r8
 80082b8:	f000 fab6 	bl	8008828 <memmove>
 80082bc:	68a3      	ldr	r3, [r4, #8]
 80082be:	1b9b      	subs	r3, r3, r6
 80082c0:	60a3      	str	r3, [r4, #8]
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4433      	add	r3, r6
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7db      	b.n	8008284 <__ssputs_r+0x58>
 80082cc:	462a      	mov	r2, r5
 80082ce:	f000 fba5 	bl	8008a1c <_realloc_r>
 80082d2:	4606      	mov	r6, r0
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d1e1      	bne.n	800829c <__ssputs_r+0x70>
 80082d8:	6921      	ldr	r1, [r4, #16]
 80082da:	4650      	mov	r0, sl
 80082dc:	f000 fabe 	bl	800885c <_free_r>
 80082e0:	e7c7      	b.n	8008272 <__ssputs_r+0x46>
	...

080082e4 <_svfiprintf_r>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	4698      	mov	r8, r3
 80082ea:	898b      	ldrh	r3, [r1, #12]
 80082ec:	061b      	lsls	r3, r3, #24
 80082ee:	b09d      	sub	sp, #116	; 0x74
 80082f0:	4607      	mov	r7, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	4614      	mov	r4, r2
 80082f6:	d50e      	bpl.n	8008316 <_svfiprintf_r+0x32>
 80082f8:	690b      	ldr	r3, [r1, #16]
 80082fa:	b963      	cbnz	r3, 8008316 <_svfiprintf_r+0x32>
 80082fc:	2140      	movs	r1, #64	; 0x40
 80082fe:	f000 fb19 	bl	8008934 <_malloc_r>
 8008302:	6028      	str	r0, [r5, #0]
 8008304:	6128      	str	r0, [r5, #16]
 8008306:	b920      	cbnz	r0, 8008312 <_svfiprintf_r+0x2e>
 8008308:	230c      	movs	r3, #12
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008310:	e0d1      	b.n	80084b6 <_svfiprintf_r+0x1d2>
 8008312:	2340      	movs	r3, #64	; 0x40
 8008314:	616b      	str	r3, [r5, #20]
 8008316:	2300      	movs	r3, #0
 8008318:	9309      	str	r3, [sp, #36]	; 0x24
 800831a:	2320      	movs	r3, #32
 800831c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008320:	f8cd 800c 	str.w	r8, [sp, #12]
 8008324:	2330      	movs	r3, #48	; 0x30
 8008326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084d0 <_svfiprintf_r+0x1ec>
 800832a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800832e:	f04f 0901 	mov.w	r9, #1
 8008332:	4623      	mov	r3, r4
 8008334:	469a      	mov	sl, r3
 8008336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833a:	b10a      	cbz	r2, 8008340 <_svfiprintf_r+0x5c>
 800833c:	2a25      	cmp	r2, #37	; 0x25
 800833e:	d1f9      	bne.n	8008334 <_svfiprintf_r+0x50>
 8008340:	ebba 0b04 	subs.w	fp, sl, r4
 8008344:	d00b      	beq.n	800835e <_svfiprintf_r+0x7a>
 8008346:	465b      	mov	r3, fp
 8008348:	4622      	mov	r2, r4
 800834a:	4629      	mov	r1, r5
 800834c:	4638      	mov	r0, r7
 800834e:	f7ff ff6d 	bl	800822c <__ssputs_r>
 8008352:	3001      	adds	r0, #1
 8008354:	f000 80aa 	beq.w	80084ac <_svfiprintf_r+0x1c8>
 8008358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835a:	445a      	add	r2, fp
 800835c:	9209      	str	r2, [sp, #36]	; 0x24
 800835e:	f89a 3000 	ldrb.w	r3, [sl]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 80a2 	beq.w	80084ac <_svfiprintf_r+0x1c8>
 8008368:	2300      	movs	r3, #0
 800836a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008372:	f10a 0a01 	add.w	sl, sl, #1
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	9307      	str	r3, [sp, #28]
 800837a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800837e:	931a      	str	r3, [sp, #104]	; 0x68
 8008380:	4654      	mov	r4, sl
 8008382:	2205      	movs	r2, #5
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	4851      	ldr	r0, [pc, #324]	; (80084d0 <_svfiprintf_r+0x1ec>)
 800838a:	f7f7 ffb1 	bl	80002f0 <memchr>
 800838e:	9a04      	ldr	r2, [sp, #16]
 8008390:	b9d8      	cbnz	r0, 80083ca <_svfiprintf_r+0xe6>
 8008392:	06d0      	lsls	r0, r2, #27
 8008394:	bf44      	itt	mi
 8008396:	2320      	movmi	r3, #32
 8008398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800839c:	0711      	lsls	r1, r2, #28
 800839e:	bf44      	itt	mi
 80083a0:	232b      	movmi	r3, #43	; 0x2b
 80083a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a6:	f89a 3000 	ldrb.w	r3, [sl]
 80083aa:	2b2a      	cmp	r3, #42	; 0x2a
 80083ac:	d015      	beq.n	80083da <_svfiprintf_r+0xf6>
 80083ae:	9a07      	ldr	r2, [sp, #28]
 80083b0:	4654      	mov	r4, sl
 80083b2:	2000      	movs	r0, #0
 80083b4:	f04f 0c0a 	mov.w	ip, #10
 80083b8:	4621      	mov	r1, r4
 80083ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083be:	3b30      	subs	r3, #48	; 0x30
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	d94e      	bls.n	8008462 <_svfiprintf_r+0x17e>
 80083c4:	b1b0      	cbz	r0, 80083f4 <_svfiprintf_r+0x110>
 80083c6:	9207      	str	r2, [sp, #28]
 80083c8:	e014      	b.n	80083f4 <_svfiprintf_r+0x110>
 80083ca:	eba0 0308 	sub.w	r3, r0, r8
 80083ce:	fa09 f303 	lsl.w	r3, r9, r3
 80083d2:	4313      	orrs	r3, r2
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	46a2      	mov	sl, r4
 80083d8:	e7d2      	b.n	8008380 <_svfiprintf_r+0x9c>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	1d19      	adds	r1, r3, #4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	9103      	str	r1, [sp, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bfbb      	ittet	lt
 80083e6:	425b      	neglt	r3, r3
 80083e8:	f042 0202 	orrlt.w	r2, r2, #2
 80083ec:	9307      	strge	r3, [sp, #28]
 80083ee:	9307      	strlt	r3, [sp, #28]
 80083f0:	bfb8      	it	lt
 80083f2:	9204      	strlt	r2, [sp, #16]
 80083f4:	7823      	ldrb	r3, [r4, #0]
 80083f6:	2b2e      	cmp	r3, #46	; 0x2e
 80083f8:	d10c      	bne.n	8008414 <_svfiprintf_r+0x130>
 80083fa:	7863      	ldrb	r3, [r4, #1]
 80083fc:	2b2a      	cmp	r3, #42	; 0x2a
 80083fe:	d135      	bne.n	800846c <_svfiprintf_r+0x188>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	1d1a      	adds	r2, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	9203      	str	r2, [sp, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfb8      	it	lt
 800840c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008410:	3402      	adds	r4, #2
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084e0 <_svfiprintf_r+0x1fc>
 8008418:	7821      	ldrb	r1, [r4, #0]
 800841a:	2203      	movs	r2, #3
 800841c:	4650      	mov	r0, sl
 800841e:	f7f7 ff67 	bl	80002f0 <memchr>
 8008422:	b140      	cbz	r0, 8008436 <_svfiprintf_r+0x152>
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	eba0 000a 	sub.w	r0, r0, sl
 800842a:	fa03 f000 	lsl.w	r0, r3, r0
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	4303      	orrs	r3, r0
 8008432:	3401      	adds	r4, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800843a:	4826      	ldr	r0, [pc, #152]	; (80084d4 <_svfiprintf_r+0x1f0>)
 800843c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008440:	2206      	movs	r2, #6
 8008442:	f7f7 ff55 	bl	80002f0 <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d038      	beq.n	80084bc <_svfiprintf_r+0x1d8>
 800844a:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <_svfiprintf_r+0x1f4>)
 800844c:	bb1b      	cbnz	r3, 8008496 <_svfiprintf_r+0x1b2>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	3307      	adds	r3, #7
 8008452:	f023 0307 	bic.w	r3, r3, #7
 8008456:	3308      	adds	r3, #8
 8008458:	9303      	str	r3, [sp, #12]
 800845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845c:	4433      	add	r3, r6
 800845e:	9309      	str	r3, [sp, #36]	; 0x24
 8008460:	e767      	b.n	8008332 <_svfiprintf_r+0x4e>
 8008462:	fb0c 3202 	mla	r2, ip, r2, r3
 8008466:	460c      	mov	r4, r1
 8008468:	2001      	movs	r0, #1
 800846a:	e7a5      	b.n	80083b8 <_svfiprintf_r+0xd4>
 800846c:	2300      	movs	r3, #0
 800846e:	3401      	adds	r4, #1
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	4619      	mov	r1, r3
 8008474:	f04f 0c0a 	mov.w	ip, #10
 8008478:	4620      	mov	r0, r4
 800847a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800847e:	3a30      	subs	r2, #48	; 0x30
 8008480:	2a09      	cmp	r2, #9
 8008482:	d903      	bls.n	800848c <_svfiprintf_r+0x1a8>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c5      	beq.n	8008414 <_svfiprintf_r+0x130>
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	e7c3      	b.n	8008414 <_svfiprintf_r+0x130>
 800848c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008490:	4604      	mov	r4, r0
 8008492:	2301      	movs	r3, #1
 8008494:	e7f0      	b.n	8008478 <_svfiprintf_r+0x194>
 8008496:	ab03      	add	r3, sp, #12
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	462a      	mov	r2, r5
 800849c:	4b0f      	ldr	r3, [pc, #60]	; (80084dc <_svfiprintf_r+0x1f8>)
 800849e:	a904      	add	r1, sp, #16
 80084a0:	4638      	mov	r0, r7
 80084a2:	f3af 8000 	nop.w
 80084a6:	1c42      	adds	r2, r0, #1
 80084a8:	4606      	mov	r6, r0
 80084aa:	d1d6      	bne.n	800845a <_svfiprintf_r+0x176>
 80084ac:	89ab      	ldrh	r3, [r5, #12]
 80084ae:	065b      	lsls	r3, r3, #25
 80084b0:	f53f af2c 	bmi.w	800830c <_svfiprintf_r+0x28>
 80084b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b6:	b01d      	add	sp, #116	; 0x74
 80084b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084bc:	ab03      	add	r3, sp, #12
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	462a      	mov	r2, r5
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <_svfiprintf_r+0x1f8>)
 80084c4:	a904      	add	r1, sp, #16
 80084c6:	4638      	mov	r0, r7
 80084c8:	f000 f87a 	bl	80085c0 <_printf_i>
 80084cc:	e7eb      	b.n	80084a6 <_svfiprintf_r+0x1c2>
 80084ce:	bf00      	nop
 80084d0:	08008bb0 	.word	0x08008bb0
 80084d4:	08008bba 	.word	0x08008bba
 80084d8:	00000000 	.word	0x00000000
 80084dc:	0800822d 	.word	0x0800822d
 80084e0:	08008bb6 	.word	0x08008bb6

080084e4 <_printf_common>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	4616      	mov	r6, r2
 80084ea:	4699      	mov	r9, r3
 80084ec:	688a      	ldr	r2, [r1, #8]
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	bfb8      	it	lt
 80084f8:	4613      	movlt	r3, r2
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008500:	4607      	mov	r7, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b10a      	cbz	r2, 800850a <_printf_common+0x26>
 8008506:	3301      	adds	r3, #1
 8008508:	6033      	str	r3, [r6, #0]
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	0699      	lsls	r1, r3, #26
 800850e:	bf42      	ittt	mi
 8008510:	6833      	ldrmi	r3, [r6, #0]
 8008512:	3302      	addmi	r3, #2
 8008514:	6033      	strmi	r3, [r6, #0]
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	f015 0506 	ands.w	r5, r5, #6
 800851c:	d106      	bne.n	800852c <_printf_common+0x48>
 800851e:	f104 0a19 	add.w	sl, r4, #25
 8008522:	68e3      	ldr	r3, [r4, #12]
 8008524:	6832      	ldr	r2, [r6, #0]
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	42ab      	cmp	r3, r5
 800852a:	dc26      	bgt.n	800857a <_printf_common+0x96>
 800852c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008530:	1e13      	subs	r3, r2, #0
 8008532:	6822      	ldr	r2, [r4, #0]
 8008534:	bf18      	it	ne
 8008536:	2301      	movne	r3, #1
 8008538:	0692      	lsls	r2, r2, #26
 800853a:	d42b      	bmi.n	8008594 <_printf_common+0xb0>
 800853c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008540:	4649      	mov	r1, r9
 8008542:	4638      	mov	r0, r7
 8008544:	47c0      	blx	r8
 8008546:	3001      	adds	r0, #1
 8008548:	d01e      	beq.n	8008588 <_printf_common+0xa4>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	68e5      	ldr	r5, [r4, #12]
 800854e:	6832      	ldr	r2, [r6, #0]
 8008550:	f003 0306 	and.w	r3, r3, #6
 8008554:	2b04      	cmp	r3, #4
 8008556:	bf08      	it	eq
 8008558:	1aad      	subeq	r5, r5, r2
 800855a:	68a3      	ldr	r3, [r4, #8]
 800855c:	6922      	ldr	r2, [r4, #16]
 800855e:	bf0c      	ite	eq
 8008560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008564:	2500      	movne	r5, #0
 8008566:	4293      	cmp	r3, r2
 8008568:	bfc4      	itt	gt
 800856a:	1a9b      	subgt	r3, r3, r2
 800856c:	18ed      	addgt	r5, r5, r3
 800856e:	2600      	movs	r6, #0
 8008570:	341a      	adds	r4, #26
 8008572:	42b5      	cmp	r5, r6
 8008574:	d11a      	bne.n	80085ac <_printf_common+0xc8>
 8008576:	2000      	movs	r0, #0
 8008578:	e008      	b.n	800858c <_printf_common+0xa8>
 800857a:	2301      	movs	r3, #1
 800857c:	4652      	mov	r2, sl
 800857e:	4649      	mov	r1, r9
 8008580:	4638      	mov	r0, r7
 8008582:	47c0      	blx	r8
 8008584:	3001      	adds	r0, #1
 8008586:	d103      	bne.n	8008590 <_printf_common+0xac>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800858c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008590:	3501      	adds	r5, #1
 8008592:	e7c6      	b.n	8008522 <_printf_common+0x3e>
 8008594:	18e1      	adds	r1, r4, r3
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	2030      	movs	r0, #48	; 0x30
 800859a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800859e:	4422      	add	r2, r4
 80085a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085a8:	3302      	adds	r3, #2
 80085aa:	e7c7      	b.n	800853c <_printf_common+0x58>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4622      	mov	r2, r4
 80085b0:	4649      	mov	r1, r9
 80085b2:	4638      	mov	r0, r7
 80085b4:	47c0      	blx	r8
 80085b6:	3001      	adds	r0, #1
 80085b8:	d0e6      	beq.n	8008588 <_printf_common+0xa4>
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7d9      	b.n	8008572 <_printf_common+0x8e>
	...

080085c0 <_printf_i>:
 80085c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	7e0f      	ldrb	r7, [r1, #24]
 80085c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085c8:	2f78      	cmp	r7, #120	; 0x78
 80085ca:	4691      	mov	r9, r2
 80085cc:	4680      	mov	r8, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	469a      	mov	sl, r3
 80085d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085d6:	d807      	bhi.n	80085e8 <_printf_i+0x28>
 80085d8:	2f62      	cmp	r7, #98	; 0x62
 80085da:	d80a      	bhi.n	80085f2 <_printf_i+0x32>
 80085dc:	2f00      	cmp	r7, #0
 80085de:	f000 80d8 	beq.w	8008792 <_printf_i+0x1d2>
 80085e2:	2f58      	cmp	r7, #88	; 0x58
 80085e4:	f000 80a3 	beq.w	800872e <_printf_i+0x16e>
 80085e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085f0:	e03a      	b.n	8008668 <_printf_i+0xa8>
 80085f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085f6:	2b15      	cmp	r3, #21
 80085f8:	d8f6      	bhi.n	80085e8 <_printf_i+0x28>
 80085fa:	a101      	add	r1, pc, #4	; (adr r1, 8008600 <_printf_i+0x40>)
 80085fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008600:	08008659 	.word	0x08008659
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080085e9 	.word	0x080085e9
 800860c:	080085e9 	.word	0x080085e9
 8008610:	080085e9 	.word	0x080085e9
 8008614:	080085e9 	.word	0x080085e9
 8008618:	0800866d 	.word	0x0800866d
 800861c:	080085e9 	.word	0x080085e9
 8008620:	080085e9 	.word	0x080085e9
 8008624:	080085e9 	.word	0x080085e9
 8008628:	080085e9 	.word	0x080085e9
 800862c:	08008779 	.word	0x08008779
 8008630:	0800869d 	.word	0x0800869d
 8008634:	0800875b 	.word	0x0800875b
 8008638:	080085e9 	.word	0x080085e9
 800863c:	080085e9 	.word	0x080085e9
 8008640:	0800879b 	.word	0x0800879b
 8008644:	080085e9 	.word	0x080085e9
 8008648:	0800869d 	.word	0x0800869d
 800864c:	080085e9 	.word	0x080085e9
 8008650:	080085e9 	.word	0x080085e9
 8008654:	08008763 	.word	0x08008763
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008668:	2301      	movs	r3, #1
 800866a:	e0a3      	b.n	80087b4 <_printf_i+0x1f4>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	6829      	ldr	r1, [r5, #0]
 8008670:	0606      	lsls	r6, r0, #24
 8008672:	f101 0304 	add.w	r3, r1, #4
 8008676:	d50a      	bpl.n	800868e <_printf_i+0xce>
 8008678:	680e      	ldr	r6, [r1, #0]
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	2e00      	cmp	r6, #0
 800867e:	da03      	bge.n	8008688 <_printf_i+0xc8>
 8008680:	232d      	movs	r3, #45	; 0x2d
 8008682:	4276      	negs	r6, r6
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008688:	485e      	ldr	r0, [pc, #376]	; (8008804 <_printf_i+0x244>)
 800868a:	230a      	movs	r3, #10
 800868c:	e019      	b.n	80086c2 <_printf_i+0x102>
 800868e:	680e      	ldr	r6, [r1, #0]
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008696:	bf18      	it	ne
 8008698:	b236      	sxthne	r6, r6
 800869a:	e7ef      	b.n	800867c <_printf_i+0xbc>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	6820      	ldr	r0, [r4, #0]
 80086a0:	1d19      	adds	r1, r3, #4
 80086a2:	6029      	str	r1, [r5, #0]
 80086a4:	0601      	lsls	r1, r0, #24
 80086a6:	d501      	bpl.n	80086ac <_printf_i+0xec>
 80086a8:	681e      	ldr	r6, [r3, #0]
 80086aa:	e002      	b.n	80086b2 <_printf_i+0xf2>
 80086ac:	0646      	lsls	r6, r0, #25
 80086ae:	d5fb      	bpl.n	80086a8 <_printf_i+0xe8>
 80086b0:	881e      	ldrh	r6, [r3, #0]
 80086b2:	4854      	ldr	r0, [pc, #336]	; (8008804 <_printf_i+0x244>)
 80086b4:	2f6f      	cmp	r7, #111	; 0x6f
 80086b6:	bf0c      	ite	eq
 80086b8:	2308      	moveq	r3, #8
 80086ba:	230a      	movne	r3, #10
 80086bc:	2100      	movs	r1, #0
 80086be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086c2:	6865      	ldr	r5, [r4, #4]
 80086c4:	60a5      	str	r5, [r4, #8]
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	bfa2      	ittt	ge
 80086ca:	6821      	ldrge	r1, [r4, #0]
 80086cc:	f021 0104 	bicge.w	r1, r1, #4
 80086d0:	6021      	strge	r1, [r4, #0]
 80086d2:	b90e      	cbnz	r6, 80086d8 <_printf_i+0x118>
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	d04d      	beq.n	8008774 <_printf_i+0x1b4>
 80086d8:	4615      	mov	r5, r2
 80086da:	fbb6 f1f3 	udiv	r1, r6, r3
 80086de:	fb03 6711 	mls	r7, r3, r1, r6
 80086e2:	5dc7      	ldrb	r7, [r0, r7]
 80086e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086e8:	4637      	mov	r7, r6
 80086ea:	42bb      	cmp	r3, r7
 80086ec:	460e      	mov	r6, r1
 80086ee:	d9f4      	bls.n	80086da <_printf_i+0x11a>
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d10b      	bne.n	800870c <_printf_i+0x14c>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	07de      	lsls	r6, r3, #31
 80086f8:	d508      	bpl.n	800870c <_printf_i+0x14c>
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	6861      	ldr	r1, [r4, #4]
 80086fe:	4299      	cmp	r1, r3
 8008700:	bfde      	ittt	le
 8008702:	2330      	movle	r3, #48	; 0x30
 8008704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008708:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800870c:	1b52      	subs	r2, r2, r5
 800870e:	6122      	str	r2, [r4, #16]
 8008710:	f8cd a000 	str.w	sl, [sp]
 8008714:	464b      	mov	r3, r9
 8008716:	aa03      	add	r2, sp, #12
 8008718:	4621      	mov	r1, r4
 800871a:	4640      	mov	r0, r8
 800871c:	f7ff fee2 	bl	80084e4 <_printf_common>
 8008720:	3001      	adds	r0, #1
 8008722:	d14c      	bne.n	80087be <_printf_i+0x1fe>
 8008724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008728:	b004      	add	sp, #16
 800872a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872e:	4835      	ldr	r0, [pc, #212]	; (8008804 <_printf_i+0x244>)
 8008730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008734:	6829      	ldr	r1, [r5, #0]
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	f851 6b04 	ldr.w	r6, [r1], #4
 800873c:	6029      	str	r1, [r5, #0]
 800873e:	061d      	lsls	r5, r3, #24
 8008740:	d514      	bpl.n	800876c <_printf_i+0x1ac>
 8008742:	07df      	lsls	r7, r3, #31
 8008744:	bf44      	itt	mi
 8008746:	f043 0320 	orrmi.w	r3, r3, #32
 800874a:	6023      	strmi	r3, [r4, #0]
 800874c:	b91e      	cbnz	r6, 8008756 <_printf_i+0x196>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	f023 0320 	bic.w	r3, r3, #32
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	2310      	movs	r3, #16
 8008758:	e7b0      	b.n	80086bc <_printf_i+0xfc>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	f043 0320 	orr.w	r3, r3, #32
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	2378      	movs	r3, #120	; 0x78
 8008764:	4828      	ldr	r0, [pc, #160]	; (8008808 <_printf_i+0x248>)
 8008766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800876a:	e7e3      	b.n	8008734 <_printf_i+0x174>
 800876c:	0659      	lsls	r1, r3, #25
 800876e:	bf48      	it	mi
 8008770:	b2b6      	uxthmi	r6, r6
 8008772:	e7e6      	b.n	8008742 <_printf_i+0x182>
 8008774:	4615      	mov	r5, r2
 8008776:	e7bb      	b.n	80086f0 <_printf_i+0x130>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	6826      	ldr	r6, [r4, #0]
 800877c:	6961      	ldr	r1, [r4, #20]
 800877e:	1d18      	adds	r0, r3, #4
 8008780:	6028      	str	r0, [r5, #0]
 8008782:	0635      	lsls	r5, r6, #24
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	d501      	bpl.n	800878c <_printf_i+0x1cc>
 8008788:	6019      	str	r1, [r3, #0]
 800878a:	e002      	b.n	8008792 <_printf_i+0x1d2>
 800878c:	0670      	lsls	r0, r6, #25
 800878e:	d5fb      	bpl.n	8008788 <_printf_i+0x1c8>
 8008790:	8019      	strh	r1, [r3, #0]
 8008792:	2300      	movs	r3, #0
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	4615      	mov	r5, r2
 8008798:	e7ba      	b.n	8008710 <_printf_i+0x150>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	602a      	str	r2, [r5, #0]
 80087a0:	681d      	ldr	r5, [r3, #0]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	2100      	movs	r1, #0
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fda2 	bl	80002f0 <memchr>
 80087ac:	b108      	cbz	r0, 80087b2 <_printf_i+0x1f2>
 80087ae:	1b40      	subs	r0, r0, r5
 80087b0:	6060      	str	r0, [r4, #4]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	2300      	movs	r3, #0
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	e7a8      	b.n	8008710 <_printf_i+0x150>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	462a      	mov	r2, r5
 80087c2:	4649      	mov	r1, r9
 80087c4:	4640      	mov	r0, r8
 80087c6:	47d0      	blx	sl
 80087c8:	3001      	adds	r0, #1
 80087ca:	d0ab      	beq.n	8008724 <_printf_i+0x164>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	079b      	lsls	r3, r3, #30
 80087d0:	d413      	bmi.n	80087fa <_printf_i+0x23a>
 80087d2:	68e0      	ldr	r0, [r4, #12]
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	4298      	cmp	r0, r3
 80087d8:	bfb8      	it	lt
 80087da:	4618      	movlt	r0, r3
 80087dc:	e7a4      	b.n	8008728 <_printf_i+0x168>
 80087de:	2301      	movs	r3, #1
 80087e0:	4632      	mov	r2, r6
 80087e2:	4649      	mov	r1, r9
 80087e4:	4640      	mov	r0, r8
 80087e6:	47d0      	blx	sl
 80087e8:	3001      	adds	r0, #1
 80087ea:	d09b      	beq.n	8008724 <_printf_i+0x164>
 80087ec:	3501      	adds	r5, #1
 80087ee:	68e3      	ldr	r3, [r4, #12]
 80087f0:	9903      	ldr	r1, [sp, #12]
 80087f2:	1a5b      	subs	r3, r3, r1
 80087f4:	42ab      	cmp	r3, r5
 80087f6:	dcf2      	bgt.n	80087de <_printf_i+0x21e>
 80087f8:	e7eb      	b.n	80087d2 <_printf_i+0x212>
 80087fa:	2500      	movs	r5, #0
 80087fc:	f104 0619 	add.w	r6, r4, #25
 8008800:	e7f5      	b.n	80087ee <_printf_i+0x22e>
 8008802:	bf00      	nop
 8008804:	08008bc1 	.word	0x08008bc1
 8008808:	08008bd2 	.word	0x08008bd2

0800880c <memcpy>:
 800880c:	440a      	add	r2, r1
 800880e:	4291      	cmp	r1, r2
 8008810:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008814:	d100      	bne.n	8008818 <memcpy+0xc>
 8008816:	4770      	bx	lr
 8008818:	b510      	push	{r4, lr}
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008822:	4291      	cmp	r1, r2
 8008824:	d1f9      	bne.n	800881a <memcpy+0xe>
 8008826:	bd10      	pop	{r4, pc}

08008828 <memmove>:
 8008828:	4288      	cmp	r0, r1
 800882a:	b510      	push	{r4, lr}
 800882c:	eb01 0402 	add.w	r4, r1, r2
 8008830:	d902      	bls.n	8008838 <memmove+0x10>
 8008832:	4284      	cmp	r4, r0
 8008834:	4623      	mov	r3, r4
 8008836:	d807      	bhi.n	8008848 <memmove+0x20>
 8008838:	1e43      	subs	r3, r0, #1
 800883a:	42a1      	cmp	r1, r4
 800883c:	d008      	beq.n	8008850 <memmove+0x28>
 800883e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008846:	e7f8      	b.n	800883a <memmove+0x12>
 8008848:	4402      	add	r2, r0
 800884a:	4601      	mov	r1, r0
 800884c:	428a      	cmp	r2, r1
 800884e:	d100      	bne.n	8008852 <memmove+0x2a>
 8008850:	bd10      	pop	{r4, pc}
 8008852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800885a:	e7f7      	b.n	800884c <memmove+0x24>

0800885c <_free_r>:
 800885c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885e:	2900      	cmp	r1, #0
 8008860:	d044      	beq.n	80088ec <_free_r+0x90>
 8008862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008866:	9001      	str	r0, [sp, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f1a1 0404 	sub.w	r4, r1, #4
 800886e:	bfb8      	it	lt
 8008870:	18e4      	addlt	r4, r4, r3
 8008872:	f000 f913 	bl	8008a9c <__malloc_lock>
 8008876:	4a1e      	ldr	r2, [pc, #120]	; (80088f0 <_free_r+0x94>)
 8008878:	9801      	ldr	r0, [sp, #4]
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	b933      	cbnz	r3, 800888c <_free_r+0x30>
 800887e:	6063      	str	r3, [r4, #4]
 8008880:	6014      	str	r4, [r2, #0]
 8008882:	b003      	add	sp, #12
 8008884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008888:	f000 b90e 	b.w	8008aa8 <__malloc_unlock>
 800888c:	42a3      	cmp	r3, r4
 800888e:	d908      	bls.n	80088a2 <_free_r+0x46>
 8008890:	6825      	ldr	r5, [r4, #0]
 8008892:	1961      	adds	r1, r4, r5
 8008894:	428b      	cmp	r3, r1
 8008896:	bf01      	itttt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	1949      	addeq	r1, r1, r5
 800889e:	6021      	streq	r1, [r4, #0]
 80088a0:	e7ed      	b.n	800887e <_free_r+0x22>
 80088a2:	461a      	mov	r2, r3
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	b10b      	cbz	r3, 80088ac <_free_r+0x50>
 80088a8:	42a3      	cmp	r3, r4
 80088aa:	d9fa      	bls.n	80088a2 <_free_r+0x46>
 80088ac:	6811      	ldr	r1, [r2, #0]
 80088ae:	1855      	adds	r5, r2, r1
 80088b0:	42a5      	cmp	r5, r4
 80088b2:	d10b      	bne.n	80088cc <_free_r+0x70>
 80088b4:	6824      	ldr	r4, [r4, #0]
 80088b6:	4421      	add	r1, r4
 80088b8:	1854      	adds	r4, r2, r1
 80088ba:	42a3      	cmp	r3, r4
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	d1e0      	bne.n	8008882 <_free_r+0x26>
 80088c0:	681c      	ldr	r4, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	6053      	str	r3, [r2, #4]
 80088c6:	4421      	add	r1, r4
 80088c8:	6011      	str	r1, [r2, #0]
 80088ca:	e7da      	b.n	8008882 <_free_r+0x26>
 80088cc:	d902      	bls.n	80088d4 <_free_r+0x78>
 80088ce:	230c      	movs	r3, #12
 80088d0:	6003      	str	r3, [r0, #0]
 80088d2:	e7d6      	b.n	8008882 <_free_r+0x26>
 80088d4:	6825      	ldr	r5, [r4, #0]
 80088d6:	1961      	adds	r1, r4, r5
 80088d8:	428b      	cmp	r3, r1
 80088da:	bf04      	itt	eq
 80088dc:	6819      	ldreq	r1, [r3, #0]
 80088de:	685b      	ldreq	r3, [r3, #4]
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	bf04      	itt	eq
 80088e4:	1949      	addeq	r1, r1, r5
 80088e6:	6021      	streq	r1, [r4, #0]
 80088e8:	6054      	str	r4, [r2, #4]
 80088ea:	e7ca      	b.n	8008882 <_free_r+0x26>
 80088ec:	b003      	add	sp, #12
 80088ee:	bd30      	pop	{r4, r5, pc}
 80088f0:	24031004 	.word	0x24031004

080088f4 <sbrk_aligned>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4e0e      	ldr	r6, [pc, #56]	; (8008930 <sbrk_aligned+0x3c>)
 80088f8:	460c      	mov	r4, r1
 80088fa:	6831      	ldr	r1, [r6, #0]
 80088fc:	4605      	mov	r5, r0
 80088fe:	b911      	cbnz	r1, 8008906 <sbrk_aligned+0x12>
 8008900:	f000 f8bc 	bl	8008a7c <_sbrk_r>
 8008904:	6030      	str	r0, [r6, #0]
 8008906:	4621      	mov	r1, r4
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f8b7 	bl	8008a7c <_sbrk_r>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d00a      	beq.n	8008928 <sbrk_aligned+0x34>
 8008912:	1cc4      	adds	r4, r0, #3
 8008914:	f024 0403 	bic.w	r4, r4, #3
 8008918:	42a0      	cmp	r0, r4
 800891a:	d007      	beq.n	800892c <sbrk_aligned+0x38>
 800891c:	1a21      	subs	r1, r4, r0
 800891e:	4628      	mov	r0, r5
 8008920:	f000 f8ac 	bl	8008a7c <_sbrk_r>
 8008924:	3001      	adds	r0, #1
 8008926:	d101      	bne.n	800892c <sbrk_aligned+0x38>
 8008928:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800892c:	4620      	mov	r0, r4
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	24031008 	.word	0x24031008

08008934 <_malloc_r>:
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	1ccd      	adds	r5, r1, #3
 800893a:	f025 0503 	bic.w	r5, r5, #3
 800893e:	3508      	adds	r5, #8
 8008940:	2d0c      	cmp	r5, #12
 8008942:	bf38      	it	cc
 8008944:	250c      	movcc	r5, #12
 8008946:	2d00      	cmp	r5, #0
 8008948:	4607      	mov	r7, r0
 800894a:	db01      	blt.n	8008950 <_malloc_r+0x1c>
 800894c:	42a9      	cmp	r1, r5
 800894e:	d905      	bls.n	800895c <_malloc_r+0x28>
 8008950:	230c      	movs	r3, #12
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	2600      	movs	r6, #0
 8008956:	4630      	mov	r0, r6
 8008958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895c:	4e2e      	ldr	r6, [pc, #184]	; (8008a18 <_malloc_r+0xe4>)
 800895e:	f000 f89d 	bl	8008a9c <__malloc_lock>
 8008962:	6833      	ldr	r3, [r6, #0]
 8008964:	461c      	mov	r4, r3
 8008966:	bb34      	cbnz	r4, 80089b6 <_malloc_r+0x82>
 8008968:	4629      	mov	r1, r5
 800896a:	4638      	mov	r0, r7
 800896c:	f7ff ffc2 	bl	80088f4 <sbrk_aligned>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	4604      	mov	r4, r0
 8008974:	d14d      	bne.n	8008a12 <_malloc_r+0xde>
 8008976:	6834      	ldr	r4, [r6, #0]
 8008978:	4626      	mov	r6, r4
 800897a:	2e00      	cmp	r6, #0
 800897c:	d140      	bne.n	8008a00 <_malloc_r+0xcc>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	4631      	mov	r1, r6
 8008982:	4638      	mov	r0, r7
 8008984:	eb04 0803 	add.w	r8, r4, r3
 8008988:	f000 f878 	bl	8008a7c <_sbrk_r>
 800898c:	4580      	cmp	r8, r0
 800898e:	d13a      	bne.n	8008a06 <_malloc_r+0xd2>
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	3503      	adds	r5, #3
 8008994:	1a6d      	subs	r5, r5, r1
 8008996:	f025 0503 	bic.w	r5, r5, #3
 800899a:	3508      	adds	r5, #8
 800899c:	2d0c      	cmp	r5, #12
 800899e:	bf38      	it	cc
 80089a0:	250c      	movcc	r5, #12
 80089a2:	4629      	mov	r1, r5
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff ffa5 	bl	80088f4 <sbrk_aligned>
 80089aa:	3001      	adds	r0, #1
 80089ac:	d02b      	beq.n	8008a06 <_malloc_r+0xd2>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	442b      	add	r3, r5
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	e00e      	b.n	80089d4 <_malloc_r+0xa0>
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	1b52      	subs	r2, r2, r5
 80089ba:	d41e      	bmi.n	80089fa <_malloc_r+0xc6>
 80089bc:	2a0b      	cmp	r2, #11
 80089be:	d916      	bls.n	80089ee <_malloc_r+0xba>
 80089c0:	1961      	adds	r1, r4, r5
 80089c2:	42a3      	cmp	r3, r4
 80089c4:	6025      	str	r5, [r4, #0]
 80089c6:	bf18      	it	ne
 80089c8:	6059      	strne	r1, [r3, #4]
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	bf08      	it	eq
 80089ce:	6031      	streq	r1, [r6, #0]
 80089d0:	5162      	str	r2, [r4, r5]
 80089d2:	604b      	str	r3, [r1, #4]
 80089d4:	4638      	mov	r0, r7
 80089d6:	f104 060b 	add.w	r6, r4, #11
 80089da:	f000 f865 	bl	8008aa8 <__malloc_unlock>
 80089de:	f026 0607 	bic.w	r6, r6, #7
 80089e2:	1d23      	adds	r3, r4, #4
 80089e4:	1af2      	subs	r2, r6, r3
 80089e6:	d0b6      	beq.n	8008956 <_malloc_r+0x22>
 80089e8:	1b9b      	subs	r3, r3, r6
 80089ea:	50a3      	str	r3, [r4, r2]
 80089ec:	e7b3      	b.n	8008956 <_malloc_r+0x22>
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	bf0c      	ite	eq
 80089f4:	6032      	streq	r2, [r6, #0]
 80089f6:	605a      	strne	r2, [r3, #4]
 80089f8:	e7ec      	b.n	80089d4 <_malloc_r+0xa0>
 80089fa:	4623      	mov	r3, r4
 80089fc:	6864      	ldr	r4, [r4, #4]
 80089fe:	e7b2      	b.n	8008966 <_malloc_r+0x32>
 8008a00:	4634      	mov	r4, r6
 8008a02:	6876      	ldr	r6, [r6, #4]
 8008a04:	e7b9      	b.n	800897a <_malloc_r+0x46>
 8008a06:	230c      	movs	r3, #12
 8008a08:	603b      	str	r3, [r7, #0]
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f000 f84c 	bl	8008aa8 <__malloc_unlock>
 8008a10:	e7a1      	b.n	8008956 <_malloc_r+0x22>
 8008a12:	6025      	str	r5, [r4, #0]
 8008a14:	e7de      	b.n	80089d4 <_malloc_r+0xa0>
 8008a16:	bf00      	nop
 8008a18:	24031004 	.word	0x24031004

08008a1c <_realloc_r>:
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	4680      	mov	r8, r0
 8008a22:	4614      	mov	r4, r2
 8008a24:	460e      	mov	r6, r1
 8008a26:	b921      	cbnz	r1, 8008a32 <_realloc_r+0x16>
 8008a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	f7ff bf81 	b.w	8008934 <_malloc_r>
 8008a32:	b92a      	cbnz	r2, 8008a40 <_realloc_r+0x24>
 8008a34:	f7ff ff12 	bl	800885c <_free_r>
 8008a38:	4625      	mov	r5, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	f000 f838 	bl	8008ab4 <_malloc_usable_size_r>
 8008a44:	4284      	cmp	r4, r0
 8008a46:	4607      	mov	r7, r0
 8008a48:	d802      	bhi.n	8008a50 <_realloc_r+0x34>
 8008a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a4e:	d812      	bhi.n	8008a76 <_realloc_r+0x5a>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4640      	mov	r0, r8
 8008a54:	f7ff ff6e 	bl	8008934 <_malloc_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0ed      	beq.n	8008a3a <_realloc_r+0x1e>
 8008a5e:	42bc      	cmp	r4, r7
 8008a60:	4622      	mov	r2, r4
 8008a62:	4631      	mov	r1, r6
 8008a64:	bf28      	it	cs
 8008a66:	463a      	movcs	r2, r7
 8008a68:	f7ff fed0 	bl	800880c <memcpy>
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7ff fef4 	bl	800885c <_free_r>
 8008a74:	e7e1      	b.n	8008a3a <_realloc_r+0x1e>
 8008a76:	4635      	mov	r5, r6
 8008a78:	e7df      	b.n	8008a3a <_realloc_r+0x1e>
	...

08008a7c <_sbrk_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d06      	ldr	r5, [pc, #24]	; (8008a98 <_sbrk_r+0x1c>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	f7f8 fce2 	bl	8001450 <_sbrk>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_sbrk_r+0x1a>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_sbrk_r+0x1a>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	2403100c 	.word	0x2403100c

08008a9c <__malloc_lock>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	; (8008aa4 <__malloc_lock+0x8>)
 8008a9e:	f000 b811 	b.w	8008ac4 <__retarget_lock_acquire_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	24031010 	.word	0x24031010

08008aa8 <__malloc_unlock>:
 8008aa8:	4801      	ldr	r0, [pc, #4]	; (8008ab0 <__malloc_unlock+0x8>)
 8008aaa:	f000 b80c 	b.w	8008ac6 <__retarget_lock_release_recursive>
 8008aae:	bf00      	nop
 8008ab0:	24031010 	.word	0x24031010

08008ab4 <_malloc_usable_size_r>:
 8008ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab8:	1f18      	subs	r0, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfbc      	itt	lt
 8008abe:	580b      	ldrlt	r3, [r1, r0]
 8008ac0:	18c0      	addlt	r0, r0, r3
 8008ac2:	4770      	bx	lr

08008ac4 <__retarget_lock_acquire_recursive>:
 8008ac4:	4770      	bx	lr

08008ac6 <__retarget_lock_release_recursive>:
 8008ac6:	4770      	bx	lr

08008ac8 <_init>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr

08008ad4 <_fini>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr
