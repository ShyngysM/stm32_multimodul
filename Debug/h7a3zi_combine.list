
h7a3zi_combine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009460  08009460  00019460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08009470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00031098  240000a0  08009510  000200a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031138  08009510  00021138  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f57  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000509c  00000000  00000000  00043025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001840  00000000  00000000  000480c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000132b  00000000  00000000  00049908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f8f  00000000  00000000  0004ac33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019f3e  00000000  00000000  0007dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155600  00000000  00000000  00097b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000001e  00000000  00000000  001ed100  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005df4  00000000  00000000  001ed120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000191  00000000  00000000  001f2f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00001a6a  00000000  00000000  001f30a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b80c 	b.w	8000380 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f008 fea0 	bl	80090b4 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__aeabi_idiv0>:
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <__do_global_dtors_aux>:
 8000384:	b510      	push	{r4, lr}
 8000386:	4c05      	ldr	r4, [pc, #20]	; (800039c <__do_global_dtors_aux+0x18>)
 8000388:	7823      	ldrb	r3, [r4, #0]
 800038a:	b933      	cbnz	r3, 800039a <__do_global_dtors_aux+0x16>
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__do_global_dtors_aux+0x1c>)
 800038e:	b113      	cbz	r3, 8000396 <__do_global_dtors_aux+0x12>
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <__do_global_dtors_aux+0x20>)
 8000392:	f3af 8000 	nop.w
 8000396:	2301      	movs	r3, #1
 8000398:	7023      	strb	r3, [r4, #0]
 800039a:	bd10      	pop	{r4, pc}
 800039c:	240000a0 	.word	0x240000a0
 80003a0:	00000000 	.word	0x00000000
 80003a4:	08009354 	.word	0x08009354

080003a8 <frame_dummy>:
 80003a8:	b508      	push	{r3, lr}
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <frame_dummy+0x10>)
 80003ac:	b11b      	cbz	r3, 80003b6 <frame_dummy+0xe>
 80003ae:	4903      	ldr	r1, [pc, #12]	; (80003bc <frame_dummy+0x14>)
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <frame_dummy+0x18>)
 80003b2:	f3af 8000 	nop.w
 80003b6:	bd08      	pop	{r3, pc}
 80003b8:	00000000 	.word	0x00000000
 80003bc:	240000a4 	.word	0x240000a4
 80003c0:	08009354 	.word	0x08009354

080003c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80003ca:	f000 ff81 	bl	80012d0 <HAL_Init>
  // HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ce:	f000 f8cf 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d2:	f000 fa65 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003d6:	f000 fa0f 	bl	80007f8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80003da:	f000 fa59 	bl	8000890 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80003de:	f000 f945 	bl	800066c <MX_ADC1_Init>
  MX_TIM16_Init();
 80003e2:	f000 f9bb 	bl	800075c <MX_TIM16_Init>
  MX_TIM17_Init();
 80003e6:	f000 f9e1 	bl	80007ac <MX_TIM17_Init>

  /////////////////START/////////////////////////
  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Pumpe
  //  HAL_Delay(1500);

  STEPPERS_Init_TMR(&htim17); // nötig für init look also ISR CODE BEGIN 4
 80003ea:	4857      	ldr	r0, [pc, #348]	; (8000548 <main+0x184>)
 80003ec:	f007 fe16 	bl	800801c <STEPPERS_Init_TMR>
  STEPPER_SetSpeed(STEPPER_MOTOR1, 14); // set RPM
 80003f0:	210e      	movs	r1, #14
 80003f2:	2000      	movs	r0, #0
 80003f4:	f007 fe5c 	bl	80080b0 <STEPPER_SetSpeed>

  // STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1048, DIR_CW); // rotate 180
  // HAL_Delay(4000);

  for (int i = 0; i < 1; i++) {
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e09d      	b.n	800053a <main+0x176>

    measure(&Meas);
 80003fe:	4853      	ldr	r0, [pc, #332]	; (800054c <main+0x188>)
 8000400:	f000 fb9e 	bl	8000b40 <measure>

    /* Transmit an array with ANALOG data via uart */
    for (int j = 0; j < Meas.t_end; j++) {
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	e016      	b.n	8000438 <main+0x74>
      uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 800040a:	4a50      	ldr	r2, [pc, #320]	; (800054c <main+0x188>)
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	494e      	ldr	r1, [pc, #312]	; (8000550 <main+0x18c>)
 8000416:	484f      	ldr	r0, [pc, #316]	; (8000554 <main+0x190>)
 8000418:	f008 f9a6 	bl	8008768 <siprintf>
 800041c:	4603      	mov	r3, r0
 800041e:	4a4e      	ldr	r2, [pc, #312]	; (8000558 <main+0x194>)
 8000420:	6013      	str	r3, [r2, #0]
      HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000422:	4b4d      	ldr	r3, [pc, #308]	; (8000558 <main+0x194>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	b29a      	uxth	r2, r3
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	494a      	ldr	r1, [pc, #296]	; (8000554 <main+0x190>)
 800042c:	484b      	ldr	r0, [pc, #300]	; (800055c <main+0x198>)
 800042e:	f006 fb01 	bl	8006a34 <HAL_UART_Transmit>
    for (int j = 0; j < Meas.t_end; j++) {
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <main+0x188>)
 800043a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800043e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	429a      	cmp	r2, r3
 8000446:	dbe0      	blt.n	800040a <main+0x46>
    }

    analyse(&Meas);
 8000448:	4840      	ldr	r0, [pc, #256]	; (800054c <main+0x188>)
 800044a:	f000 fc1b 	bl	8000c84 <analyse>
    // STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1048, DIR_CCW); // rotate 180

    /* Transmit an array with DIGITAL data via uart */
    uart_buf_len = sprintf(uart_buf, "Digital \n");
 800044e:	4944      	ldr	r1, [pc, #272]	; (8000560 <main+0x19c>)
 8000450:	4840      	ldr	r0, [pc, #256]	; (8000554 <main+0x190>)
 8000452:	f008 f989 	bl	8008768 <siprintf>
 8000456:	4603      	mov	r3, r0
 8000458:	4a3f      	ldr	r2, [pc, #252]	; (8000558 <main+0x194>)
 800045a:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <main+0x194>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	b29a      	uxth	r2, r3
 8000462:	2364      	movs	r3, #100	; 0x64
 8000464:	493b      	ldr	r1, [pc, #236]	; (8000554 <main+0x190>)
 8000466:	483d      	ldr	r0, [pc, #244]	; (800055c <main+0x198>)
 8000468:	f006 fae4 	bl	8006a34 <HAL_UART_Transmit>
    for (int j = 0; j < Meas.t_end; j++) {
 800046c:	2300      	movs	r3, #0
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	e016      	b.n	80004a0 <main+0xdc>
      uart_buf_len = sprintf(uart_buf, "%d, %u \r\n", j, Meas.signal[j]);
 8000472:	4a36      	ldr	r2, [pc, #216]	; (800054c <main+0x188>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4934      	ldr	r1, [pc, #208]	; (8000550 <main+0x18c>)
 800047e:	4835      	ldr	r0, [pc, #212]	; (8000554 <main+0x190>)
 8000480:	f008 f972 	bl	8008768 <siprintf>
 8000484:	4603      	mov	r3, r0
 8000486:	4a34      	ldr	r2, [pc, #208]	; (8000558 <main+0x194>)
 8000488:	6013      	str	r3, [r2, #0]
      HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800048a:	4b33      	ldr	r3, [pc, #204]	; (8000558 <main+0x194>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	b29a      	uxth	r2, r3
 8000490:	2364      	movs	r3, #100	; 0x64
 8000492:	4930      	ldr	r1, [pc, #192]	; (8000554 <main+0x190>)
 8000494:	4831      	ldr	r0, [pc, #196]	; (800055c <main+0x198>)
 8000496:	f006 facd 	bl	8006a34 <HAL_UART_Transmit>
    for (int j = 0; j < Meas.t_end; j++) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <main+0x188>)
 80004a2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80004a6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbe0      	blt.n	8000472 <main+0xae>
    }

    /* Transmit extra measurement data via uart */
    uart_buf_len = sprintf(uart_buf, "Measurements \n");
 80004b0:	492c      	ldr	r1, [pc, #176]	; (8000564 <main+0x1a0>)
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <main+0x190>)
 80004b4:	f008 f958 	bl	8008768 <siprintf>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4a27      	ldr	r2, [pc, #156]	; (8000558 <main+0x194>)
 80004bc:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80004be:	4b26      	ldr	r3, [pc, #152]	; (8000558 <main+0x194>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	2364      	movs	r3, #100	; 0x64
 80004c6:	4923      	ldr	r1, [pc, #140]	; (8000554 <main+0x190>)
 80004c8:	4824      	ldr	r0, [pc, #144]	; (800055c <main+0x198>)
 80004ca:	f006 fab3 	bl	8006a34 <HAL_UART_Transmit>
    uart_buf_len = sprintf(uart_buf, "htime = %d ms; pulses = %d;   \r\n",
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <main+0x188>)
 80004d0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80004d4:	f8d3 2d4c 	ldr.w	r2, [r3, #3404]	; 0xd4c
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <main+0x188>)
 80004da:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80004de:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80004e2:	4921      	ldr	r1, [pc, #132]	; (8000568 <main+0x1a4>)
 80004e4:	481b      	ldr	r0, [pc, #108]	; (8000554 <main+0x190>)
 80004e6:	f008 f93f 	bl	8008768 <siprintf>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <main+0x194>)
 80004ee:	6013      	str	r3, [r2, #0]
                           Meas.htime, Meas.pulses);
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <main+0x194>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	4916      	ldr	r1, [pc, #88]	; (8000554 <main+0x190>)
 80004fa:	4818      	ldr	r0, [pc, #96]	; (800055c <main+0x198>)
 80004fc:	f006 fa9a 	bl	8006a34 <HAL_UART_Transmit>
    uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
                           Meas.bad, Meas.t_vibr_start);
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0x188>)
 8000502:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000506:	f893 3d50 	ldrb.w	r3, [r3, #3408]	; 0xd50
    uart_buf_len = sprintf(uart_buf, "bad state = %d; vibr = %d ms \r\n",
 800050a:	461a      	mov	r2, r3
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <main+0x188>)
 800050e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000512:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000516:	4915      	ldr	r1, [pc, #84]	; (800056c <main+0x1a8>)
 8000518:	480e      	ldr	r0, [pc, #56]	; (8000554 <main+0x190>)
 800051a:	f008 f925 	bl	8008768 <siprintf>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x194>)
 8000522:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x194>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	4909      	ldr	r1, [pc, #36]	; (8000554 <main+0x190>)
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <main+0x198>)
 8000530:	f006 fa80 	bl	8006a34 <HAL_UART_Transmit>
  for (int i = 0; i < 1; i++) {
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b00      	cmp	r3, #0
 800053e:	f77f af5e 	ble.w	80003fe <main+0x3a>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000542:	bf00      	nop
 8000544:	e7fd      	b.n	8000542 <main+0x17e>
 8000546:	bf00      	nop
 8000548:	2400016c 	.word	0x2400016c
 800054c:	24000248 	.word	0x24000248
 8000550:	0800936c 	.word	0x0800936c
 8000554:	24030f9c 	.word	0x24030f9c
 8000558:	24030fd0 	.word	0x24030fd0
 800055c:	240001b8 	.word	0x240001b8
 8000560:	08009378 	.word	0x08009378
 8000564:	08009384 	.word	0x08009384
 8000568:	08009394 	.word	0x08009394
 800056c:	080093b8 	.word	0x080093b8

08000570 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	; 0x70
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	224c      	movs	r2, #76	; 0x4c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f008 f912 	bl	80087a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2220      	movs	r2, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f008 f90c 	bl	80087a8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000590:	4b34      	ldr	r3, [pc, #208]	; (8000664 <SystemClock_Config+0xf4>)
 8000592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000596:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800059a:	2004      	movs	r0, #4
 800059c:	f002 fbd0 	bl	8002d40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b30      	ldr	r3, [pc, #192]	; (8000668 <SystemClock_Config+0xf8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <SystemClock_Config+0xf8>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <SystemClock_Config+0xf8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80005bc:	bf00      	nop
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <SystemClock_Config+0xf8>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ca:	d1f8      	bne.n	80005be <SystemClock_Config+0x4e>
  }

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xf4>)
 80005ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005d0:	f023 0303 	bic.w	r3, r3, #3
 80005d4:	4a23      	ldr	r2, [pc, #140]	; (8000664 <SystemClock_Config+0xf4>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 80005dc:	2321      	movs	r3, #33	; 0x21
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005e6:	2301      	movs	r3, #1
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80005f6:	2318      	movs	r3, #24
 80005f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fe:	2304      	movs	r3, #4
 8000600:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000606:	230c      	movs	r3, #12
 8000608:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800060a:	2300      	movs	r3, #0
 800060c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fbec 	bl	8002df4 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xb6>
    Error_Handler();
 8000622:	f000 fc0d 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000626:	233f      	movs	r3, #63	; 0x3f
 8000628:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f002 ffd6 	bl	80035fc <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xea>
    Error_Handler();
 8000656:	f000 fbf3 	bl	8000e40 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3770      	adds	r7, #112	; 0x70
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58024800 	.word	0x58024800

0800066c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_ADC1_Init+0xe4>)
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <MX_ADC1_Init+0xe8>)
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_ADC1_Init+0xe4>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <MX_ADC1_Init+0xe4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <MX_ADC1_Init+0xe4>)
 80006ee:	f001 f863 	bl	80017b8 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
    Error_Handler();
 80006f8:	f000 fba2 	bl	8000e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_ADC1_Init+0xe4>)
 8000708:	f001 ffa4 	bl	8002654 <HAL_ADCEx_MultiModeConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xaa>
    Error_Handler();
 8000712:	f000 fb95 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_ADC1_Init+0xec>)
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071a:	2306      	movs	r3, #6
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000722:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000726:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000728:	2304      	movs	r3, #4
 800072a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC1_Init+0xe4>)
 800073a:	f001 fb37 	bl	8001dac <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xdc>
    Error_Handler();
 8000744:	f000 fb7c 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	240000bc 	.word	0x240000bc
 8000754:	40022000 	.word	0x40022000
 8000758:	3ef08000 	.word	0x3ef08000

0800075c <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_TIM16_Init+0x4c>)
 8000764:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600 - 1;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000768:	f242 527f 	movw	r2, #9599	; 0x257f
 800076c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000 - 1;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000776:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800077a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_TIM16_Init+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_TIM16_Init+0x48>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_TIM16_Init+0x48>)
 8000790:	f005 fb6e 	bl	8005e70 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM16_Init+0x42>
    Error_Handler();
 800079a:	f000 fb51 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	24000120 	.word	0x24000120
 80007a8:	40014400 	.word	0x40014400

080007ac <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <MX_TIM17_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_TIM17_Init+0x44>)
 80007de:	f005 fb47 	bl	8005e70 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM17_Init+0x40>
    Error_Handler();
 80007e8:	f000 fb2a 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2400016c 	.word	0x2400016c
 80007f4:	40014800 	.word	0x40014800

080007f8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_USART3_UART_Init+0x90>)
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <MX_USART3_UART_Init+0x94>)
 8000800:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_USART3_UART_Init+0x90>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_USART3_UART_Init+0x90>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_USART3_UART_Init+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART3_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000842:	f006 f8a7 	bl	8006994 <HAL_UART_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 800084c:	f000 faf8 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 8000850:	2100      	movs	r1, #0
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000854:	f007 f9de 	bl	8007c14 <HAL_UARTEx_SetTxFifoThreshold>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800085e:	f000 faef 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 8000862:	2100      	movs	r1, #0
 8000864:	4808      	ldr	r0, [pc, #32]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000866:	f007 fa13 	bl	8007c90 <HAL_UARTEx_SetRxFifoThreshold>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8000870:	f000 fae6 	bl	8000e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_USART3_UART_Init+0x90>)
 8000876:	f007 f994 	bl	8007ba2 <HAL_UARTEx_DisableFifoMode>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 8000880:	f000 fade 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	240001b8 	.word	0x240001b8
 800088c:	40004800 	.word	0x40004800

08000890 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b95      	ldr	r3, [pc, #596]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	4a93      	ldr	r2, [pc, #588]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c6:	4b91      	ldr	r3, [pc, #580]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
 80008d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d4:	4b8d      	ldr	r3, [pc, #564]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	4a8c      	ldr	r2, [pc, #560]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e4:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ea:	f003 0320 	and.w	r3, r3, #32
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	4b86      	ldr	r3, [pc, #536]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	4a84      	ldr	r2, [pc, #528]	; (8000b0c <MX_GPIO_Init+0x26c>)
 80008fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b7e      	ldr	r3, [pc, #504]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000912:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000916:	4a7d      	ldr	r2, [pc, #500]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000920:	4b7a      	ldr	r3, [pc, #488]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b77      	ldr	r3, [pc, #476]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000934:	4a75      	ldr	r2, [pc, #468]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800093e:	4b73      	ldr	r3, [pc, #460]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094c:	4b6f      	ldr	r3, [pc, #444]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800094e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000952:	4a6e      	ldr	r2, [pc, #440]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095c:	4b6b      	ldr	r3, [pc, #428]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800095e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b68      	ldr	r3, [pc, #416]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800096c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000970:	4a66      	ldr	r2, [pc, #408]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800097a:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800097c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000988:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800098a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800098e:	4a5f      	ldr	r2, [pc, #380]	; (8000b0c <MX_GPIO_Init+0x26c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000998:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <MX_GPIO_Init+0x26c>)
 800099a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	4858      	ldr	r0, [pc, #352]	; (8000b10 <MX_GPIO_Init+0x270>)
 80009ae:	f002 f9ad 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pump_GPIO_Port, pump_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	4857      	ldr	r0, [pc, #348]	; (8000b14 <MX_GPIO_Init+0x274>)
 80009b8:	f002 f9a8 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | stepper_1_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f244 0141 	movw	r1, #16449	; 0x4041
 80009c2:	4855      	ldr	r0, [pc, #340]	; (8000b18 <MX_GPIO_Init+0x278>)
 80009c4:	f002 f9a2 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, stepper_3_Pin | stepper_4_Pin | LD2_Pin,
 80009c8:	2200      	movs	r2, #0
 80009ca:	f246 0102 	movw	r1, #24578	; 0x6002
 80009ce:	4853      	ldr	r0, [pc, #332]	; (8000b1c <MX_GPIO_Init+0x27c>)
 80009d0:	f002 f99c 	bl	8002d0c <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 80009da:	4851      	ldr	r0, [pc, #324]	; (8000b20 <MX_GPIO_Init+0x280>)
 80009dc:	f002 f996 	bl	8002d0c <HAL_GPIO_WritePin>
      GPIOG, help_signal_ONESEC_Pin | vibration_motor_Pin | stepper_2_Pin,
      GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	484b      	ldr	r0, [pc, #300]	; (8000b24 <MX_GPIO_Init+0x284>)
 80009f6:	f001 ffd9 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	483f      	ldr	r0, [pc, #252]	; (8000b10 <MX_GPIO_Init+0x270>)
 8000a14:	f001 ffca 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : pump_Pin */
  GPIO_InitStruct.Pin = pump_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(pump_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4839      	ldr	r0, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x274>)
 8000a30:	f001 ffbc 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin stepper_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | stepper_1_Pin;
 8000a34:	f244 0341 	movw	r3, #16449	; 0x4041
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4832      	ldr	r0, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x278>)
 8000a4e:	f001 ffad 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : stepper_3_Pin stepper_4_Pin LD2_Pin */
  GPIO_InitStruct.Pin = stepper_3_Pin | stepper_4_Pin | LD2_Pin;
 8000a52:	f246 0302 	movw	r3, #24578	; 0x6002
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x27c>)
 8000a6c:	f001 ff9e 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4826      	ldr	r0, [pc, #152]	; (8000b20 <MX_GPIO_Init+0x280>)
 8000a86:	f001 ff91 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481d      	ldr	r0, [pc, #116]	; (8000b14 <MX_GPIO_Init+0x274>)
 8000aa0:	f001 ff84 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <MX_GPIO_Init+0x274>)
 8000ac2:	f001 ff73 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_GPIO_Init+0x274>)
 8000ae0:	f001 ff64 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : help_signal_ONESEC_Pin vibration_motor_Pin
   * stepper_2_Pin */
  GPIO_InitStruct.Pin =
 8000ae4:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
      help_signal_ONESEC_Pin | vibration_motor_Pin | stepper_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_GPIO_Init+0x280>)
 8000afe:	f001 ff55 	bl	80029ac <HAL_GPIO_Init>
}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	; 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58021400 	.word	0x58021400
 8000b14:	58020000 	.word	0x58020000
 8000b18:	58020400 	.word	0x58020400
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	58021800 	.word	0x58021800
 8000b24:	58020800 	.word	0x58020800

08000b28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// calling an ISR for STEPPER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  STEPPER_TMR_OVF_ISR(htim);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f007 fd73 	bl	800861c <STEPPER_TMR_OVF_ISR>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <measure>:

void measure(struct MeasureData *s) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  const int ONESEC = 10000 - 1;
 8000b48:	f242 730f 	movw	r3, #9999	; 0x270f
 8000b4c:	613b      	str	r3, [r7, #16]
  // store our counter value
  int tim_val_ms = 0; // tick is 0.1 ms
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]

  bool is_vibrating = false;
 8000b52:	2300      	movs	r3, #0
 8000b54:	76fb      	strb	r3, [r7, #27]
  // store our 16bit ADC reading
  uint16_t raw;
  // starting timer 16
  HAL_TIM_Base_Start(&htim16);
 8000b56:	4848      	ldr	r0, [pc, #288]	; (8000c78 <measure+0x138>)
 8000b58:	f005 f9e2 	bl	8005f20 <HAL_TIM_Base_Start>
  // set help signal (yellow led)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	4846      	ldr	r0, [pc, #280]	; (8000c7c <measure+0x13c>)
 8000b64:	f002 f8d2 	bl	8002d0c <HAL_GPIO_WritePin>

  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e064      	b.n	8000c38 <measure+0xf8>

    if (!is_vibrating && tim_val_ms >= ONESEC * 0.2) {
 8000b6e:	7efb      	ldrb	r3, [r7, #27]
 8000b70:	f083 0301 	eor.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d022      	beq.n	8000bc0 <measure+0x80>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b8e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000c68 <measure+0x128>
 8000b92:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9e:	db0f      	blt.n	8000bc0 <measure+0x80>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	4835      	ldr	r0, [pc, #212]	; (8000c7c <measure+0x13c>)
 8000ba8:	f002 f8b0 	bl	8002d0c <HAL_GPIO_WritePin>
      // saving time of begin vibration
      s->t_vibr_start = i;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
      is_vibrating = true;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	76fb      	strb	r3, [r7, #27]
 8000bbe:	e01b      	b.n	8000bf8 <measure+0xb8>
    } else if (is_vibrating && tim_val_ms >= ONESEC * 0.3) {
 8000bc0:	7efb      	ldrb	r3, [r7, #27]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d018      	beq.n	8000bf8 <measure+0xb8>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bda:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000c70 <measure+0x130>
 8000bde:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000be2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	db05      	blt.n	8000bf8 <measure+0xb8>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	4822      	ldr	r0, [pc, #136]	; (8000c7c <measure+0x13c>)
 8000bf4:	f002 f88a 	bl	8002d0c <HAL_GPIO_WritePin>
    }

    // ADC routine
    HAL_ADC_Start(&hadc1);
 8000bf8:	4821      	ldr	r0, [pc, #132]	; (8000c80 <measure+0x140>)
 8000bfa:	f000 ff37 	bl	8001a6c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <measure+0x140>)
 8000c04:	f000 ffec 	bl	8001be0 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000c08:	481d      	ldr	r0, [pc, #116]	; (8000c80 <measure+0x140>)
 8000c0a:	f001 f8c1 	bl	8001d90 <HAL_ADC_GetValue>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81fb      	strh	r3, [r7, #14]
    // needed to save the last iterator i
    s->t_end = i;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000c18:	461a      	mov	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f8c2 3d44 	str.w	r3, [r2, #3396]	; 0xd44
    // remember the last element of array will be 0, the counter will be
    // increased but array not filled
    s->signal[i] = raw;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	89f9      	ldrh	r1, [r7, #14]
 8000c26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <measure+0x138>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c30:	61fb      	str	r3, [r7, #28]
  for (int i = 0; tim_val_ms < ONESEC; i++) {
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	69fa      	ldr	r2, [r7, #28]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	db96      	blt.n	8000b6e <measure+0x2e>
  }
  // reset help signal (yellow led)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <measure+0x13c>)
 8000c48:	f002 f860 	bl	8002d0c <HAL_GPIO_WritePin>
  // stoping timer 16
  HAL_TIM_Base_Stop_IT(&htim16);
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <measure+0x138>)
 8000c4e:	f005 fa4f 	bl	80060f0 <HAL_TIM_Base_Stop_IT>
  // reseting timer 16
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <measure+0x138>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	f3af 8000 	nop.w
 8000c68:	9999999a 	.word	0x9999999a
 8000c6c:	3fc99999 	.word	0x3fc99999
 8000c70:	33333333 	.word	0x33333333
 8000c74:	3fd33333 	.word	0x3fd33333
 8000c78:	24000120 	.word	0x24000120
 8000c7c:	58021800 	.word	0x58021800
 8000c80:	240000bc 	.word	0x240000bc

08000c84 <analyse>:

void analyse(struct MeasureData *s) {
 8000c84:	b480      	push	{r7}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  // digitalize signal v:[0,1]
  const int TRIGGER = 39718;
 8000c8c:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000c90:	617b      	str	r3, [r7, #20]
  const int SCALE = 1000;
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	613b      	str	r3, [r7, #16]

  for (int i = 0; i < s->t_end; i++) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9c:	e015      	b.n	8000cca <analyse+0x46>
    if (s->signal[i] < TRIGGER) { // aprox. 2V TODO change it to 1V
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dd05      	ble.n	8000cba <analyse+0x36>
      s->signal[i] = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000cb8:	e004      	b.n	8000cc4 <analyse+0x40>
    } else {
      s->signal[i] = 1;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i = 0; i < s->t_end; i++) {
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000cd0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dbe1      	blt.n	8000c9e <analyse+0x1a>
    }
  }
  // count pulses
  for (int i = 0; i < s->t_end; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	e02d      	b.n	8000d3c <analyse+0xb8>
    int edge = s->signal[i + 1] - s->signal[i];
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cea:	4619      	mov	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a3a      	ldr	r2, [r7, #32]
 8000cf0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cf4:	1acb      	subs	r3, r1, r3
 8000cf6:	60fb      	str	r3, [r7, #12]
    if (edge == 1) { // count only negative pulses
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10a      	bne.n	8000d14 <analyse+0x90>
      s->pulses++;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d04:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000d08:	3301      	adds	r3, #1
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000d10:	f8c2 3d48 	str.w	r3, [r2, #3400]	; 0xd48
    }
    if (s->signal[i] == 1) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a3a      	ldr	r2, [r7, #32]
 8000d18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d10a      	bne.n	8000d36 <analyse+0xb2>
      s->htime++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d26:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000d32:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  for (int i = 0; i < s->t_end; i++) {
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d42:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000d46:	6a3a      	ldr	r2, [r7, #32]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbc9      	blt.n	8000ce0 <analyse+0x5c>
    }
  }
  // check if sensor has been open before vibration
  s->bad = false;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	e00f      	b.n	8000d7e <analyse+0xfa>
    if (s->signal[i] == 0) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <analyse+0xf4>
      s->bad = true;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8000d76:	e00a      	b.n	8000d8e <analyse+0x10a>
  for (int i = 0; i <= s->t_vibr_start; i++) {
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d84:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dde7      	ble.n	8000d5e <analyse+0xda>
    }
  }
  // check if sensor has been open after vibration + Einschwingungszeit
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000d94:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000da0:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000da4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000da8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	e00f      	b.n	8000dd4 <analyse+0x150>
    if (s->signal[i] == 0) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d106      	bne.n	8000dce <analyse+0x14a>
      s->bad = true;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
      break;
 8000dcc:	e00a      	b.n	8000de4 <analyse+0x160>
  for (int i = (int)(s->t_end * 0.75); i < s->t_end; i++) {
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000dda:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbe7      	blt.n	8000db4 <analyse+0x130>
    }
  }
  // find on ratio
  s->htime = s->htime * SCALE / s->t_end;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000dea:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	fb03 f202 	mul.w	r2, r3, r2
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000dfa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000dfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000e08:	f8c2 3d4c 	str.w	r3, [r2, #3404]	; 0xd4c
  s->t_vibr_start = s->t_vibr_start * SCALE / s->t_end;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e12:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	fb03 f202 	mul.w	r2, r3, r2
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8000e22:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8000e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 8000e30:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
  // on_ratio = t_rl/1000;
}
 8000e34:	bf00      	nop
 8000e36:	372c      	adds	r7, #44	; 0x2c
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <Error_Handler+0x8>

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x30>)
 8000e54:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x30>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x30>)
 8000e64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0b8      	sub	sp, #224	; 0xe0
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	22b8      	movs	r2, #184	; 0xb8
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f007 fc81 	bl	80087a8 <memset>
  if(hadc->Instance==ADC1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <HAL_ADC_MspInit+0xd4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d14c      	bne.n	8000f4a <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000eb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000eca:	23c0      	movs	r3, #192	; 0xc0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 ff17 	bl	8003d14 <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eec:	f7ff ffa8 	bl	8000e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000ef2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000f02:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_ADC_MspInit+0xd8>)
 8000f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|sensor_analog_read_Pin;
 8000f2c:	2309      	movs	r3, #9
 8000f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_ADC_MspInit+0xdc>)
 8000f46:	f001 fd31 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	37e0      	adds	r7, #224	; 0xe0
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000
 8000f58:	58024400 	.word	0x58024400
 8000f5c:	58020000 	.word	0x58020000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_TIM_Base_MspInit+0x74>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10f      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f78:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f84:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000f90:	e01b      	b.n	8000fca <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d116      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000fae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2076      	movs	r0, #118	; 0x76
 8000fc0:	f001 fcbf 	bl	8002942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fc4:	2076      	movs	r0, #118	; 0x76
 8000fc6:	f001 fcd6 	bl	8002976 <HAL_NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40014400 	.word	0x40014400
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	40014800 	.word	0x40014800

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b8      	sub	sp, #224	; 0xe0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	22b8      	movs	r2, #184	; 0xb8
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f007 fbd1 	bl	80087a8 <memset>
  if(huart->Instance==USART3)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <HAL_UART_MspInit+0xc0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d142      	bne.n	8001096 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fe78 	bl	8003d14 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800102a:	f7ff ff09 	bl	8000e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 8001030:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 8001036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 8001040:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0xc4>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001084:	2307      	movs	r3, #7
 8001086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_UART_MspInit+0xc8>)
 8001092:	f001 fc8b 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	37e0      	adds	r7, #224	; 0xe0
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004800 	.word	0x40004800
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020c00 	.word	0x58020c00

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f957 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM17_IRQHandler+0x10>)
 8001112:	f005 f81c 	bl	800614e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2400016c 	.word	0x2400016c

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f007 fb32 	bl	80087b8 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	24100000 	.word	0x24100000
 8001180:	00000400 	.word	0x00000400
 8001184:	24030fd4 	.word	0x24030fd4
 8001188:	24031138 	.word	0x24031138

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <SystemInit+0xd0>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a31      	ldr	r2, [pc, #196]	; (800125c <SystemInit+0xd0>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <SystemInit+0xd4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d807      	bhi.n	80011bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <SystemInit+0xd4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 030f 	bic.w	r3, r3, #15
 80011b4:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <SystemInit+0xd4>)
 80011b6:	f043 0303 	orr.w	r3, r3, #3
 80011ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <SystemInit+0xd8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <SystemInit+0xd8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <SystemInit+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <SystemInit+0xd8>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4924      	ldr	r1, [pc, #144]	; (8001264 <SystemInit+0xd8>)
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <SystemInit+0xdc>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <SystemInit+0xd4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <SystemInit+0xd4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 030f 	bic.w	r3, r3, #15
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <SystemInit+0xd4>)
 80011f0:	f043 0303 	orr.w	r3, r3, #3
 80011f4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <SystemInit+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <SystemInit+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <SystemInit+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SystemInit+0xd8>)
 800120a:	4a18      	ldr	r2, [pc, #96]	; (800126c <SystemInit+0xe0>)
 800120c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <SystemInit+0xd8>)
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <SystemInit+0xe4>)
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <SystemInit+0xd8>)
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <SystemInit+0xe8>)
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SystemInit+0xd8>)
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <SystemInit+0xe8>)
 8001224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <SystemInit+0xd8>)
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <SystemInit+0xe8>)
 8001230:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <SystemInit+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <SystemInit+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <SystemInit+0xd8>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <SystemInit+0xd8>)
 8001246:	2200      	movs	r2, #0
 8001248:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SystemInit+0xec>)
 800124c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001250:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	52002000 	.word	0x52002000
 8001264:	58024400 	.word	0x58024400
 8001268:	eaf6ed7f 	.word	0xeaf6ed7f
 800126c:	02020200 	.word	0x02020200
 8001270:	01ff0000 	.word	0x01ff0000
 8001274:	01010280 	.word	0x01010280
 8001278:	52004000 	.word	0x52004000

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001280:	f7ff ff84 	bl	800118c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	; (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f007 fa8b 	bl	80087c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff f889 	bl	80003c4 <main>
  bx  lr
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012bc:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80012c0:	08009470 	.word	0x08009470
  ldr r2, =_sbss
 80012c4:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 80012c8:	24031138 	.word	0x24031138

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f001 fb28 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012dc:	f002 fb44 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_Init+0x68>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	4913      	ldr	r1, [pc, #76]	; (800133c <HAL_Init+0x6c>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
 80012f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_Init+0x68>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_Init+0x6c>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_Init+0x70>)
 8001312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_Init+0x74>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f814 	bl	8001348 <HAL_InitTick>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e002      	b.n	8001330 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800132a:	f7ff fd8f 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	080093d8 	.word	0x080093d8
 8001340:	24000004 	.word	0x24000004
 8001344:	24000000 	.word	0x24000000

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_InitTick+0x60>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e021      	b.n	80013a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_InitTick+0x64>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_InitTick+0x60>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fb0d 	bl	8002992 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001390:	f001 fad7 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x68>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2400000c 	.word	0x2400000c
 80013ac:	24000000 	.word	0x24000000
 80013b0:	24000008 	.word	0x24000008

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2400000c 	.word	0x2400000c
 80013d8:	24030fd8 	.word	0x24030fd8

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	24030fd8 	.word	0x24030fd8

080013f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3360      	adds	r3, #96	; 0x60
 800146e:	461a      	mov	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001490:	bf00      	nop
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	611a      	str	r2, [r3, #16]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b087      	sub	sp, #28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3360      	adds	r3, #96	; 0x60
 80014de:	461a      	mov	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	601a      	str	r2, [r3, #0]
  }
}
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800152a:	b480      	push	{r7}
 800152c:	b087      	sub	sp, #28
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	3330      	adds	r3, #48	; 0x30
 800153a:	461a      	mov	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f003 031f 	and.w	r3, r3, #31
 8001554:	211f      	movs	r1, #31
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	401a      	ands	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0e9b      	lsrs	r3, r3, #26
 8001562:	f003 011f 	and.w	r1, r3, #31
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001582:	b480      	push	{r7}
 8001584:	b087      	sub	sp, #28
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3314      	adds	r3, #20
 8001592:	461a      	mov	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	0e5b      	lsrs	r3, r3, #25
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	0d1b      	lsrs	r3, r3, #20
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2107      	movs	r1, #7
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	0d1b      	lsrs	r3, r3, #20
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0318 	and.w	r3, r3, #24
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <LL_ADC_SetChannelSingleDiff+0x44>)
 80015fc:	40d9      	lsrs	r1, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	400b      	ands	r3, r1
 8001602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001606:	431a      	orrs	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	000fffff 	.word	0x000fffff

08001620 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 031f 	and.w	r3, r3, #31
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001666:	4013      	ands	r3, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6093      	str	r3, [r2, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	5fffffc0 	.word	0x5fffffc0

0800167c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800168c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001690:	d101      	bne.n	8001696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	6fffffc0 	.word	0x6fffffc0

080016cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <LL_ADC_Enable+0x24>)
 8001702:	4013      	ands	r3, r2
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	7fffffc0 	.word	0x7fffffc0

0800171c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <LL_ADC_IsEnabled+0x18>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <LL_ADC_IsEnabled+0x1a>
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <LL_ADC_REG_StartConversion+0x24>)
 8001752:	4013      	ands	r3, r2
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	7fffffc0 	.word	0x7fffffc0

0800176c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d101      	bne.n	8001784 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d101      	bne.n	80017aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e138      	b.n	8001a44 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fb4d 	bl	8000e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff3f 	bl	800167c <LL_ADC_IsDeepPowerDownEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff25 	bl	8001658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff5a 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d114      	bne.n	8001848 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff3e 	bl	80016a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001828:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_ADC_Init+0x294>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	4a88      	ldr	r2, [pc, #544]	; (8001a50 <HAL_ADC_Init+0x298>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	3301      	adds	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800183a:	e002      	b.n	8001842 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3b01      	subs	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f9      	bne.n	800183c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff3d 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10d      	bne.n	8001874 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f043 0210 	orr.w	r2, r3, #16
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff77 	bl	800176c <LL_ADC_REG_IsConversionOngoing>
 800187e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 80d2 	bne.w	8001a32 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	f040 80ce 	bne.w	8001a32 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff36 	bl	800171c <LL_ADC_IsEnabled>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d110      	bne.n	80018d8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018b6:	4867      	ldr	r0, [pc, #412]	; (8001a54 <HAL_ADC_Init+0x29c>)
 80018b8:	f7ff ff30 	bl	800171c <LL_ADC_IsEnabled>
 80018bc:	4604      	mov	r4, r0
 80018be:	4866      	ldr	r0, [pc, #408]	; (8001a58 <HAL_ADC_Init+0x2a0>)
 80018c0:	f7ff ff2c 	bl	800171c <LL_ADC_IsEnabled>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4323      	orrs	r3, r4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4862      	ldr	r0, [pc, #392]	; (8001a5c <HAL_ADC_Init+0x2a4>)
 80018d4:	f7ff fd8e 	bl	80013f4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7d5b      	ldrb	r3, [r3, #21]
 80018dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80018e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7f1b      	ldrb	r3, [r3, #28]
 80018ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	3b01      	subs	r3, #1
 8001902:	045b      	lsls	r3, r3, #17
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	2b00      	cmp	r3, #0
 8001910:	d009      	beq.n	8001926 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_ADC_Init+0x2a8>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	69b9      	ldr	r1, [r7, #24]
 8001936:	430b      	orrs	r3, r1
 8001938:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff14 	bl	800176c <LL_ADC_REG_IsConversionOngoing>
 8001944:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff21 	bl	8001792 <LL_ADC_INJ_IsConversionOngoing>
 8001950:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d14a      	bne.n	80019ee <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d147      	bne.n	80019ee <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7d1b      	ldrb	r3, [r3, #20]
 8001962:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <HAL_ADC_Init+0x2ac>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	430b      	orrs	r3, r1
 800197e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11b      	bne.n	80019c2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_ADC_Init+0x2b0>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800199e:	3a01      	subs	r2, #1
 80019a0:	0411      	lsls	r1, r2, #16
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a6:	4311      	orrs	r1, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019b2:	430a      	orrs	r2, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	e007      	b.n	80019d2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fd41 	bl	8002470 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10c      	bne.n	8001a10 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f023 010f 	bic.w	r1, r3, #15
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0e:	e007      	b.n	8001a20 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 020f 	bic.w	r2, r2, #15
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	f023 0303 	bic.w	r3, r3, #3
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a30:	e007      	b.n	8001a42 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f043 0210 	orr.w	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3724      	adds	r7, #36	; 0x24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	24000000 	.word	0x24000000
 8001a50:	053e2d63 	.word	0x053e2d63
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40022100 	.word	0x40022100
 8001a5c:	40022300 	.word	0x40022300
 8001a60:	fff0c003 	.word	0xfff0c003
 8001a64:	ffffbffc 	.word	0xffffbffc
 8001a68:	fc00f81e 	.word	0xfc00f81e

08001a6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a74:	4856      	ldr	r0, [pc, #344]	; (8001bd0 <HAL_ADC_Start+0x164>)
 8001a76:	f7ff fdd3 	bl	8001620 <LL_ADC_GetMultimode>
 8001a7a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe73 	bl	800176c <LL_ADC_REG_IsConversionOngoing>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 809a 	bne.w	8001bc2 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_Start+0x30>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e095      	b.n	8001bc8 <HAL_ADC_Start+0x15c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fc67 	bl	8002378 <ADC_Enable>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 8081 	bne.w	8001bb8 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_ADC_Start+0x168>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <HAL_ADC_Start+0x16c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d002      	beq.n	8001ad6 <HAL_ADC_Start+0x6a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e000      	b.n	8001ad8 <HAL_ADC_Start+0x6c>
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_ADC_Start+0x170>)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d002      	beq.n	8001ae6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afe:	d106      	bne.n	8001b0e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f023 0206 	bic.w	r2, r3, #6
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b0c:	e002      	b.n	8001b14 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	221c      	movs	r2, #28
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2b      	ldr	r2, [pc, #172]	; (8001bd8 <HAL_ADC_Start+0x16c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d002      	beq.n	8001b34 <HAL_ADC_Start+0xc8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Start+0xca>
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_ADC_Start+0x170>)
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d008      	beq.n	8001b50 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d002      	beq.n	8001b50 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d114      	bne.n	8001b7a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fde6 	bl	8001744 <LL_ADC_REG_StartConversion>
 8001b78:	e025      	b.n	8001bc6 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_ADC_Start+0x16c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADC_Start+0x12a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_Start+0x12c>
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_ADC_Start+0x170>)
 8001b98:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00f      	beq.n	8001bc6 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
 8001bb6:	e006      	b.n	8001bc6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bc0:	e001      	b.n	8001bc6 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40022300 	.word	0x40022300
 8001bd4:	fffff0fe 	.word	0xfffff0fe
 8001bd8:	40022100 	.word	0x40022100
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bea:	4866      	ldr	r0, [pc, #408]	; (8001d84 <HAL_ADC_PollForConversion+0x1a4>)
 8001bec:	f7ff fd18 	bl	8001620 <LL_ADC_GetMultimode>
 8001bf0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d102      	bne.n	8001c00 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001bfa:	2308      	movs	r3, #8
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e02a      	b.n	8001c56 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d002      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	d111      	bne.n	8001c36 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f043 0220 	orr.w	r2, r3, #32
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0a4      	b.n	8001d7a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c30:	2304      	movs	r3, #4
 8001c32:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c34:	e00f      	b.n	8001c56 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c36:	4853      	ldr	r0, [pc, #332]	; (8001d84 <HAL_ADC_PollForConversion+0x1a4>)
 8001c38:	f7ff fd00 	bl	800163c <LL_ADC_GetMultiDMATransfer>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e093      	b.n	8001d7a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c52:	2304      	movs	r3, #4
 8001c54:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c56:	f7ff fbc1 	bl	80013dc <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c5c:	e021      	b.n	8001ca2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c64:	d01d      	beq.n	8001ca2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c66:	f7ff fbb9 	bl	80013dc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <HAL_ADC_PollForConversion+0x9c>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d112      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	f043 0204 	orr.w	r2, r3, #4
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e06b      	b.n	8001d7a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0d6      	beq.n	8001c5e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fc1f 	bl	8001504 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01c      	beq.n	8001d06 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7d5b      	ldrb	r3, [r3, #21]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d118      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_ADC_PollForConversion+0x1a8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d002      	beq.n	8001d16 <HAL_ADC_PollForConversion+0x136>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_PollForConversion+0x138>
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_ADC_PollForConversion+0x1ac>)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d008      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	d104      	bne.n	8001d3c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e00c      	b.n	8001d56 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_ADC_PollForConversion+0x1a8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_PollForConversion+0x16c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_PollForConversion+0x16e>
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_ADC_PollForConversion+0x1ac>)
 8001d4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d104      	bne.n	8001d66 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e008      	b.n	8001d78 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d103      	bne.n	8001d78 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	220c      	movs	r2, #12
 8001d76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022300 	.word	0x40022300
 8001d88:	40022100 	.word	0x40022100
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b0a1      	sub	sp, #132	; 0x84
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a9a      	ldr	r2, [pc, #616]	; (8002030 <HAL_ADC_ConfigChannel+0x284>)
 8001dc6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x2a>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e2bc      	b.n	8002350 <HAL_ADC_ConfigChannel+0x5a4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fcc2 	bl	800176c <LL_ADC_REG_IsConversionOngoing>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 82a1 	bne.w	8002332 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d108      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x62>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0e9b      	lsrs	r3, r3, #26
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	e016      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x90>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e1e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2201      	movs	r2, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	69d1      	ldr	r1, [r2, #28]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f7ff fb67 	bl	800152a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fc83 	bl	800176c <LL_ADC_REG_IsConversionOngoing>
 8001e66:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc90 	bl	8001792 <LL_ADC_INJ_IsConversionOngoing>
 8001e72:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 80a0 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 809c 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	461a      	mov	r2, r3
 8001e92:	f7ff fb76 	bl	8001582 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x110>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	e00a      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x126>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d027      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6919      	ldr	r1, [r3, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eea:	f7ff fab7 	bl	800145c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6919      	ldr	r1, [r3, #16]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	7e5b      	ldrb	r3, [r3, #25]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x158>
 8001efe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f02:	e000      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x15a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff fae1 	bl	80014ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6919      	ldr	r1, [r3, #16]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7e1b      	ldrb	r3, [r3, #24]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x176>
 8001f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x178>
 8001f22:	2300      	movs	r3, #0
 8001f24:	461a      	mov	r2, r3
 8001f26:	f7ff fab9 	bl	800149c <LL_ADC_SetDataRightShift>
 8001f2a:	e047      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f72:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	069b      	lsls	r3, r3, #26
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f96:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fbab 	bl	800171c <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 81bb 	bne.w	8002344 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f7ff fafc 	bl	80015d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_ADC_ConfigChannel+0x284>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f040 8130 	bne.w	800224c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x268>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b09      	cmp	r3, #9
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e01b      	b.n	800204c <HAL_ADC_ConfigChannel+0x2a0>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002024:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e005      	b.n	800203c <HAL_ADC_ConfigChannel+0x290>
 8002030:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2b09      	cmp	r3, #9
 8002044:	bf94      	ite	ls
 8002046:	2301      	movls	r3, #1
 8002048:	2300      	movhi	r3, #0
 800204a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204c:	2b00      	cmp	r3, #0
 800204e:	d079      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_ADC_ConfigChannel+0x2c0>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	3301      	adds	r3, #1
 8002064:	069b      	lsls	r3, r3, #26
 8002066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206a:	e015      	b.n	8002098 <HAL_ADC_ConfigChannel+0x2ec>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	069b      	lsls	r3, r3, #26
 8002094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x30c>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	3301      	adds	r3, #1
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	e017      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x33c>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	ea42 0103 	orr.w	r1, r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <HAL_ADC_ConfigChannel+0x362>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	e018      	b.n	8002140 <HAL_ADC_ConfigChannel+0x394>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002126:	2320      	movs	r3, #32
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	fab3 f383 	clz	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	430b      	orrs	r3, r1
 8002142:	e07e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x3b4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215e:	e015      	b.n	800218c <HAL_ADC_ConfigChannel+0x3e0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x400>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	e017      	b.n	80021dc <HAL_ADC_ConfigChannel+0x430>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	61bb      	str	r3, [r7, #24]
  return result;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x45c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	3b1e      	subs	r3, #30
 8002200:	051b      	lsls	r3, r3, #20
 8002202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002206:	e01b      	b.n	8002240 <HAL_ADC_ConfigChannel+0x494>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	60fb      	str	r3, [r7, #12]
  return result;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	051b      	lsls	r3, r3, #20
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff f99b 	bl	8001582 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da77      	bge.n	8002344 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002254:	4840      	ldr	r0, [pc, #256]	; (8002358 <HAL_ADC_ConfigChannel+0x5ac>)
 8002256:	f7ff f8f3 	bl	8001440 <LL_ADC_GetCommonPathInternalCh>
 800225a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800225c:	483f      	ldr	r0, [pc, #252]	; (800235c <HAL_ADC_ConfigChannel+0x5b0>)
 800225e:	f7ff fa5d 	bl	800171c <LL_ADC_IsEnabled>
 8002262:	4604      	mov	r4, r0
 8002264:	483e      	ldr	r0, [pc, #248]	; (8002360 <HAL_ADC_ConfigChannel+0x5b4>)
 8002266:	f7ff fa59 	bl	800171c <LL_ADC_IsEnabled>
 800226a:	4603      	mov	r3, r0
 800226c:	4323      	orrs	r3, r4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d155      	bne.n	800231e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_ADC_ConfigChannel+0x5b8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d122      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x516>
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11d      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_ADC_ConfigChannel+0x5b4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d159      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002296:	4619      	mov	r1, r3
 8002298:	482f      	ldr	r0, [pc, #188]	; (8002358 <HAL_ADC_ConfigChannel+0x5ac>)
 800229a:	f7ff f8be 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_ADC_ConfigChannel+0x5bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	4a31      	ldr	r2, [pc, #196]	; (800236c <HAL_ADC_ConfigChannel+0x5c0>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022b2:	e002      	b.n	80022ba <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022c0:	e040      	b.n	8002344 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <HAL_ADC_ConfigChannel+0x5c4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d111      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x544>
 80022cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10c      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_ADC_ConfigChannel+0x5b4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d131      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e6:	4619      	mov	r1, r3
 80022e8:	481b      	ldr	r0, [pc, #108]	; (8002358 <HAL_ADC_ConfigChannel+0x5ac>)
 80022ea:	f7ff f896 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ee:	e029      	b.n	8002344 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <HAL_ADC_ConfigChannel+0x5c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d124      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x598>
 80022fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11f      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_ADC_ConfigChannel+0x5b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800230e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002314:	4619      	mov	r1, r3
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <HAL_ADC_ConfigChannel+0x5ac>)
 8002318:	f7ff f87f 	bl	800141a <LL_ADC_SetCommonPathInternalCh>
 800231c:	e012      	b.n	8002344 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002330:	e008      	b.n	8002344 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800234c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002350:	4618      	mov	r0, r3
 8002352:	3784      	adds	r7, #132	; 0x84
 8002354:	46bd      	mov	sp, r7
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	40022300 	.word	0x40022300
 800235c:	40022000 	.word	0x40022000
 8002360:	40022100 	.word	0x40022100
 8002364:	cb840000 	.word	0xcb840000
 8002368:	24000000 	.word	0x24000000
 800236c:	053e2d63 	.word	0x053e2d63
 8002370:	bac04000 	.word	0xbac04000
 8002374:	cfb80000 	.word	0xcfb80000

08002378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f9c9 	bl	800171c <LL_ADC_IsEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d161      	bne.n	8002454 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <ADC_Enable+0xe8>)
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e04d      	b.n	8002456 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f998 	bl	80016f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023c4:	f7ff f80a 	bl	80013dc <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ca:	4826      	ldr	r0, [pc, #152]	; (8002464 <ADC_Enable+0xec>)
 80023cc:	f7ff f928 	bl	8001620 <LL_ADC_GetMultimode>
 80023d0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a24      	ldr	r2, [pc, #144]	; (8002468 <ADC_Enable+0xf0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d002      	beq.n	80023e2 <ADC_Enable+0x6a>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	e000      	b.n	80023e4 <ADC_Enable+0x6c>
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <ADC_Enable+0xf4>)
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d02c      	beq.n	8002446 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d130      	bne.n	8002454 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f2:	e028      	b.n	8002446 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff f98f 	bl	800171c <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f973 	bl	80016f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240e:	f7fe ffe5 	bl	80013dc <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d914      	bls.n	8002446 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d00d      	beq.n	8002446 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e007      	b.n	8002456 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1cf      	bne.n	80023f4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	8000003f 	.word	0x8000003f
 8002464:	40022300 	.word	0x40022300
 8002468:	40022100 	.word	0x40022100
 800246c:	40022000 	.word	0x40022000

08002470 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <ADC_ConfigureBoostMode+0x188>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002484:	f001 fbea 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8002488:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002492:	d010      	beq.n	80024b6 <ADC_ConfigureBoostMode+0x46>
 8002494:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002498:	d871      	bhi.n	800257e <ADC_ConfigureBoostMode+0x10e>
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d002      	beq.n	80024a6 <ADC_ConfigureBoostMode+0x36>
 80024a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024a4:	d16b      	bne.n	800257e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]
        break;
 80024b4:	e066      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	60fb      	str	r3, [r7, #12]
        break;
 80024bc:	e062      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024c2:	f002 fb33 	bl	8004b2c <HAL_RCCEx_GetPeriphCLKFreq>
 80024c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024d0:	d051      	beq.n	8002576 <ADC_ConfigureBoostMode+0x106>
 80024d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024d6:	d854      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 80024d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024dc:	d047      	beq.n	800256e <ADC_ConfigureBoostMode+0xfe>
 80024de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024e2:	d84e      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 80024e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024e8:	d03d      	beq.n	8002566 <ADC_ConfigureBoostMode+0xf6>
 80024ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024ee:	d848      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 80024f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f4:	d033      	beq.n	800255e <ADC_ConfigureBoostMode+0xee>
 80024f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024fa:	d842      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 80024fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002500:	d029      	beq.n	8002556 <ADC_ConfigureBoostMode+0xe6>
 8002502:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002506:	d83c      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 8002508:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800250c:	d01a      	beq.n	8002544 <ADC_ConfigureBoostMode+0xd4>
 800250e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002512:	d836      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 8002514:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002518:	d014      	beq.n	8002544 <ADC_ConfigureBoostMode+0xd4>
 800251a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800251e:	d830      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 8002520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002524:	d00e      	beq.n	8002544 <ADC_ConfigureBoostMode+0xd4>
 8002526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800252a:	d82a      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 800252c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002530:	d008      	beq.n	8002544 <ADC_ConfigureBoostMode+0xd4>
 8002532:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002536:	d824      	bhi.n	8002582 <ADC_ConfigureBoostMode+0x112>
 8002538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800253c:	d002      	beq.n	8002544 <ADC_ConfigureBoostMode+0xd4>
 800253e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002542:	d11e      	bne.n	8002582 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	60fb      	str	r3, [r7, #12]
        break;
 8002554:	e016      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
        break;
 800255c:	e012      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	60fb      	str	r3, [r7, #12]
        break;
 8002564:	e00e      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	60fb      	str	r3, [r7, #12]
        break;
 800256c:	e00a      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	09db      	lsrs	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]
        break;
 8002574:	e006      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	60fb      	str	r3, [r7, #12]
        break;
 800257c:	e002      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
        break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002582:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <ADC_ConfigureBoostMode+0x18c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d808      	bhi.n	80025a4 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025a0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025a2:	e025      	b.n	80025f0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <ADC_ConfigureBoostMode+0x190>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d80a      	bhi.n	80025c2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	e016      	b.n	80025f0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <ADC_ConfigureBoostMode+0x194>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d80a      	bhi.n	80025e0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	e007      	b.n	80025f0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40022300 	.word	0x40022300
 80025fc:	005f5e10 	.word	0x005f5e10
 8002600:	00bebc20 	.word	0x00bebc20
 8002604:	017d7840 	.word	0x017d7840

08002608 <LL_ADC_IsEnabled>:
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <LL_ADC_IsEnabled+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_ADC_IsEnabled+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_REG_IsConversionOngoing>:
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d101      	bne.n	8002646 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b09f      	sub	sp, #124	; 0x7c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800266e:	2302      	movs	r3, #2
 8002670:	e080      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a3d      	ldr	r2, [pc, #244]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d102      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	e001      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e05f      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ffb9 	bl	800262e <LL_ADC_REG_IsConversionOngoing>
 80026bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ffb3 	bl	800262e <LL_ADC_REG_IsConversionOngoing>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d141      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d13e      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80026d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f2:	4822      	ldr	r0, [pc, #136]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80026f4:	f7ff ff88 	bl	8002608 <LL_ADC_IsEnabled>
 80026f8:	4604      	mov	r4, r0
 80026fa:	4821      	ldr	r0, [pc, #132]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80026fc:	f7ff ff84 	bl	8002608 <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	4323      	orrs	r3, r4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d12e      	bne.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800270e:	4013      	ands	r3, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	6811      	ldr	r1, [r2, #0]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	430a      	orrs	r2, r1
 800271a:	431a      	orrs	r2, r3
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002720:	e021      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272e:	4813      	ldr	r0, [pc, #76]	; (800277c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002730:	f7ff ff6a 	bl	8002608 <LL_ADC_IsEnabled>
 8002734:	4604      	mov	r4, r0
 8002736:	4812      	ldr	r0, [pc, #72]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002738:	f7ff ff66 	bl	8002608 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d110      	bne.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800274a:	4013      	ands	r3, r2
 800274c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800274e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002750:	e009      	b.n	8002766 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002764:	e000      	b.n	8002768 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002766:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002770:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002774:	4618      	mov	r0, r3
 8002776:	377c      	adds	r7, #124	; 0x7c
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}
 800277c:	40022000 	.word	0x40022000
 8002780:	40022100 	.word	0x40022100
 8002784:	40022300 	.word	0x40022300
 8002788:	fffff0e0 	.word	0xfffff0e0

0800278c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	05fa0000 	.word	0x05fa0000

080027d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff29 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002950:	f7ff ff40 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 8002954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff ff90 	bl	8002880 <NVIC_EncodePriority>
 8002960:	4602      	mov	r2, r0
 8002962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff5f 	bl	800282c <__NVIC_SetPriority>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff33 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffa4 	bl	80028e8 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029ba:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_GPIO_Init+0x234>)
 80029bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029be:	e194      	b.n	8002cea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8186 	beq.w	8002ce4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d005      	beq.n	80029f0 <HAL_GPIO_Init+0x44>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d017      	beq.n	8002a8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2203      	movs	r2, #3
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d123      	bne.n	8002ae2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	08da      	lsrs	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3208      	adds	r2, #8
 8002aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80e0 	beq.w	8002ce4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b26:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_GPIO_Init+0x23c>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_GPIO_Init+0x240>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d052      	beq.n	8002c14 <HAL_GPIO_Init+0x268>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_GPIO_Init+0x244>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_GPIO_Init+0x22e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <HAL_GPIO_Init+0x248>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x22a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_GPIO_Init+0x24c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_GPIO_Init+0x250>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_GPIO_Init+0x254>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x258>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x21a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_GPIO_Init+0x25c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x216>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_GPIO_Init+0x260>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x212>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_GPIO_Init+0x264>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20e>
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	e02d      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bba:	230a      	movs	r3, #10
 8002bbc:	e02b      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e029      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e027      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e025      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e023      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e021      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e01f      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e01d      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01b      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bde:	bf00      	nop
 8002be0:	58000080 	.word	0x58000080
 8002be4:	58024400 	.word	0x58024400
 8002be8:	58000400 	.word	0x58000400
 8002bec:	58020000 	.word	0x58020000
 8002bf0:	58020400 	.word	0x58020400
 8002bf4:	58020800 	.word	0x58020800
 8002bf8:	58020c00 	.word	0x58020c00
 8002bfc:	58021000 	.word	0x58021000
 8002c00:	58021400 	.word	0x58021400
 8002c04:	58021800 	.word	0x58021800
 8002c08:	58021c00 	.word	0x58021c00
 8002c0c:	58022000 	.word	0x58022000
 8002c10:	58022400 	.word	0x58022400
 8002c14:	2300      	movs	r3, #0
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c26:	4938      	ldr	r1, [pc, #224]	; (8002d08 <HAL_GPIO_Init+0x35c>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f ae63 	bne.w	80029c0 <HAL_GPIO_Init+0x14>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	3724      	adds	r7, #36	; 0x24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	58000400 	.word	0x58000400

08002d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d00a      	beq.n	8002d6a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e040      	b.n	8002de8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e03e      	b.n	8002de8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d6a:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d72:	491f      	ldr	r1, [pc, #124]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d7a:	f7fe fb2f 	bl	80013dc <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d80:	e009      	b.n	8002d96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d82:	f7fe fb2b 	bl	80013dc <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d90:	d901      	bls.n	8002d96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e028      	b.n	8002de8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da2:	d1ee      	bne.n	8002d82 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b1e      	cmp	r3, #30
 8002da8:	d008      	beq.n	8002dbc <HAL_PWREx_ConfigSupply+0x7c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b2e      	cmp	r3, #46	; 0x2e
 8002dae:	d005      	beq.n	8002dbc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b1d      	cmp	r3, #29
 8002db4:	d002      	beq.n	8002dbc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b2d      	cmp	r3, #45	; 0x2d
 8002dba:	d114      	bne.n	8002de6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dbc:	f7fe fb0e 	bl	80013dc <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dc2:	e009      	b.n	8002dd8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dc4:	f7fe fb0a 	bl	80013dc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd2:	d901      	bls.n	8002dd8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d1ee      	bne.n	8002dc4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	58024800 	.word	0x58024800

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e3f4      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80b3 	beq.w	8002f7a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e14:	4b95      	ldr	r3, [pc, #596]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e1e:	4b93      	ldr	r3, [pc, #588]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d007      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46>
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_OscConfig+0x62>
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d10d      	bne.n	8002e56 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8098 	beq.w	8002f78 <HAL_RCC_OscConfig+0x184>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 8093 	bne.w	8002f78 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e3cc      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x7a>
 8002e60:	4b82      	ldr	r3, [pc, #520]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a81      	ldr	r2, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e058      	b.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d112      	bne.n	8002e9c <HAL_RCC_OscConfig+0xa8>
 8002e76:	4b7d      	ldr	r3, [pc, #500]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a7c      	ldr	r2, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a79      	ldr	r2, [pc, #484]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b77      	ldr	r3, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a76      	ldr	r2, [pc, #472]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e041      	b.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0xd8>
 8002ea6:	4b71      	ldr	r3, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b6e      	ldr	r3, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6d      	ldr	r2, [pc, #436]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002eb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e029      	b.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ed4:	d112      	bne.n	8002efc <HAL_RCC_OscConfig+0x108>
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a64      	ldr	r2, [pc, #400]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e011      	b.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002efc:	4b5b      	ldr	r3, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	4b58      	ldr	r3, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b55      	ldr	r3, [pc, #340]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a54      	ldr	r2, [pc, #336]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fa58 	bl	80013dc <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fa54 	bl	80013dc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e356      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f42:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x13c>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fa44 	bl	80013dc <HAL_GetTick>
 8002f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fa40 	bl	80013dc <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e342      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f6a:	4b40      	ldr	r3, [pc, #256]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x164>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 808d 	beq.w	80030a2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f88:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f92:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <HAL_RCC_OscConfig+0x1ba>
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	2b18      	cmp	r3, #24
 8002fa2:	d137      	bne.n	8003014 <HAL_RCC_OscConfig+0x220>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d132      	bne.n	8003014 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e314      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0219 	bic.w	r2, r3, #25
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4926      	ldr	r1, [pc, #152]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fd8:	f7fe fa00 	bl	80013dc <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7fe f9fc 	bl	80013dc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2fe      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	4917      	ldr	r1, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x278>)
 800300e:	4313      	orrs	r3, r2
 8003010:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003012:	e046      	b.n	80030a2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d029      	beq.n	8003070 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_RCC_OscConfig+0x278>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0219 	bic.w	r2, r3, #25
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4910      	ldr	r1, [pc, #64]	; (800306c <HAL_RCC_OscConfig+0x278>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe f9d5 	bl	80013dc <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe f9d1 	bl	80013dc <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e2d3      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_RCC_OscConfig+0x278>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	4902      	ldr	r1, [pc, #8]	; (800306c <HAL_RCC_OscConfig+0x278>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	e01b      	b.n	80030a2 <HAL_RCC_OscConfig+0x2ae>
 800306a:	bf00      	nop
 800306c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003070:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a96      	ldr	r2, [pc, #600]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f9ae 	bl	80013dc <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003084:	f7fe f9aa 	bl	80013dc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2ac      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003096:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d06a      	beq.n	8003184 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030b6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030b8:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d007      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2e0>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	d11b      	bne.n	8003102 <HAL_RCC_OscConfig+0x30e>
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x2f8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e281      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ec:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4975      	ldr	r1, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003100:	e040      	b.n	8003184 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800310a:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a70      	ldr	r2, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe f961 	bl	80013dc <HAL_GetTick>
 800311a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800311e:	f7fe f95d 	bl	80013dc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e25f      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	4961      	ldr	r1, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
 8003150:	e018      	b.n	8003184 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003152:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe f93d 	bl	80013dc <HAL_GetTick>
 8003162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003166:	f7fe f939 	bl	80013dc <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e23b      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d036      	beq.n	80031fe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d019      	beq.n	80031cc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	4a4c      	ldr	r2, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe f91a 	bl	80013dc <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe f916 	bl	80013dc <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e218      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x3b8>
 80031ca:	e018      	b.n	80031fe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	4a3f      	ldr	r2, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe f900 	bl	80013dc <HAL_GetTick>
 80031dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fe f8fc 	bl	80013dc <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e1fe      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d036      	beq.n	8003278 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800321e:	f7fe f8dd 	bl	80013dc <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003226:	f7fe f8d9 	bl	80013dc <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1db      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x432>
 8003244:	e018      	b.n	8003278 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800324c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003250:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003252:	f7fe f8c3 	bl	80013dc <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fe f8bf 	bl	80013dc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1c1      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80af 	beq.w	80033e4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_RCC_OscConfig+0x4e0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <HAL_RCC_OscConfig+0x4e0>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003292:	f7fe f8a3 	bl	80013dc <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fe f89f 	bl	80013dc <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a1      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x4e0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10b      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4e4>
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a02      	ldr	r2, [pc, #8]	; (80032d0 <HAL_RCC_OscConfig+0x4dc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e05b      	b.n	8003386 <HAL_RCC_OscConfig+0x592>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58024800 	.word	0x58024800
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <HAL_RCC_OscConfig+0x512>
 80032e0:	4b9d      	ldr	r3, [pc, #628]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a9c      	ldr	r2, [pc, #624]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	4b9a      	ldr	r3, [pc, #616]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a99      	ldr	r2, [pc, #612]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	4b97      	ldr	r3, [pc, #604]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a96      	ldr	r2, [pc, #600]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e03f      	b.n	8003386 <HAL_RCC_OscConfig+0x592>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d112      	bne.n	8003334 <HAL_RCC_OscConfig+0x540>
 800330e:	4b92      	ldr	r3, [pc, #584]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a91      	ldr	r2, [pc, #580]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
 800331a:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a8e      	ldr	r2, [pc, #568]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	4b8c      	ldr	r3, [pc, #560]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a8b      	ldr	r2, [pc, #556]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	e028      	b.n	8003386 <HAL_RCC_OscConfig+0x592>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b85      	cmp	r3, #133	; 0x85
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x56e>
 800333c:	4b86      	ldr	r3, [pc, #536]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a85      	ldr	r2, [pc, #532]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	4b80      	ldr	r3, [pc, #512]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a7f      	ldr	r2, [pc, #508]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	e011      	b.n	8003386 <HAL_RCC_OscConfig+0x592>
 8003362:	4b7d      	ldr	r3, [pc, #500]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	4a7c      	ldr	r2, [pc, #496]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003368:	f023 0301 	bic.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
 800336e:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a79      	ldr	r2, [pc, #484]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003374:	f023 0304 	bic.w	r3, r3, #4
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	4b77      	ldr	r3, [pc, #476]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a76      	ldr	r2, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d015      	beq.n	80033ba <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fe f825 	bl	80013dc <HAL_GetTick>
 8003392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003394:	e00a      	b.n	80033ac <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe f821 	bl	80013dc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e121      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ee      	beq.n	8003396 <HAL_RCC_OscConfig+0x5a2>
 80033b8:	e014      	b.n	80033e4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f80f 	bl	80013dc <HAL_GetTick>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe f80b 	bl	80013dc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e10b      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d8:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ee      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8100 	beq.w	80035ee <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f6:	2b18      	cmp	r3, #24
 80033f8:	f000 80bb 	beq.w	8003572 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b02      	cmp	r3, #2
 8003402:	f040 8095 	bne.w	8003530 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800340c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fd ffe3 	bl	80013dc <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341a:	f7fd ffdf 	bl	80013dc <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0e1      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800342c:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800343a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343c:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x768>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	430a      	orrs	r2, r1
 800344c:	4942      	ldr	r1, [pc, #264]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800344e:	4313      	orrs	r3, r2
 8003450:	628b      	str	r3, [r1, #40]	; 0x28
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	3b01      	subs	r3, #1
 8003458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	3b01      	subs	r3, #1
 8003462:	025b      	lsls	r3, r3, #9
 8003464:	b29b      	uxth	r3, r3
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	3b01      	subs	r3, #1
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	3b01      	subs	r3, #1
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003482:	4935      	ldr	r1, [pc, #212]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003488:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a32      	ldr	r2, [pc, #200]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003498:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_RCC_OscConfig+0x76c>)
 800349a:	4013      	ands	r3, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	492d      	ldr	r1, [pc, #180]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	f023 020c 	bic.w	r2, r3, #12
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	4928      	ldr	r1, [pc, #160]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f023 0202 	bic.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4924      	ldr	r1, [pc, #144]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d8:	4b1f      	ldr	r3, [pc, #124]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fc:	4b16      	ldr	r3, [pc, #88]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fd ff68 	bl	80013dc <HAL_GetTick>
 800350c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fd ff64 	bl	80013dc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e066      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0x71c>
 800352e:	e05e      	b.n	80035ee <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_RCC_OscConfig+0x764>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd ff4e 	bl	80013dc <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003542:	e00f      	b.n	8003564 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fd ff4a 	bl	80013dc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d908      	bls.n	8003564 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04c      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
 8003556:	bf00      	nop
 8003558:	58024400 	.word	0x58024400
 800355c:	fffffc0c 	.word	0xfffffc0c
 8003560:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x804>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e9      	bne.n	8003544 <HAL_RCC_OscConfig+0x750>
 8003570:	e03d      	b.n	80035ee <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x804>)
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <HAL_RCC_OscConfig+0x804>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2b01      	cmp	r3, #1
 8003584:	d031      	beq.n	80035ea <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d12a      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d122      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d11a      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0a5b      	lsrs	r3, r3, #9
 80035b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d111      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0e1b      	lsrs	r3, r3, #24
 80035dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3730      	adds	r7, #48	; 0x30
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58024400 	.word	0x58024400

080035fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e19c      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b8a      	ldr	r3, [pc, #552]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d910      	bls.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b87      	ldr	r3, [pc, #540]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 020f 	bic.w	r2, r3, #15
 8003626:	4985      	ldr	r1, [pc, #532]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b83      	ldr	r3, [pc, #524]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e184      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	4b7b      	ldr	r3, [pc, #492]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003658:	429a      	cmp	r2, r3
 800365a:	d908      	bls.n	800366e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800365c:	4b78      	ldr	r3, [pc, #480]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4975      	ldr	r1, [pc, #468]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800366a:	4313      	orrs	r3, r2
 800366c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003686:	429a      	cmp	r2, r3
 8003688:	d908      	bls.n	800369c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	496a      	ldr	r1, [pc, #424]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d908      	bls.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036b8:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	495e      	ldr	r1, [pc, #376]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d908      	bls.n	80036f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036e6:	4b56      	ldr	r3, [pc, #344]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4953      	ldr	r1, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	429a      	cmp	r2, r3
 8003712:	d908      	bls.n	8003726 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f023 020f 	bic.w	r2, r3, #15
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4947      	ldr	r1, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003722:	4313      	orrs	r3, r2
 8003724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d055      	beq.n	80037de <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4940      	ldr	r1, [pc, #256]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003740:	4313      	orrs	r3, r2
 8003742:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374c:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d121      	bne.n	800379c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0f6      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d107      	bne.n	8003774 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d115      	bne.n	800379c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0ea      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800377c:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0de      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d6      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f023 0207 	bic.w	r2, r3, #7
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4925      	ldr	r1, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fd fe15 	bl	80013dc <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b6:	f7fd fe11 	bl	80013dc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0be      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	429a      	cmp	r2, r3
 80037dc:	d1eb      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d010      	beq.n	800380c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d208      	bcs.n	800380c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x244>)
 8003808:	4313      	orrs	r3, r2
 800380a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d214      	bcs.n	8003844 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f023 020f 	bic.w	r2, r3, #15
 8003822:	4906      	ldr	r1, [pc, #24]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_RCC_ClockConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e086      	b.n	800394a <HAL_RCC_ClockConfig+0x34e>
 800383c:	52002000 	.word	0x52002000
 8003840:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385c:	429a      	cmp	r2, r3
 800385e:	d208      	bcs.n	8003872 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003860:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4939      	ldr	r1, [pc, #228]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 800386e:	4313      	orrs	r3, r2
 8003870:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d010      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388a:	429a      	cmp	r2, r3
 800388c:	d208      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	492e      	ldr	r1, [pc, #184]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 800389c:	4313      	orrs	r3, r2
 800389e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d010      	beq.n	80038ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d208      	bcs.n	80038ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038bc:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	4922      	ldr	r1, [pc, #136]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d010      	beq.n	80038fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d208      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	4917      	ldr	r1, [pc, #92]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80038fc:	f000 f834 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	0a1b      	lsrs	r3, r3, #8
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	4912      	ldr	r1, [pc, #72]	; (8003958 <HAL_RCC_ClockConfig+0x35c>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
 8003918:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_RCC_ClockConfig+0x358>)
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <HAL_RCC_ClockConfig+0x35c>)
 8003924:	5cd3      	ldrb	r3, [r2, r3]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_RCC_ClockConfig+0x360>)
 8003932:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003934:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCC_ClockConfig+0x364>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x368>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fd02 	bl	8001348 <HAL_InitTick>
 8003944:	4603      	mov	r3, r0
 8003946:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	080093d8 	.word	0x080093d8
 800395c:	24000004 	.word	0x24000004
 8003960:	24000000 	.word	0x24000000
 8003964:	24000008 	.word	0x24000008

08003968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396e:	4bb3      	ldr	r3, [pc, #716]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003976:	2b18      	cmp	r3, #24
 8003978:	f200 8155 	bhi.w	8003c26 <HAL_RCC_GetSysClockFreq+0x2be>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <HAL_RCC_GetSysClockFreq+0x1c>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039e9 	.word	0x080039e9
 8003988:	08003c27 	.word	0x08003c27
 800398c:	08003c27 	.word	0x08003c27
 8003990:	08003c27 	.word	0x08003c27
 8003994:	08003c27 	.word	0x08003c27
 8003998:	08003c27 	.word	0x08003c27
 800399c:	08003c27 	.word	0x08003c27
 80039a0:	08003c27 	.word	0x08003c27
 80039a4:	08003a0f 	.word	0x08003a0f
 80039a8:	08003c27 	.word	0x08003c27
 80039ac:	08003c27 	.word	0x08003c27
 80039b0:	08003c27 	.word	0x08003c27
 80039b4:	08003c27 	.word	0x08003c27
 80039b8:	08003c27 	.word	0x08003c27
 80039bc:	08003c27 	.word	0x08003c27
 80039c0:	08003c27 	.word	0x08003c27
 80039c4:	08003a15 	.word	0x08003a15
 80039c8:	08003c27 	.word	0x08003c27
 80039cc:	08003c27 	.word	0x08003c27
 80039d0:	08003c27 	.word	0x08003c27
 80039d4:	08003c27 	.word	0x08003c27
 80039d8:	08003c27 	.word	0x08003c27
 80039dc:	08003c27 	.word	0x08003c27
 80039e0:	08003c27 	.word	0x08003c27
 80039e4:	08003a1b 	.word	0x08003a1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039e8:	4b94      	ldr	r3, [pc, #592]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039f4:	4b91      	ldr	r3, [pc, #580]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	4a90      	ldr	r2, [pc, #576]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a06:	e111      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a08:	4b8d      	ldr	r3, [pc, #564]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a0a:	61bb      	str	r3, [r7, #24]
    break;
 8003a0c:	e10e      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a10:	61bb      	str	r3, [r7, #24]
    break;
 8003a12:	e10b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a14:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a16:	61bb      	str	r3, [r7, #24]
    break;
 8003a18:	e108      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a1a:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a24:	4b85      	ldr	r3, [pc, #532]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a30:	4b82      	ldr	r3, [pc, #520]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a3a:	4b80      	ldr	r3, [pc, #512]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	08db      	lsrs	r3, r3, #3
 8003a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80e1 	beq.w	8003c20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f000 8083 	beq.w	8003b6c <HAL_RCC_GetSysClockFreq+0x204>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f200 80a1 	bhi.w	8003bb0 <HAL_RCC_GetSysClockFreq+0x248>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x114>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d056      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a7a:	e099      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a7c:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a88:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	4a6b      	ldr	r2, [pc, #428]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b62      	ldr	r3, [pc, #392]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ae2:	e087      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	e065      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	e043      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bae:	e021      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	0a5b      	lsrs	r3, r3, #9
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	3301      	adds	r3, #1
 8003c00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c18:	ee17 3a90 	vmov	r3, s15
 8003c1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c1e:	e005      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61bb      	str	r3, [r7, #24]
    break;
 8003c24:	e002      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c28:	61bb      	str	r3, [r7, #24]
    break;
 8003c2a:	bf00      	nop
  }

  return sysclockfreq;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	; 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
 8003c40:	03d09000 	.word	0x03d09000
 8003c44:	003d0900 	.word	0x003d0900
 8003c48:	007a1200 	.word	0x007a1200
 8003c4c:	46000000 	.word	0x46000000
 8003c50:	4c742400 	.word	0x4c742400
 8003c54:	4a742400 	.word	0x4a742400
 8003c58:	4af42400 	.word	0x4af42400

08003c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003c62:	f7ff fe81 	bl	8003968 <HAL_RCC_GetSysClockFreq>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCC_GetHCLKFreq+0x50>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_RCC_GetHCLKFreq+0x50>)
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c8a:	5cd3      	ldrb	r3, [r2, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	080093d8 	.word	0x080093d8
 8003cb4:	24000004 	.word	0x24000004
 8003cb8:	24000000 	.word	0x24000000

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003cc0:	f7ff ffcc 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	080093d8 	.word	0x080093d8

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003cec:	f7ff ffb6 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4904      	ldr	r1, [pc, #16]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	080093d8 	.word	0x080093d8

08003d14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d20:	2300      	movs	r3, #0
 8003d22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d03f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d38:	d02a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d3e:	d824      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d44:	d018      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d4a:	d81e      	bhi.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d007      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d56:	e018      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b9f      	ldr	r3, [pc, #636]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4a9e      	ldr	r2, [pc, #632]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d64:	e015      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 ff1b 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d76:	e00c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 ffc4 	bl	8005d0c <RCCEx_PLL3_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d98:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da4:	498c      	ldr	r1, [pc, #560]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	650b      	str	r3, [r1, #80]	; 0x50
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d03d      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d826      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003def 	.word	0x08003def
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b7d      	ldr	r3, [pc, #500]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a7c      	ldr	r2, [pc, #496]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fed7 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 ff80 	bl	8005d0c <RCCEx_PLL3_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
      break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e20:	4b6d      	ldr	r3, [pc, #436]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e24:	f023 0207 	bic.w	r2, r3, #7
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	496a      	ldr	r1, [pc, #424]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	650b      	str	r3, [r1, #80]	; 0x50
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e4c:	d031      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e4e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e52:	d82b      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d02d      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	d825      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e60:	2bc0      	cmp	r3, #192	; 0xc0
 8003e62:	d02a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e64:	2bc0      	cmp	r3, #192	; 0xc0
 8003e66:	d821      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d016      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e6c:	2b80      	cmp	r3, #128	; 0x80
 8003e6e:	d81d      	bhi.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d007      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003e78:	e018      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7a:	4b57      	ldr	r3, [pc, #348]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e86:	e019      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fe8a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003e98:	e010      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3324      	adds	r3, #36	; 0x24
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 ff33 	bl	8005d0c <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eaa:	e007      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb0:	e004      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003ec2:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4942      	ldr	r1, [pc, #264]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04f      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003eee:	d036      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003ef0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003ef4:	d830      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efa:	d032      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f00:	d82a      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f06:	d02e      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f0c:	d824      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d018      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d81e      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f22:	d007      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003f24:	e018      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f26:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f32:	e019      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fe34 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f44:	e010      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3324      	adds	r3, #36	; 0x24
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fedd 	bl	8005d0c <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f56:	e007      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	e004      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f72:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	4917      	ldr	r1, [pc, #92]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	650b      	str	r3, [r1, #80]	; 0x50
 8003f80:	e001      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d034      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f96:	2b30      	cmp	r3, #48	; 0x30
 8003f98:	d01c      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003f9a:	2b30      	cmp	r3, #48	; 0x30
 8003f9c:	d817      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d813      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d10f      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fba:	e010      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fdf0 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fcc:	e007      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003fd4:	bf00      	nop
 8003fd6:	e002      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003fd8:	58024400 	.word	0x58024400
      break;
 8003fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003fe4:	4b9b      	ldr	r3, [pc, #620]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	4998      	ldr	r1, [pc, #608]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d047      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004010:	d030      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004016:	d82a      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004018:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800401c:	d02c      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800401e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004022:	d824      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004028:	d018      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800402a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402e:	d81e      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004038:	d007      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800403a:	e018      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403c:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	4a84      	ldr	r2, [pc, #528]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004048:	e017      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fda9 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800405a:	e00e      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3324      	adds	r3, #36	; 0x24
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fe52 	bl	8005d0c <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800406c:	e005      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
      break;
 8004072:	e002      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004080:	4b74      	ldr	r3, [pc, #464]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	4971      	ldr	r1, [pc, #452]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800408e:	4313      	orrs	r3, r2
 8004090:	650b      	str	r3, [r1, #80]	; 0x50
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d049      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ac:	d02e      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b2:	d828      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040b8:	d02a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040be:	d822      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c4:	d026      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80040c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ca:	d81c      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d0:	d010      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d6:	d816      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d111      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fd5d 	bl	8005ba8 <RCCEx_PLL2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040f2:	e012      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 fe06 	bl	8005d0c <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004104:	e009      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
      break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004120:	4b4c      	ldr	r3, [pc, #304]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412c:	4949      	ldr	r1, [pc, #292]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800412e:	4313      	orrs	r3, r2
 8004130:	650b      	str	r3, [r1, #80]	; 0x50
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d053      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800414a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800414e:	d034      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004150:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004154:	d82e      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415a:	d030      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800415c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004160:	d828      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d02c      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416c:	d822      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800416e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004172:	d028      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004174:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004178:	d81c      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800417a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417e:	d010      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004184:	d816      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01f      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418e:	d111      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f001 fd06 	bl	8005ba8 <RCCEx_PLL2_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041a0:	e014      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3324      	adds	r3, #36	; 0x24
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fdaf 	bl	8005d0c <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041b2:	e00b      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]
      break;
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ba:	bf00      	nop
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041e0:	491c      	ldr	r1, [pc, #112]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	658b      	str	r3, [r1, #88]	; 0x58
 80041e6:	e001      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d031      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004200:	d00e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004206:	d814      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800420c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004210:	d10f      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f001 fcbe 	bl	8005ba8 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004230:	e003      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
      break;
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	4901      	ldr	r1, [pc, #4]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800424e:	4313      	orrs	r3, r2
 8004250:	650b      	str	r3, [r1, #80]	; 0x50
 8004252:	e003      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004254:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d032      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	2b03      	cmp	r3, #3
 800426e:	d81b      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042af 	.word	0x080042af
 800427c:	08004289 	.word	0x08004289
 8004280:	08004297 	.word	0x08004297
 8004284:	080042af 	.word	0x080042af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004288:	4bb2      	ldr	r3, [pc, #712]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4ab1      	ldr	r2, [pc, #708]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800428e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f001 fc83 	bl	8005ba8 <RCCEx_PLL2_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042b6:	4ba7      	ldr	r3, [pc, #668]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	49a4      	ldr	r1, [pc, #656]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042c8:	e001      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8086 	beq.w	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042dc:	4b9e      	ldr	r3, [pc, #632]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9d      	ldr	r2, [pc, #628]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80042e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e8:	f7fd f878 	bl	80013dc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ee:	e009      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fd f874 	bl	80013dc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d902      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	75fb      	strb	r3, [r7, #23]
        break;
 8004302:	e005      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004304:	4b94      	ldr	r3, [pc, #592]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ef      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d166      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004316:	4b8f      	ldr	r3, [pc, #572]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004320:	4053      	eors	r3, r2
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432a:	4b8a      	ldr	r3, [pc, #552]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b87      	ldr	r3, [pc, #540]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a86      	ldr	r2, [pc, #536]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a83      	ldr	r2, [pc, #524]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800434c:	4a81      	ldr	r2, [pc, #516]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435c:	d115      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fd f83d 	bl	80013dc <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004364:	e00b      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd f839 	bl	80013dc <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d902      	bls.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	75fb      	strb	r3, [r7, #23]
            break;
 800437c:	e005      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437e:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ed      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d126      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d10d      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80043a0:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ae:	0919      	lsrs	r1, r3, #4
 80043b0:	4b6a      	ldr	r3, [pc, #424]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	4967      	ldr	r1, [pc, #412]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
 80043ba:	e005      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80043bc:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	4a64      	ldr	r2, [pc, #400]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043c6:	6113      	str	r3, [r2, #16]
 80043c8:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	495f      	ldr	r1, [pc, #380]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	670b      	str	r3, [r1, #112]	; 0x70
 80043dc:	e004      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	75bb      	strb	r3, [r7, #22]
 80043e2:	e001      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d07f      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043fa:	2b28      	cmp	r3, #40	; 0x28
 80043fc:	d866      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	080044d3 	.word	0x080044d3
 8004408:	080044cd 	.word	0x080044cd
 800440c:	080044cd 	.word	0x080044cd
 8004410:	080044cd 	.word	0x080044cd
 8004414:	080044cd 	.word	0x080044cd
 8004418:	080044cd 	.word	0x080044cd
 800441c:	080044cd 	.word	0x080044cd
 8004420:	080044cd 	.word	0x080044cd
 8004424:	080044a9 	.word	0x080044a9
 8004428:	080044cd 	.word	0x080044cd
 800442c:	080044cd 	.word	0x080044cd
 8004430:	080044cd 	.word	0x080044cd
 8004434:	080044cd 	.word	0x080044cd
 8004438:	080044cd 	.word	0x080044cd
 800443c:	080044cd 	.word	0x080044cd
 8004440:	080044cd 	.word	0x080044cd
 8004444:	080044bb 	.word	0x080044bb
 8004448:	080044cd 	.word	0x080044cd
 800444c:	080044cd 	.word	0x080044cd
 8004450:	080044cd 	.word	0x080044cd
 8004454:	080044cd 	.word	0x080044cd
 8004458:	080044cd 	.word	0x080044cd
 800445c:	080044cd 	.word	0x080044cd
 8004460:	080044cd 	.word	0x080044cd
 8004464:	080044d3 	.word	0x080044d3
 8004468:	080044cd 	.word	0x080044cd
 800446c:	080044cd 	.word	0x080044cd
 8004470:	080044cd 	.word	0x080044cd
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044cd 	.word	0x080044cd
 800447c:	080044cd 	.word	0x080044cd
 8004480:	080044cd 	.word	0x080044cd
 8004484:	080044d3 	.word	0x080044d3
 8004488:	080044cd 	.word	0x080044cd
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044cd 	.word	0x080044cd
 8004494:	080044cd 	.word	0x080044cd
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080044cd 	.word	0x080044cd
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044d3 	.word	0x080044d3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fb7a 	bl	8005ba8 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044b8:	e00c      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2101      	movs	r1, #1
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fc23 	bl	8005d0c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e8:	491a      	ldr	r1, [pc, #104]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	654b      	str	r3, [r1, #84]	; 0x54
 80044ee:	e001      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004504:	2b05      	cmp	r3, #5
 8004506:	d821      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004561 	.word	0x08004561
 8004514:	08004529 	.word	0x08004529
 8004518:	0800453b 	.word	0x0800453b
 800451c:	08004561 	.word	0x08004561
 8004520:	08004561 	.word	0x08004561
 8004524:	08004561 	.word	0x08004561
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2101      	movs	r1, #1
 800452e:	4618      	mov	r0, r3
 8004530:	f001 fb3a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004538:	e013      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3324      	adds	r3, #36	; 0x24
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fbe3 	bl	8005d0c <RCCEx_PLL3_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800454a:	e00a      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e007      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
 8004558:	58024800 	.word	0x58024800
 800455c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004568:	4b9f      	ldr	r3, [pc, #636]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	f023 0207 	bic.w	r2, r3, #7
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004574:	499c      	ldr	r1, [pc, #624]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	654b      	str	r3, [r1, #84]	; 0x54
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d039      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004592:	2b05      	cmp	r3, #5
 8004594:	d820      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045df 	.word	0x080045df
 80045a0:	080045b5 	.word	0x080045b5
 80045a4:	080045c7 	.word	0x080045c7
 80045a8:	080045df 	.word	0x080045df
 80045ac:	080045df 	.word	0x080045df
 80045b0:	080045df 	.word	0x080045df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 faf4 	bl	8005ba8 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045c4:	e00c      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3324      	adds	r3, #36	; 0x24
 80045ca:	2101      	movs	r1, #1
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 fb9d 	bl	8005d0c <RCCEx_PLL3_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045d6:	e003      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
      break;
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80045de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e6:	4b80      	ldr	r3, [pc, #512]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f023 0207 	bic.w	r2, r3, #7
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f4:	497c      	ldr	r1, [pc, #496]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	658b      	str	r3, [r1, #88]	; 0x58
 80045fa:	e001      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d04b      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004616:	d02e      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461c:	d828      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d02a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d822      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800462a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800462e:	d026      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004630:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004634:	d81c      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463a:	d010      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800463c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004640:	d816      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800464a:	d111      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 faa8 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800465c:	e012      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	2102      	movs	r1, #2
 8004664:	4618      	mov	r0, r3
 8004666:	f001 fb51 	bl	8005d0c <RCCEx_PLL3_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800466e:	e009      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004684:	7dfb      	ldrb	r3, [r7, #23]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b57      	ldr	r3, [pc, #348]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	4953      	ldr	r1, [pc, #332]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	654b      	str	r3, [r1, #84]	; 0x54
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d04b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046ba:	d02e      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80046bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046c0:	d828      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	d02a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046cc:	d822      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d2:	d026      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80046d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d8:	d81c      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046de:	d010      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80046e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e4:	d816      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01d      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ee:	d111      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fa56 	bl	8005ba8 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004700:	e012      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3324      	adds	r3, #36	; 0x24
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f001 faff 	bl	8005d0c <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004712:	e009      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800471a:	bf00      	nop
 800471c:	e004      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800471e:	bf00      	nop
 8004720:	e002      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800473c:	492a      	ldr	r1, [pc, #168]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	658b      	str	r3, [r1, #88]	; 0x58
 8004742:	e001      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d04d      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800475a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800475e:	d02e      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004760:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004764:	d828      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476a:	d02a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004770:	d822      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004772:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004776:	d026      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004778:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800477c:	d81c      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800477e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004782:	d010      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004788:	d816      	bhi.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01d      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800478e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004792:	d111      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fa04 	bl	8005ba8 <RCCEx_PLL2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047a4:	e012      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3324      	adds	r3, #36	; 0x24
 80047aa:	2102      	movs	r1, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 faad 	bl	8005d0c <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047b6:	e009      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	75fb      	strb	r3, [r7, #23]
      break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047be:	bf00      	nop
 80047c0:	e004      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047e0:	4901      	ldr	r1, [pc, #4]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	658b      	str	r3, [r1, #88]	; 0x58
 80047e6:	e003      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80047e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
 80047ee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d10a      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fa7c 	bl	8005d0c <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800481e:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	4988      	ldr	r1, [pc, #544]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004848:	d10a      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3324      	adds	r3, #36	; 0x24
 800484e:	2102      	movs	r1, #2
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fa5b 	bl	8005d0c <RCCEx_PLL3_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004860:	4b7b      	ldr	r3, [pc, #492]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486e:	4978      	ldr	r1, [pc, #480]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d034      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800488a:	d01d      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800488c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004890:	d817      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800489c:	e011      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 f97f 	bl	8005ba8 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048ae:	e00c      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3324      	adds	r3, #36	; 0x24
 80048b4:	2102      	movs	r1, #2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 fa28 	bl	8005d0c <RCCEx_PLL3_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048c0:	e003      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
      break;
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80048c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d0:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048de:	495c      	ldr	r1, [pc, #368]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	658b      	str	r3, [r1, #88]	; 0x58
 80048e4:	e001      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d033      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004900:	d01c      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004902:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004906:	d816      	bhi.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800490e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004912:	d007      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004914:	e00f      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004916:	4b4e      	ldr	r3, [pc, #312]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800491c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004920:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004922:	e00c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3324      	adds	r3, #36	; 0x24
 8004928:	2101      	movs	r1, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f001 f9ee 	bl	8005d0c <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
      break;
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800493c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493e:	7dfb      	ldrb	r3, [r7, #23]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004944:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004952:	493f      	ldr	r1, [pc, #252]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	654b      	str	r3, [r1, #84]	; 0x54
 8004958:	e001      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d029      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d007      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004978:	e00f      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497a:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004986:	e00b      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f90a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
      break;
 800499e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049a6:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4927      	ldr	r1, [pc, #156]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049b8:	e001      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3324      	adds	r3, #36	; 0x24
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f99b 	bl	8005d0c <RCCEx_PLL3_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d035      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d017      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80049f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fc:	d811      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80049fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a02:	d013      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a08:	d80b      	bhi.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a12:	d106      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a20:	e007      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
      break;
 8004a26:	e004      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a28:	bf00      	nop
 8004a2a:	e002      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a2c:	bf00      	nop
 8004a2e:	e000      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	4902      	ldr	r1, [pc, #8]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a4e:	bf00      	nop
 8004a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a64:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a70:	492d      	ldr	r1, [pc, #180]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	4926      	ldr	r1, [pc, #152]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004aa0:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	491e      	ldr	r1, [pc, #120]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	6113      	str	r3, [r2, #16]
 8004aca:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ad4:	4914      	ldr	r1, [pc, #80]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da08      	bge.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aee:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4906      	ldr	r1, [pc, #24]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b14:	7dbb      	ldrb	r3, [r7, #22]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	58024400 	.word	0x58024400

08004b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b090      	sub	sp, #64	; 0x40
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	f040 8089 	bne.w	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004b3e:	4b91      	ldr	r3, [pc, #580]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d87d      	bhi.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b69 	.word	0x08004b69
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004c45 	.word	0x08004c45
 8004b64:	08004bd5 	.word	0x08004bd5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b68:	4b86      	ldr	r3, [pc, #536]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b74:	d107      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fec2 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b84:	e3f4      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b8a:	e3f1      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b8c:	4b7d      	ldr	r3, [pc, #500]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b98:	d107      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b9a:	f107 0318 	add.w	r3, r7, #24
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fc08 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ba8:	e3e2      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bae:	e3df      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bb0:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbc:	d107      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fd4a 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bcc:	e3d0      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bd2:	e3cd      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bd4:	4b6b      	ldr	r3, [pc, #428]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bde:	4b69      	ldr	r3, [pc, #420]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bf0:	4b64      	ldr	r3, [pc, #400]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c02:	e01e      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c04:	4b5f      	ldr	r3, [pc, #380]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c10:	d106      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c18:	d102      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c1a:	4b5c      	ldr	r3, [pc, #368]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c1e:	e010      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c20:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c34:	d102      	bne.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c36:	4b56      	ldr	r3, [pc, #344]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3a:	e002      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c40:	e396      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c42:	e395      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c48:	e392      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c4e:	e38f      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c56:	f040 809f 	bne.w	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	d04d      	beq.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c72:	f200 8084 	bhi.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	2bc0      	cmp	r3, #192	; 0xc0
 8004c7a:	d07d      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c80:	d87d      	bhi.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d02d      	beq.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d877      	bhi.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d012      	beq.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004c9a:	e070      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca8:	d107      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fe28 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb8:	e35a      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cbe:	e357      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cc0:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ccc:	d107      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cce:	f107 0318 	add.w	r3, r7, #24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb6e 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cdc:	e348      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce2:	e345      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fcb0 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d00:	e336      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d06:	e333      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d36:	e01e      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d38:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d44:	d106      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4c:	d102      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d4e:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d52:	e010      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d60:	d106      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d68:	d102      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d74:	e2fc      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d76:	e2fb      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d7c:	e2f8      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d82:	e2f5      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d84:	58024400 	.word	0x58024400
 8004d88:	03d09000 	.word	0x03d09000
 8004d8c:	003d0900 	.word	0x003d0900
 8004d90:	007a1200 	.word	0x007a1200
 8004d94:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9e:	f040 809c 	bne.w	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004da2:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004daa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d054      	beq.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dba:	f200 808b 	bhi.w	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dc4:	f000 8083 	beq.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dce:	f200 8081 	bhi.w	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d02f      	beq.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d878      	bhi.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d012      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004df0:	e070      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004df2:	4b89      	ldr	r3, [pc, #548]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fd7d 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e0e:	e2af      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e14:	e2ac      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e16:	4b80      	ldr	r3, [pc, #512]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e22:	d107      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e24:	f107 0318 	add.w	r3, r7, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fac3 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e32:	e29d      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e38:	e29a      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e3a:	4b77      	ldr	r3, [pc, #476]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e46:	d107      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fc05 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e56:	e28b      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5c:	e288      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e5e:	4b6e      	ldr	r3, [pc, #440]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e66:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e68:	4b6b      	ldr	r3, [pc, #428]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e7a:	4b67      	ldr	r3, [pc, #412]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	4a65      	ldr	r2, [pc, #404]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004e86:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8c:	e01e      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e8e:	4b62      	ldr	r3, [pc, #392]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea2:	d102      	bne.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ea4:	4b5e      	ldr	r3, [pc, #376]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea8:	e010      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004eaa:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb6:	d106      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebe:	d102      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ec0:	4b58      	ldr	r3, [pc, #352]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	e002      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004eca:	e251      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004ecc:	e250      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ece:	4b56      	ldr	r3, [pc, #344]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed2:	e24d      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed8:	e24a      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	f040 80a7 	bne.w	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004eec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef4:	d055      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efc:	f200 8096 	bhi.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f06:	f000 8084 	beq.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f10:	f200 808c 	bhi.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1a:	d030      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f22:	f200 8083 	bhi.w	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d012      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004f34:	e07a      	b.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f36:	4b38      	ldr	r3, [pc, #224]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f42:	d107      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fcdb 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f52:	e20d      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f58:	e20a      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f66:	d107      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f68:	f107 0318 	add.w	r3, r7, #24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa21 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f76:	e1fb      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f7c:	e1f8      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f8a:	d107      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f8c:	f107 030c 	add.w	r3, r7, #12
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb63 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f9a:	e1e9      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa0:	e1e6      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004fa2:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd0:	e01e      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fde:	d106      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe6:	d102      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	e010      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ffa:	d106      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005002:	d102      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	e002      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800500e:	e1af      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005010:	e1ae      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005016:	e1ab      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005018:	58024400 	.word	0x58024400
 800501c:	03d09000 	.word	0x03d09000
 8005020:	003d0900 	.word	0x003d0900
 8005024:	007a1200 	.word	0x007a1200
 8005028:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005030:	e19e      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005038:	d173      	bne.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800503a:	4b9d      	ldr	r3, [pc, #628]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800503c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800504a:	d02f      	beq.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005052:	d863      	bhi.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d012      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005062:	e05b      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005070:	d107      	bne.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f99c 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005080:	e176      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005086:	e173      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005088:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005094:	d107      	bne.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fade 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80050a4:	e164      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050aa:	e161      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80050ac:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050b6:	4b7e      	ldr	r3, [pc, #504]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050c8:	4b79      	ldr	r3, [pc, #484]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a78      	ldr	r2, [pc, #480]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050da:	e01e      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050dc:	4b74      	ldr	r3, [pc, #464]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e8:	d106      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80050ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f0:	d102      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050f2:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f6:	e010      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050f8:	4b6d      	ldr	r3, [pc, #436]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005104:	d106      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510c:	d102      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800510e:	4b6b      	ldr	r3, [pc, #428]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	e002      	b.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005118:	e12a      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800511a:	e129      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005120:	e126      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005128:	d133      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d012      	beq.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005142:	e023      	b.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005144:	4b5a      	ldr	r3, [pc, #360]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005150:	d107      	bne.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fbd4 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005160:	e106      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005166:	e103      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005168:	4b51      	ldr	r3, [pc, #324]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005174:	d107      	bne.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f91a 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005184:	e0f4      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800518a:	e0f1      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005190:	e0ee      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005198:	f040 809b 	bne.w	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800519c:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80051a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051ac:	f000 808b 	beq.w	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80051b6:	f200 8089 	bhi.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c0:	d06c      	beq.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c8:	f200 8080 	bhi.w	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d056      	beq.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d877      	bhi.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051e2:	d03b      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051ea:	d86f      	bhi.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f2:	d021      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051fa:	d867      	bhi.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80051fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800520a:	e05f      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800520c:	f000 f8bc 	bl	8005388 <HAL_RCCEx_GetD3PCLK1Freq>
 8005210:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005212:	e0ad      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005214:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800521c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005220:	d107      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005222:	f107 0318 	add.w	r3, r7, #24
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f8c4 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005230:	e09e      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005236:	e09b      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005238:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005244:	d107      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005246:	f107 030c 	add.w	r3, r7, #12
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa06 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005254:	e08c      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800525a:	e089      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b04      	cmp	r3, #4
 8005266:	d109      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800527a:	e079      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005280:	e076      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528e:	d102      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005294:	e06c      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800529a:	e069      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800529c:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052a8:	d10a      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052ae:	e05f      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	003d0900 	.word	0x003d0900
 80052bc:	007a1200 	.word	0x007a1200
          frequency = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c4:	e054      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052c6:	4b2d      	ldr	r3, [pc, #180]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ca:	e051      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d0:	e04e      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d8:	d148      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d02a      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f2:	d838      	bhi.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005300:	d00d      	beq.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005302:	e030      	b.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005310:	d102      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005316:	e02b      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800531c:	e028      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800532a:	d107      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800532c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fae7 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800533a:	e019      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005340:	e016      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800534a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800534e:	d107      	bne.n	8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005350:	f107 0318 	add.w	r3, r7, #24
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f82d 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800535e:	e007      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005364:	e004      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536a:	e001      	b.n	8005370 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005372:	4618      	mov	r0, r3
 8005374:	3740      	adds	r7, #64	; 0x40
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	00bb8000 	.word	0x00bb8000
 8005380:	58024400 	.word	0x58024400
 8005384:	007a1200 	.word	0x007a1200

08005388 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800538c:	f7fe fc66 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	; (80053b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	58024400 	.word	0x58024400
 80053b0:	080093d8 	.word	0x080093d8

080053b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053bc:	4ba1      	ldr	r3, [pc, #644]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80053c6:	4b9f      	ldr	r3, [pc, #636]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	0b1b      	lsrs	r3, r3, #12
 80053cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053d2:	4b9c      	ldr	r3, [pc, #624]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80053de:	4b99      	ldr	r3, [pc, #612]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8111 	beq.w	8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	f000 8083 	beq.w	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b02      	cmp	r3, #2
 800540e:	f200 80a1 	bhi.w	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d056      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800541e:	e099      	b.n	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005420:	4b88      	ldr	r3, [pc, #544]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02d      	beq.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800542c:	4b85      	ldr	r3, [pc, #532]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	4a84      	ldr	r2, [pc, #528]	; (8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b7b      	ldr	r3, [pc, #492]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005486:	e087      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b6a      	ldr	r3, [pc, #424]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ca:	e065      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b59      	ldr	r3, [pc, #356]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800550e:	e043      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b48      	ldr	r3, [pc, #288]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a45 	vldr	s11, [pc, #276]	; 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005552:	e021      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b37      	ldr	r3, [pc, #220]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005596:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005598:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055be:	ee17 2a90 	vmov	r2, s15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80055c6:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ec:	ee17 2a90 	vmov	r2, s15
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800560a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800560e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561a:	ee17 2a90 	vmov	r2, s15
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
}
 8005636:	bf00      	nop
 8005638:	3724      	adds	r7, #36	; 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
 8005648:	03d09000 	.word	0x03d09000
 800564c:	46000000 	.word	0x46000000
 8005650:	4c742400 	.word	0x4c742400
 8005654:	4a742400 	.word	0x4a742400
 8005658:	4af42400 	.word	0x4af42400

0800565c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	; 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005664:	4ba1      	ldr	r3, [pc, #644]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800566e:	4b9f      	ldr	r3, [pc, #636]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	0d1b      	lsrs	r3, r3, #20
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800567a:	4b9c      	ldr	r3, [pc, #624]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005686:	4b99      	ldr	r3, [pc, #612]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	08db      	lsrs	r3, r3, #3
 800568c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8111 	beq.w	80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	f000 8083 	beq.w	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	f200 80a1 	bhi.w	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d056      	beq.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056c6:	e099      	b.n	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02d      	beq.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056d4:	4b85      	ldr	r3, [pc, #532]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	08db      	lsrs	r3, r3, #3
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	4a84      	ldr	r2, [pc, #528]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800572e:	e087      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b6a      	ldr	r3, [pc, #424]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005772:	e065      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b59      	ldr	r3, [pc, #356]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057b6:	e043      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b48      	ldr	r3, [pc, #288]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057fa:	e021      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800583e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	0a5b      	lsrs	r3, r3, #9
 8005846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800585a:	edd7 6a07 	vldr	s13, [r7, #28]
 800585e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005866:	ee17 2a90 	vmov	r2, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800586e:	4b1f      	ldr	r3, [pc, #124]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005888:	edd7 6a07 	vldr	s13, [r7, #28]
 800588c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005894:	ee17 2a90 	vmov	r2, s15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	0e1b      	lsrs	r3, r3, #24
 80058a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c2:	ee17 2a90 	vmov	r2, s15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
}
 80058de:	bf00      	nop
 80058e0:	3724      	adds	r7, #36	; 0x24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58024400 	.word	0x58024400
 80058f0:	03d09000 	.word	0x03d09000
 80058f4:	46000000 	.word	0x46000000
 80058f8:	4c742400 	.word	0x4c742400
 80058fc:	4a742400 	.word	0x4a742400
 8005900:	4af42400 	.word	0x4af42400

08005904 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	; 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590c:	4ba0      	ldr	r3, [pc, #640]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005916:	4b9e      	ldr	r3, [pc, #632]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005920:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005922:	4b9b      	ldr	r3, [pc, #620]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800592c:	4b98      	ldr	r3, [pc, #608]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8111 	beq.w	8005b72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b02      	cmp	r3, #2
 8005954:	f000 8083 	beq.w	8005a5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b02      	cmp	r3, #2
 800595c:	f200 80a1 	bhi.w	8005aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d056      	beq.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800596c:	e099      	b.n	8005aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596e:	4b88      	ldr	r3, [pc, #544]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02d      	beq.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800597a:	4b85      	ldr	r3, [pc, #532]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	4a83      	ldr	r2, [pc, #524]	; (8005b94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a4:	4b7a      	ldr	r3, [pc, #488]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059d4:	e087      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80059e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a18:	e065      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2c:	4b58      	ldr	r3, [pc, #352]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a5c:	e043      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a70:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aa0:	e021      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aea:	0a5b      	lsrs	r3, r3, #9
 8005aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0c:	ee17 2a90 	vmov	r2, s15
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3a:	ee17 2a90 	vmov	r2, s15
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	0e1b      	lsrs	r3, r3, #24
 8005b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4c:	ee07 3a90 	vmov	s15, r3
 8005b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b68:	ee17 2a90 	vmov	r2, s15
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b70:	e008      	b.n	8005b84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	3724      	adds	r7, #36	; 0x24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	58024400 	.word	0x58024400
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4c742400 	.word	0x4c742400
 8005ba0:	4a742400 	.word	0x4a742400
 8005ba4:	4af42400 	.word	0x4af42400

08005ba8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bb6:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d101      	bne.n	8005bc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e099      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4e      	ldr	r2, [pc, #312]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fb fc03 	bl	80013dc <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd8:	e008      	b.n	8005bec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005bda:	f7fb fbff 	bl	80013dc <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e086      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bec:	4b45      	ldr	r3, [pc, #276]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f0      	bne.n	8005bda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bf8:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	493f      	ldr	r1, [pc, #252]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c3c:	4931      	ldr	r1, [pc, #196]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	492d      	ldr	r1, [pc, #180]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f023 0220 	bic.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4928      	ldr	r1, [pc, #160]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c66:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <RCCEx_PLL2_Config+0x160>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	69d2      	ldr	r2, [r2, #28]
 8005c7e:	00d2      	lsls	r2, r2, #3
 8005c80:	4920      	ldr	r1, [pc, #128]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c86:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ca4:	e00f      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cac:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb8:	e005      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fb83 	bl	80013dc <HAL_GetTick>
 8005cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cd8:	e008      	b.n	8005cec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cda:	f7fb fb7f 	bl	80013dc <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	ffff0007 	.word	0xffff0007

08005d0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d1a:	4b53      	ldr	r3, [pc, #332]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d101      	bne.n	8005d2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e099      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d2a:	4b4f      	ldr	r3, [pc, #316]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4e      	ldr	r2, [pc, #312]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d36:	f7fb fb51 	bl	80013dc <HAL_GetTick>
 8005d3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d3c:	e008      	b.n	8005d50 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d3e:	f7fb fb4d 	bl	80013dc <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e086      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d50:	4b45      	ldr	r3, [pc, #276]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d5c:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d60:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	493f      	ldr	r1, [pc, #252]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	025b      	lsls	r3, r3, #9
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005da0:	4931      	ldr	r1, [pc, #196]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005da6:	4b30      	ldr	r3, [pc, #192]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	492d      	ldr	r1, [pc, #180]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005db8:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	4928      	ldr	r1, [pc, #160]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dca:	4b27      	ldr	r3, [pc, #156]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	4a26      	ldr	r2, [pc, #152]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <RCCEx_PLL3_Config+0x160>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	69d2      	ldr	r2, [r2, #28]
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4920      	ldr	r1, [pc, #128]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dea:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e08:	e00f      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e10:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e1c:	e005      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	4a11      	ldr	r2, [pc, #68]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e36:	f7fb fad1 	bl	80013dc <HAL_GetTick>
 8005e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e3c:	e008      	b.n	8005e50 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e3e:	f7fb facd 	bl	80013dc <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	ffff0007 	.word	0xffff0007

08005e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e049      	b.n	8005f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7fb f862 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 fb8c 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d001      	beq.n	8005f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e04c      	b.n	8005fd2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <HAL_TIM_Base_Start+0xc0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d022      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d01d      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <HAL_TIM_Base_Start+0xc4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d018      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <HAL_TIM_Base_Start+0xc8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <HAL_TIM_Base_Start+0xcc>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00e      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_TIM_Base_Start+0xd0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <HAL_TIM_Base_Start+0xd4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_TIM_Base_Start+0x70>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_TIM_Base_Start+0xd8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d115      	bne.n	8005fbc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	4b19      	ldr	r3, [pc, #100]	; (8005ffc <HAL_TIM_Base_Start+0xdc>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b06      	cmp	r3, #6
 8005fa0:	d015      	beq.n	8005fce <HAL_TIM_Base_Start+0xae>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d011      	beq.n	8005fce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	e008      	b.n	8005fce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e000      	b.n	8005fd0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40001800 	.word	0x40001800
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	00010007 	.word	0x00010007

08006000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e054      	b.n	80060c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d022      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d01d      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d018      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_TIM_Base_Start_IT+0xdc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00e      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d115      	bne.n	80060ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	4b19      	ldr	r3, [pc, #100]	; (80060ec <HAL_TIM_Base_Start_IT+0xec>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b06      	cmp	r3, #6
 8006090:	d015      	beq.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d011      	beq.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	e008      	b.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e000      	b.n	80060c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40001800 	.word	0x40001800
 80060e8:	40014000 	.word	0x40014000
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <HAL_TIM_Base_Stop_IT+0x48>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	f240 4344 	movw	r3, #1092	; 0x444
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_TIM_Base_Stop_IT+0x48>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b082      	sub	sp, #8
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b02      	cmp	r3, #2
 8006162:	d122      	bne.n	80061aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d11b      	bne.n	80061aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0202 	mvn.w	r2, #2
 800617a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f9fd 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 8006196:	e005      	b.n	80061a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9ef 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa00 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d122      	bne.n	80061fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d11b      	bne.n	80061fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f06f 0204 	mvn.w	r2, #4
 80061ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9d3 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 80061ea:	e005      	b.n	80061f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9c5 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9d6 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d122      	bne.n	8006252 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d11b      	bne.n	8006252 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0208 	mvn.w	r2, #8
 8006222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2204      	movs	r2, #4
 8006228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9a9 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 800623e:	e005      	b.n	800624c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f99b 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f9ac 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b10      	cmp	r3, #16
 800625e:	d122      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b10      	cmp	r3, #16
 800626c:	d11b      	bne.n	80062a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f06f 0210 	mvn.w	r2, #16
 8006276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2208      	movs	r2, #8
 800627c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f97f 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 8006292:	e005      	b.n	80062a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f971 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f982 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10e      	bne.n	80062d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f06f 0201 	mvn.w	r2, #1
 80062ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fa fc2b 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d10e      	bne.n	80062fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b80      	cmp	r3, #128	; 0x80
 80062ec:	d107      	bne.n	80062fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fb37 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fb2a 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b40      	cmp	r3, #64	; 0x40
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f930 	bl	80065b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b20      	cmp	r3, #32
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0220 	mvn.w	r2, #32
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 faea 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIM_ConfigClockSource+0x1c>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0dc      	b.n	8006562 <HAL_TIM_ConfigClockSource+0x1d6>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4b6a      	ldr	r3, [pc, #424]	; (800656c <HAL_TIM_ConfigClockSource+0x1e0>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a64      	ldr	r2, [pc, #400]	; (8006570 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	f000 80a9 	beq.w	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 80063e4:	4a62      	ldr	r2, [pc, #392]	; (8006570 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	f200 80ae 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 80063ec:	4a61      	ldr	r2, [pc, #388]	; (8006574 <HAL_TIM_ConfigClockSource+0x1e8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f000 80a1 	beq.w	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 80063f4:	4a5f      	ldr	r2, [pc, #380]	; (8006574 <HAL_TIM_ConfigClockSource+0x1e8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f200 80a6 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 80063fc:	4a5e      	ldr	r2, [pc, #376]	; (8006578 <HAL_TIM_ConfigClockSource+0x1ec>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f000 8099 	beq.w	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 8006404:	4a5c      	ldr	r2, [pc, #368]	; (8006578 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f200 809e 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 800640c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006410:	f000 8091 	beq.w	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 8006414:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006418:	f200 8096 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 800641c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006420:	f000 8089 	beq.w	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 8006424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006428:	f200 808e 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 800642c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006430:	d03e      	beq.n	80064b0 <HAL_TIM_ConfigClockSource+0x124>
 8006432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006436:	f200 8087 	bhi.w	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 800643a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643e:	f000 8086 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1c2>
 8006442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006446:	d87f      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006448:	2b70      	cmp	r3, #112	; 0x70
 800644a:	d01a      	beq.n	8006482 <HAL_TIM_ConfigClockSource+0xf6>
 800644c:	2b70      	cmp	r3, #112	; 0x70
 800644e:	d87b      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006450:	2b60      	cmp	r3, #96	; 0x60
 8006452:	d050      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x16a>
 8006454:	2b60      	cmp	r3, #96	; 0x60
 8006456:	d877      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006458:	2b50      	cmp	r3, #80	; 0x50
 800645a:	d03c      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x14a>
 800645c:	2b50      	cmp	r3, #80	; 0x50
 800645e:	d873      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d058      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x18a>
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d86f      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006468:	2b30      	cmp	r3, #48	; 0x30
 800646a:	d064      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 800646c:	2b30      	cmp	r3, #48	; 0x30
 800646e:	d86b      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006470:	2b20      	cmp	r3, #32
 8006472:	d060      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 8006474:	2b20      	cmp	r3, #32
 8006476:	d867      	bhi.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d05c      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 800647c:	2b10      	cmp	r3, #16
 800647e:	d05a      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x1aa>
 8006480:	e062      	b.n	8006548 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6899      	ldr	r1, [r3, #8]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f000 f9b3 	bl	80067fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	609a      	str	r2, [r3, #8]
      break;
 80064ae:	e04f      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6899      	ldr	r1, [r3, #8]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f000 f99c 	bl	80067fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d2:	609a      	str	r2, [r3, #8]
      break;
 80064d4:	e03c      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f000 f90c 	bl	8006700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2150      	movs	r1, #80	; 0x50
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f966 	bl	80067c0 <TIM_ITRx_SetConfig>
      break;
 80064f4:	e02c      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6859      	ldr	r1, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 f92b 	bl	800675e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2160      	movs	r1, #96	; 0x60
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f956 	bl	80067c0 <TIM_ITRx_SetConfig>
      break;
 8006514:	e01c      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	461a      	mov	r2, r3
 8006524:	f000 f8ec 	bl	8006700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f946 	bl	80067c0 <TIM_ITRx_SetConfig>
      break;
 8006534:	e00c      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f000 f93d 	bl	80067c0 <TIM_ITRx_SetConfig>
      break;
 8006546:	e003      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
      break;
 800654c:	e000      	b.n	8006550 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800654e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	ffceff88 	.word	0xffceff88
 8006570:	00100040 	.word	0x00100040
 8006574:	00100030 	.word	0x00100030
 8006578:	00100020 	.word	0x00100020

0800657c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a40      	ldr	r2, [pc, #256]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ea:	d00f      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3d      	ldr	r2, [pc, #244]	; (80066e4 <TIM_Base_SetConfig+0x118>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <TIM_Base_SetConfig+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3b      	ldr	r2, [pc, #236]	; (80066ec <TIM_Base_SetConfig+0x120>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3a      	ldr	r2, [pc, #232]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2f      	ldr	r2, [pc, #188]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01f      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d01b      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <TIM_Base_SetConfig+0x118>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d017      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <TIM_Base_SetConfig+0x11c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <TIM_Base_SetConfig+0x120>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a28      	ldr	r2, [pc, #160]	; (80066f4 <TIM_Base_SetConfig+0x128>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <TIM_Base_SetConfig+0x12c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_Base_SetConfig+0x9a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a26      	ldr	r2, [pc, #152]	; (80066fc <TIM_Base_SetConfig+0x130>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d108      	bne.n	8006678 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <TIM_Base_SetConfig+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a0f      	ldr	r2, [pc, #60]	; (80066fc <TIM_Base_SetConfig+0x130>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d103      	bne.n	80066cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	615a      	str	r2, [r3, #20]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 030a 	bic.w	r3, r3, #10
 800673c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675e:	b480      	push	{r7}
 8006760:	b087      	sub	sp, #28
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f023 0210 	bic.w	r2, r3, #16
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800679a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <TIM_ITRx_SetConfig+0x38>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	f043 0307 	orr.w	r3, r3, #7
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	609a      	str	r2, [r3, #8]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	ffcfff8f 	.word	0xffcfff8f

080067fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	021a      	lsls	r2, r3, #8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	431a      	orrs	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006850:	2302      	movs	r3, #2
 8006852:	e06d      	b.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a30      	ldr	r2, [pc, #192]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800688e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d01d      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a16      	ldr	r2, [pc, #88]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10c      	bne.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40001800 	.word	0x40001800
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e042      	b.n	8006a2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fa fb11 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2224      	movs	r2, #36	; 0x24
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f8c2 	bl	8006b60 <UART_SetConfig>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e022      	b.n	8006a2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 ff22 	bl	8007838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 ffa9 	bl	800797c <UART_CheckIdleState>
 8006a2a:	4603      	mov	r3, r0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	f040 8083 	bne.w	8006b56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_UART_Transmit+0x28>
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e07b      	b.n	8006b58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Transmit+0x3a>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e074      	b.n	8006b58 <HAL_UART_Transmit+0x124>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2221      	movs	r2, #33	; 0x21
 8006a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fa fca9 	bl	80013dc <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d108      	bne.n	8006ab8 <HAL_UART_Transmit+0x84>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e003      	b.n	8006ac0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006ac8:	e02c      	b.n	8006b24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 ff9c 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e039      	b.n	8006b58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	3302      	adds	r3, #2
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	e007      	b.n	8006b12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1cc      	bne.n	8006aca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2140      	movs	r1, #64	; 0x40
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 ff69 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e006      	b.n	8006b58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e000      	b.n	8006b58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b56:	2302      	movs	r3, #2
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b64:	b092      	sub	sp, #72	; 0x48
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4bbe      	ldr	r3, [pc, #760]	; (8006e88 <UART_SetConfig+0x328>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4ab3      	ldr	r2, [pc, #716]	; (8006e8c <UART_SetConfig+0x32c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	4baf      	ldr	r3, [pc, #700]	; (8006e90 <UART_SetConfig+0x330>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f023 010f 	bic.w	r1, r3, #15
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4aa6      	ldr	r2, [pc, #664]	; (8006e94 <UART_SetConfig+0x334>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d177      	bne.n	8006cf0 <UART_SetConfig+0x190>
 8006c00:	4ba5      	ldr	r3, [pc, #660]	; (8006e98 <UART_SetConfig+0x338>)
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c08:	2b28      	cmp	r3, #40	; 0x28
 8006c0a:	d86d      	bhi.n	8006ce8 <UART_SetConfig+0x188>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0xb4>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006cb9 	.word	0x08006cb9
 8006c18:	08006ce9 	.word	0x08006ce9
 8006c1c:	08006ce9 	.word	0x08006ce9
 8006c20:	08006ce9 	.word	0x08006ce9
 8006c24:	08006ce9 	.word	0x08006ce9
 8006c28:	08006ce9 	.word	0x08006ce9
 8006c2c:	08006ce9 	.word	0x08006ce9
 8006c30:	08006ce9 	.word	0x08006ce9
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006ce9 	.word	0x08006ce9
 8006c3c:	08006ce9 	.word	0x08006ce9
 8006c40:	08006ce9 	.word	0x08006ce9
 8006c44:	08006ce9 	.word	0x08006ce9
 8006c48:	08006ce9 	.word	0x08006ce9
 8006c4c:	08006ce9 	.word	0x08006ce9
 8006c50:	08006ce9 	.word	0x08006ce9
 8006c54:	08006cc9 	.word	0x08006cc9
 8006c58:	08006ce9 	.word	0x08006ce9
 8006c5c:	08006ce9 	.word	0x08006ce9
 8006c60:	08006ce9 	.word	0x08006ce9
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006ce9 	.word	0x08006ce9
 8006c6c:	08006ce9 	.word	0x08006ce9
 8006c70:	08006ce9 	.word	0x08006ce9
 8006c74:	08006cd1 	.word	0x08006cd1
 8006c78:	08006ce9 	.word	0x08006ce9
 8006c7c:	08006ce9 	.word	0x08006ce9
 8006c80:	08006ce9 	.word	0x08006ce9
 8006c84:	08006ce9 	.word	0x08006ce9
 8006c88:	08006ce9 	.word	0x08006ce9
 8006c8c:	08006ce9 	.word	0x08006ce9
 8006c90:	08006ce9 	.word	0x08006ce9
 8006c94:	08006cd9 	.word	0x08006cd9
 8006c98:	08006ce9 	.word	0x08006ce9
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006ce9 	.word	0x08006ce9
 8006ca4:	08006ce9 	.word	0x08006ce9
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006ce9 	.word	0x08006ce9
 8006cb0:	08006ce9 	.word	0x08006ce9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cbe:	e326      	b.n	800730e <UART_SetConfig+0x7ae>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc6:	e322      	b.n	800730e <UART_SetConfig+0x7ae>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cce:	e31e      	b.n	800730e <UART_SetConfig+0x7ae>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd6:	e31a      	b.n	800730e <UART_SetConfig+0x7ae>
 8006cd8:	2320      	movs	r3, #32
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cde:	e316      	b.n	800730e <UART_SetConfig+0x7ae>
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce6:	e312      	b.n	800730e <UART_SetConfig+0x7ae>
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cee:	e30e      	b.n	800730e <UART_SetConfig+0x7ae>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a69      	ldr	r2, [pc, #420]	; (8006e9c <UART_SetConfig+0x33c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d130      	bne.n	8006d5c <UART_SetConfig+0x1fc>
 8006cfa:	4b67      	ldr	r3, [pc, #412]	; (8006e98 <UART_SetConfig+0x338>)
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b05      	cmp	r3, #5
 8006d04:	d826      	bhi.n	8006d54 <UART_SetConfig+0x1f4>
 8006d06:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x1ac>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d25 	.word	0x08006d25
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d35 	.word	0x08006d35
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2a:	e2f0      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d32:	e2ec      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d3a:	e2e8      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d42:	e2e4      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d44:	2320      	movs	r3, #32
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4a:	e2e0      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d52:	e2dc      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e2d8      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a4f      	ldr	r2, [pc, #316]	; (8006ea0 <UART_SetConfig+0x340>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d130      	bne.n	8006dc8 <UART_SetConfig+0x268>
 8006d66:	4b4c      	ldr	r3, [pc, #304]	; (8006e98 <UART_SetConfig+0x338>)
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d826      	bhi.n	8006dc0 <UART_SetConfig+0x260>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x218>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e2ba      	b.n	800730e <UART_SetConfig+0x7ae>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9e:	e2b6      	b.n	800730e <UART_SetConfig+0x7ae>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e2b2      	b.n	800730e <UART_SetConfig+0x7ae>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e2ae      	b.n	800730e <UART_SetConfig+0x7ae>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e2aa      	b.n	800730e <UART_SetConfig+0x7ae>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dbe:	e2a6      	b.n	800730e <UART_SetConfig+0x7ae>
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e2a2      	b.n	800730e <UART_SetConfig+0x7ae>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a35      	ldr	r2, [pc, #212]	; (8006ea4 <UART_SetConfig+0x344>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d130      	bne.n	8006e34 <UART_SetConfig+0x2d4>
 8006dd2:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <UART_SetConfig+0x338>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	f003 0307 	and.w	r3, r3, #7
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d826      	bhi.n	8006e2c <UART_SetConfig+0x2cc>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x284>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e284      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e280      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e27c      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e278      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e1c:	2320      	movs	r3, #32
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e274      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e24:	2340      	movs	r3, #64	; 0x40
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2a:	e270      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e26c      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <UART_SetConfig+0x348>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d142      	bne.n	8006ec4 <UART_SetConfig+0x364>
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <UART_SetConfig+0x338>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d838      	bhi.n	8006ebc <UART_SetConfig+0x35c>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x2f0>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006eb5 	.word	0x08006eb5
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6e:	e24e      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e76:	e24a      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e246      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e242      	b.n	800730e <UART_SetConfig+0x7ae>
 8006e88:	cfff69f3 	.word	0xcfff69f3
 8006e8c:	58000c00 	.word	0x58000c00
 8006e90:	11fff4ff 	.word	0x11fff4ff
 8006e94:	40011000 	.word	0x40011000
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	40004400 	.word	0x40004400
 8006ea0:	40004800 	.word	0x40004800
 8006ea4:	40004c00 	.word	0x40004c00
 8006ea8:	40005000 	.word	0x40005000
 8006eac:	2320      	movs	r3, #32
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e22c      	b.n	800730e <UART_SetConfig+0x7ae>
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e228      	b.n	800730e <UART_SetConfig+0x7ae>
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e224      	b.n	800730e <UART_SetConfig+0x7ae>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4ab1      	ldr	r2, [pc, #708]	; (8007190 <UART_SetConfig+0x630>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d176      	bne.n	8006fbc <UART_SetConfig+0x45c>
 8006ece:	4bb1      	ldr	r3, [pc, #708]	; (8007194 <UART_SetConfig+0x634>)
 8006ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed6:	2b28      	cmp	r3, #40	; 0x28
 8006ed8:	d86c      	bhi.n	8006fb4 <UART_SetConfig+0x454>
 8006eda:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <UART_SetConfig+0x380>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f85 	.word	0x08006f85
 8006ee4:	08006fb5 	.word	0x08006fb5
 8006ee8:	08006fb5 	.word	0x08006fb5
 8006eec:	08006fb5 	.word	0x08006fb5
 8006ef0:	08006fb5 	.word	0x08006fb5
 8006ef4:	08006fb5 	.word	0x08006fb5
 8006ef8:	08006fb5 	.word	0x08006fb5
 8006efc:	08006fb5 	.word	0x08006fb5
 8006f00:	08006f8d 	.word	0x08006f8d
 8006f04:	08006fb5 	.word	0x08006fb5
 8006f08:	08006fb5 	.word	0x08006fb5
 8006f0c:	08006fb5 	.word	0x08006fb5
 8006f10:	08006fb5 	.word	0x08006fb5
 8006f14:	08006fb5 	.word	0x08006fb5
 8006f18:	08006fb5 	.word	0x08006fb5
 8006f1c:	08006fb5 	.word	0x08006fb5
 8006f20:	08006f95 	.word	0x08006f95
 8006f24:	08006fb5 	.word	0x08006fb5
 8006f28:	08006fb5 	.word	0x08006fb5
 8006f2c:	08006fb5 	.word	0x08006fb5
 8006f30:	08006fb5 	.word	0x08006fb5
 8006f34:	08006fb5 	.word	0x08006fb5
 8006f38:	08006fb5 	.word	0x08006fb5
 8006f3c:	08006fb5 	.word	0x08006fb5
 8006f40:	08006f9d 	.word	0x08006f9d
 8006f44:	08006fb5 	.word	0x08006fb5
 8006f48:	08006fb5 	.word	0x08006fb5
 8006f4c:	08006fb5 	.word	0x08006fb5
 8006f50:	08006fb5 	.word	0x08006fb5
 8006f54:	08006fb5 	.word	0x08006fb5
 8006f58:	08006fb5 	.word	0x08006fb5
 8006f5c:	08006fb5 	.word	0x08006fb5
 8006f60:	08006fa5 	.word	0x08006fa5
 8006f64:	08006fb5 	.word	0x08006fb5
 8006f68:	08006fb5 	.word	0x08006fb5
 8006f6c:	08006fb5 	.word	0x08006fb5
 8006f70:	08006fb5 	.word	0x08006fb5
 8006f74:	08006fb5 	.word	0x08006fb5
 8006f78:	08006fb5 	.word	0x08006fb5
 8006f7c:	08006fb5 	.word	0x08006fb5
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e1c0      	b.n	800730e <UART_SetConfig+0x7ae>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e1bc      	b.n	800730e <UART_SetConfig+0x7ae>
 8006f94:	2308      	movs	r3, #8
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9a:	e1b8      	b.n	800730e <UART_SetConfig+0x7ae>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa2:	e1b4      	b.n	800730e <UART_SetConfig+0x7ae>
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006faa:	e1b0      	b.n	800730e <UART_SetConfig+0x7ae>
 8006fac:	2340      	movs	r3, #64	; 0x40
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb2:	e1ac      	b.n	800730e <UART_SetConfig+0x7ae>
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fba:	e1a8      	b.n	800730e <UART_SetConfig+0x7ae>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a75      	ldr	r2, [pc, #468]	; (8007198 <UART_SetConfig+0x638>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d130      	bne.n	8007028 <UART_SetConfig+0x4c8>
 8006fc6:	4b73      	ldr	r3, [pc, #460]	; (8007194 <UART_SetConfig+0x634>)
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d826      	bhi.n	8007020 <UART_SetConfig+0x4c0>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0x478>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08006ff1 	.word	0x08006ff1
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	08007001 	.word	0x08007001
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e18a      	b.n	800730e <UART_SetConfig+0x7ae>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e186      	b.n	800730e <UART_SetConfig+0x7ae>
 8007000:	2308      	movs	r3, #8
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007006:	e182      	b.n	800730e <UART_SetConfig+0x7ae>
 8007008:	2310      	movs	r3, #16
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e17e      	b.n	800730e <UART_SetConfig+0x7ae>
 8007010:	2320      	movs	r3, #32
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e17a      	b.n	800730e <UART_SetConfig+0x7ae>
 8007018:	2340      	movs	r3, #64	; 0x40
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e176      	b.n	800730e <UART_SetConfig+0x7ae>
 8007020:	2380      	movs	r3, #128	; 0x80
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e172      	b.n	800730e <UART_SetConfig+0x7ae>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a5b      	ldr	r2, [pc, #364]	; (800719c <UART_SetConfig+0x63c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d130      	bne.n	8007094 <UART_SetConfig+0x534>
 8007032:	4b58      	ldr	r3, [pc, #352]	; (8007194 <UART_SetConfig+0x634>)
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b05      	cmp	r3, #5
 800703c:	d826      	bhi.n	800708c <UART_SetConfig+0x52c>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0x4e4>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	0800705d 	.word	0x0800705d
 8007048:	08007065 	.word	0x08007065
 800704c:	0800706d 	.word	0x0800706d
 8007050:	08007075 	.word	0x08007075
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007085 	.word	0x08007085
 800705c:	2300      	movs	r3, #0
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e154      	b.n	800730e <UART_SetConfig+0x7ae>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e150      	b.n	800730e <UART_SetConfig+0x7ae>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e14c      	b.n	800730e <UART_SetConfig+0x7ae>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e148      	b.n	800730e <UART_SetConfig+0x7ae>
 800707c:	2320      	movs	r3, #32
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e144      	b.n	800730e <UART_SetConfig+0x7ae>
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e140      	b.n	800730e <UART_SetConfig+0x7ae>
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e13c      	b.n	800730e <UART_SetConfig+0x7ae>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <UART_SetConfig+0x640>)
 800709a:	4293      	cmp	r3, r2
 800709c:	f040 8082 	bne.w	80071a4 <UART_SetConfig+0x644>
 80070a0:	4b3c      	ldr	r3, [pc, #240]	; (8007194 <UART_SetConfig+0x634>)
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070a8:	2b28      	cmp	r3, #40	; 0x28
 80070aa:	d86d      	bhi.n	8007188 <UART_SetConfig+0x628>
 80070ac:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x554>)
 80070ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b2:	bf00      	nop
 80070b4:	08007159 	.word	0x08007159
 80070b8:	08007189 	.word	0x08007189
 80070bc:	08007189 	.word	0x08007189
 80070c0:	08007189 	.word	0x08007189
 80070c4:	08007189 	.word	0x08007189
 80070c8:	08007189 	.word	0x08007189
 80070cc:	08007189 	.word	0x08007189
 80070d0:	08007189 	.word	0x08007189
 80070d4:	08007161 	.word	0x08007161
 80070d8:	08007189 	.word	0x08007189
 80070dc:	08007189 	.word	0x08007189
 80070e0:	08007189 	.word	0x08007189
 80070e4:	08007189 	.word	0x08007189
 80070e8:	08007189 	.word	0x08007189
 80070ec:	08007189 	.word	0x08007189
 80070f0:	08007189 	.word	0x08007189
 80070f4:	08007169 	.word	0x08007169
 80070f8:	08007189 	.word	0x08007189
 80070fc:	08007189 	.word	0x08007189
 8007100:	08007189 	.word	0x08007189
 8007104:	08007189 	.word	0x08007189
 8007108:	08007189 	.word	0x08007189
 800710c:	08007189 	.word	0x08007189
 8007110:	08007189 	.word	0x08007189
 8007114:	08007171 	.word	0x08007171
 8007118:	08007189 	.word	0x08007189
 800711c:	08007189 	.word	0x08007189
 8007120:	08007189 	.word	0x08007189
 8007124:	08007189 	.word	0x08007189
 8007128:	08007189 	.word	0x08007189
 800712c:	08007189 	.word	0x08007189
 8007130:	08007189 	.word	0x08007189
 8007134:	08007179 	.word	0x08007179
 8007138:	08007189 	.word	0x08007189
 800713c:	08007189 	.word	0x08007189
 8007140:	08007189 	.word	0x08007189
 8007144:	08007189 	.word	0x08007189
 8007148:	08007189 	.word	0x08007189
 800714c:	08007189 	.word	0x08007189
 8007150:	08007189 	.word	0x08007189
 8007154:	08007181 	.word	0x08007181
 8007158:	2301      	movs	r3, #1
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e0d6      	b.n	800730e <UART_SetConfig+0x7ae>
 8007160:	2304      	movs	r3, #4
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e0d2      	b.n	800730e <UART_SetConfig+0x7ae>
 8007168:	2308      	movs	r3, #8
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e0ce      	b.n	800730e <UART_SetConfig+0x7ae>
 8007170:	2310      	movs	r3, #16
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e0ca      	b.n	800730e <UART_SetConfig+0x7ae>
 8007178:	2320      	movs	r3, #32
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e0c6      	b.n	800730e <UART_SetConfig+0x7ae>
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e0c2      	b.n	800730e <UART_SetConfig+0x7ae>
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e0be      	b.n	800730e <UART_SetConfig+0x7ae>
 8007190:	40011400 	.word	0x40011400
 8007194:	58024400 	.word	0x58024400
 8007198:	40007800 	.word	0x40007800
 800719c:	40007c00 	.word	0x40007c00
 80071a0:	40011800 	.word	0x40011800
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4aad      	ldr	r2, [pc, #692]	; (8007460 <UART_SetConfig+0x900>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d176      	bne.n	800729c <UART_SetConfig+0x73c>
 80071ae:	4bad      	ldr	r3, [pc, #692]	; (8007464 <UART_SetConfig+0x904>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071b6:	2b28      	cmp	r3, #40	; 0x28
 80071b8:	d86c      	bhi.n	8007294 <UART_SetConfig+0x734>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x660>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	08007265 	.word	0x08007265
 80071c4:	08007295 	.word	0x08007295
 80071c8:	08007295 	.word	0x08007295
 80071cc:	08007295 	.word	0x08007295
 80071d0:	08007295 	.word	0x08007295
 80071d4:	08007295 	.word	0x08007295
 80071d8:	08007295 	.word	0x08007295
 80071dc:	08007295 	.word	0x08007295
 80071e0:	0800726d 	.word	0x0800726d
 80071e4:	08007295 	.word	0x08007295
 80071e8:	08007295 	.word	0x08007295
 80071ec:	08007295 	.word	0x08007295
 80071f0:	08007295 	.word	0x08007295
 80071f4:	08007295 	.word	0x08007295
 80071f8:	08007295 	.word	0x08007295
 80071fc:	08007295 	.word	0x08007295
 8007200:	08007275 	.word	0x08007275
 8007204:	08007295 	.word	0x08007295
 8007208:	08007295 	.word	0x08007295
 800720c:	08007295 	.word	0x08007295
 8007210:	08007295 	.word	0x08007295
 8007214:	08007295 	.word	0x08007295
 8007218:	08007295 	.word	0x08007295
 800721c:	08007295 	.word	0x08007295
 8007220:	0800727d 	.word	0x0800727d
 8007224:	08007295 	.word	0x08007295
 8007228:	08007295 	.word	0x08007295
 800722c:	08007295 	.word	0x08007295
 8007230:	08007295 	.word	0x08007295
 8007234:	08007295 	.word	0x08007295
 8007238:	08007295 	.word	0x08007295
 800723c:	08007295 	.word	0x08007295
 8007240:	08007285 	.word	0x08007285
 8007244:	08007295 	.word	0x08007295
 8007248:	08007295 	.word	0x08007295
 800724c:	08007295 	.word	0x08007295
 8007250:	08007295 	.word	0x08007295
 8007254:	08007295 	.word	0x08007295
 8007258:	08007295 	.word	0x08007295
 800725c:	08007295 	.word	0x08007295
 8007260:	0800728d 	.word	0x0800728d
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e050      	b.n	800730e <UART_SetConfig+0x7ae>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e04c      	b.n	800730e <UART_SetConfig+0x7ae>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e048      	b.n	800730e <UART_SetConfig+0x7ae>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e044      	b.n	800730e <UART_SetConfig+0x7ae>
 8007284:	2320      	movs	r3, #32
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e040      	b.n	800730e <UART_SetConfig+0x7ae>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e03c      	b.n	800730e <UART_SetConfig+0x7ae>
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e038      	b.n	800730e <UART_SetConfig+0x7ae>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a71      	ldr	r2, [pc, #452]	; (8007468 <UART_SetConfig+0x908>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d130      	bne.n	8007308 <UART_SetConfig+0x7a8>
 80072a6:	4b6f      	ldr	r3, [pc, #444]	; (8007464 <UART_SetConfig+0x904>)
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d826      	bhi.n	8007300 <UART_SetConfig+0x7a0>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x758>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	080072e1 	.word	0x080072e1
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	080072f1 	.word	0x080072f1
 80072cc:	080072f9 	.word	0x080072f9
 80072d0:	2302      	movs	r3, #2
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e01a      	b.n	800730e <UART_SetConfig+0x7ae>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e016      	b.n	800730e <UART_SetConfig+0x7ae>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e012      	b.n	800730e <UART_SetConfig+0x7ae>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e00e      	b.n	800730e <UART_SetConfig+0x7ae>
 80072f0:	2320      	movs	r3, #32
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e00a      	b.n	800730e <UART_SetConfig+0x7ae>
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e006      	b.n	800730e <UART_SetConfig+0x7ae>
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e002      	b.n	800730e <UART_SetConfig+0x7ae>
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a55      	ldr	r2, [pc, #340]	; (8007468 <UART_SetConfig+0x908>)
 8007314:	4293      	cmp	r3, r2
 8007316:	f040 80f8 	bne.w	800750a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800731e:	2b20      	cmp	r3, #32
 8007320:	dc46      	bgt.n	80073b0 <UART_SetConfig+0x850>
 8007322:	2b02      	cmp	r3, #2
 8007324:	db75      	blt.n	8007412 <UART_SetConfig+0x8b2>
 8007326:	3b02      	subs	r3, #2
 8007328:	2b1e      	cmp	r3, #30
 800732a:	d872      	bhi.n	8007412 <UART_SetConfig+0x8b2>
 800732c:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <UART_SetConfig+0x7d4>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	080073b7 	.word	0x080073b7
 8007338:	08007413 	.word	0x08007413
 800733c:	080073bf 	.word	0x080073bf
 8007340:	08007413 	.word	0x08007413
 8007344:	08007413 	.word	0x08007413
 8007348:	08007413 	.word	0x08007413
 800734c:	080073cf 	.word	0x080073cf
 8007350:	08007413 	.word	0x08007413
 8007354:	08007413 	.word	0x08007413
 8007358:	08007413 	.word	0x08007413
 800735c:	08007413 	.word	0x08007413
 8007360:	08007413 	.word	0x08007413
 8007364:	08007413 	.word	0x08007413
 8007368:	08007413 	.word	0x08007413
 800736c:	080073df 	.word	0x080073df
 8007370:	08007413 	.word	0x08007413
 8007374:	08007413 	.word	0x08007413
 8007378:	08007413 	.word	0x08007413
 800737c:	08007413 	.word	0x08007413
 8007380:	08007413 	.word	0x08007413
 8007384:	08007413 	.word	0x08007413
 8007388:	08007413 	.word	0x08007413
 800738c:	08007413 	.word	0x08007413
 8007390:	08007413 	.word	0x08007413
 8007394:	08007413 	.word	0x08007413
 8007398:	08007413 	.word	0x08007413
 800739c:	08007413 	.word	0x08007413
 80073a0:	08007413 	.word	0x08007413
 80073a4:	08007413 	.word	0x08007413
 80073a8:	08007413 	.word	0x08007413
 80073ac:	08007405 	.word	0x08007405
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d02a      	beq.n	800740a <UART_SetConfig+0x8aa>
 80073b4:	e02d      	b.n	8007412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073b6:	f7fd ffe7 	bl	8005388 <HAL_RCCEx_GetD3PCLK1Freq>
 80073ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073bc:	e02f      	b.n	800741e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fff6 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073cc:	e027      	b.n	800741e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ce:	f107 0318 	add.w	r3, r7, #24
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe f942 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073dc:	e01f      	b.n	800741e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073de:	4b21      	ldr	r3, [pc, #132]	; (8007464 <UART_SetConfig+0x904>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073ea:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <UART_SetConfig+0x904>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	08db      	lsrs	r3, r3, #3
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	4a1d      	ldr	r2, [pc, #116]	; (800746c <UART_SetConfig+0x90c>)
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073fc:	e00f      	b.n	800741e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073fe:	4b1b      	ldr	r3, [pc, #108]	; (800746c <UART_SetConfig+0x90c>)
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007402:	e00c      	b.n	800741e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <UART_SetConfig+0x910>)
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007408:	e009      	b.n	800741e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007410:	e005      	b.n	800741e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800741c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 81ee 	beq.w	8007802 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	4a12      	ldr	r2, [pc, #72]	; (8007474 <UART_SetConfig+0x914>)
 800742c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007430:	461a      	mov	r2, r3
 8007432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007434:	fbb3 f3f2 	udiv	r3, r3, r2
 8007438:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	429a      	cmp	r2, r3
 8007448:	d305      	bcc.n	8007456 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007452:	429a      	cmp	r2, r3
 8007454:	d910      	bls.n	8007478 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800745c:	e1d1      	b.n	8007802 <UART_SetConfig+0xca2>
 800745e:	bf00      	nop
 8007460:	40011c00 	.word	0x40011c00
 8007464:	58024400 	.word	0x58024400
 8007468:	58000c00 	.word	0x58000c00
 800746c:	03d09000 	.word	0x03d09000
 8007470:	003d0900 	.word	0x003d0900
 8007474:	080093e8 	.word	0x080093e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747a:	2200      	movs	r2, #0
 800747c:	60bb      	str	r3, [r7, #8]
 800747e:	60fa      	str	r2, [r7, #12]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	4ac0      	ldr	r2, [pc, #768]	; (8007788 <UART_SetConfig+0xc28>)
 8007486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748a:	b29b      	uxth	r3, r3
 800748c:	2200      	movs	r2, #0
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800749a:	f7f8 ff59 	bl	8000350 <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	020b      	lsls	r3, r1, #8
 80074b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074b4:	0202      	lsls	r2, r0, #8
 80074b6:	6979      	ldr	r1, [r7, #20]
 80074b8:	6849      	ldr	r1, [r1, #4]
 80074ba:	0849      	lsrs	r1, r1, #1
 80074bc:	2000      	movs	r0, #0
 80074be:	460c      	mov	r4, r1
 80074c0:	4605      	mov	r5, r0
 80074c2:	eb12 0804 	adds.w	r8, r2, r4
 80074c6:	eb43 0905 	adc.w	r9, r3, r5
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	469a      	mov	sl, r3
 80074d2:	4693      	mov	fp, r2
 80074d4:	4652      	mov	r2, sl
 80074d6:	465b      	mov	r3, fp
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f8 ff38 	bl	8000350 <__aeabi_uldivmod>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4613      	mov	r3, r2
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ee:	d308      	bcc.n	8007502 <UART_SetConfig+0x9a2>
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f6:	d204      	bcs.n	8007502 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fe:	60da      	str	r2, [r3, #12]
 8007500:	e17f      	b.n	8007802 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007508:	e17b      	b.n	8007802 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007512:	f040 80bd 	bne.w	8007690 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007516:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800751a:	2b20      	cmp	r3, #32
 800751c:	dc48      	bgt.n	80075b0 <UART_SetConfig+0xa50>
 800751e:	2b00      	cmp	r3, #0
 8007520:	db7b      	blt.n	800761a <UART_SetConfig+0xaba>
 8007522:	2b20      	cmp	r3, #32
 8007524:	d879      	bhi.n	800761a <UART_SetConfig+0xaba>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x9cc>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	080075b7 	.word	0x080075b7
 8007530:	080075bf 	.word	0x080075bf
 8007534:	0800761b 	.word	0x0800761b
 8007538:	0800761b 	.word	0x0800761b
 800753c:	080075c7 	.word	0x080075c7
 8007540:	0800761b 	.word	0x0800761b
 8007544:	0800761b 	.word	0x0800761b
 8007548:	0800761b 	.word	0x0800761b
 800754c:	080075d7 	.word	0x080075d7
 8007550:	0800761b 	.word	0x0800761b
 8007554:	0800761b 	.word	0x0800761b
 8007558:	0800761b 	.word	0x0800761b
 800755c:	0800761b 	.word	0x0800761b
 8007560:	0800761b 	.word	0x0800761b
 8007564:	0800761b 	.word	0x0800761b
 8007568:	0800761b 	.word	0x0800761b
 800756c:	080075e7 	.word	0x080075e7
 8007570:	0800761b 	.word	0x0800761b
 8007574:	0800761b 	.word	0x0800761b
 8007578:	0800761b 	.word	0x0800761b
 800757c:	0800761b 	.word	0x0800761b
 8007580:	0800761b 	.word	0x0800761b
 8007584:	0800761b 	.word	0x0800761b
 8007588:	0800761b 	.word	0x0800761b
 800758c:	0800761b 	.word	0x0800761b
 8007590:	0800761b 	.word	0x0800761b
 8007594:	0800761b 	.word	0x0800761b
 8007598:	0800761b 	.word	0x0800761b
 800759c:	0800761b 	.word	0x0800761b
 80075a0:	0800761b 	.word	0x0800761b
 80075a4:	0800761b 	.word	0x0800761b
 80075a8:	0800761b 	.word	0x0800761b
 80075ac:	0800760d 	.word	0x0800760d
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d02e      	beq.n	8007612 <UART_SetConfig+0xab2>
 80075b4:	e031      	b.n	800761a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b6:	f7fc fb81 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 80075ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075bc:	e033      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075be:	f7fc fb93 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80075c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075c4:	e02f      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fd fef2 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d4:	e027      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075d6:	f107 0318 	add.w	r3, r7, #24
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe f83e 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e4:	e01f      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e6:	4b69      	ldr	r3, [pc, #420]	; (800778c <UART_SetConfig+0xc2c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075f2:	4b66      	ldr	r3, [pc, #408]	; (800778c <UART_SetConfig+0xc2c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	08db      	lsrs	r3, r3, #3
 80075f8:	f003 0303 	and.w	r3, r3, #3
 80075fc:	4a64      	ldr	r2, [pc, #400]	; (8007790 <UART_SetConfig+0xc30>)
 80075fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007604:	e00f      	b.n	8007626 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007606:	4b62      	ldr	r3, [pc, #392]	; (8007790 <UART_SetConfig+0xc30>)
 8007608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800760a:	e00c      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800760c:	4b61      	ldr	r3, [pc, #388]	; (8007794 <UART_SetConfig+0xc34>)
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007610:	e009      	b.n	8007626 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007618:	e005      	b.n	8007626 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80ea 	beq.w	8007802 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	4a55      	ldr	r2, [pc, #340]	; (8007788 <UART_SetConfig+0xc28>)
 8007634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007638:	461a      	mov	r2, r3
 800763a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007640:	005a      	lsls	r2, r3, #1
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	441a      	add	r2, r3
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007652:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d916      	bls.n	8007688 <UART_SetConfig+0xb28>
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007660:	d212      	bcs.n	8007688 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	b29b      	uxth	r3, r3
 8007666:	f023 030f 	bic.w	r3, r3, #15
 800766a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	b29b      	uxth	r3, r3
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	b29a      	uxth	r2, r3
 8007678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800767a:	4313      	orrs	r3, r2
 800767c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007684:	60da      	str	r2, [r3, #12]
 8007686:	e0bc      	b.n	8007802 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800768e:	e0b8      	b.n	8007802 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007690:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007694:	2b20      	cmp	r3, #32
 8007696:	dc4b      	bgt.n	8007730 <UART_SetConfig+0xbd0>
 8007698:	2b00      	cmp	r3, #0
 800769a:	f2c0 8087 	blt.w	80077ac <UART_SetConfig+0xc4c>
 800769e:	2b20      	cmp	r3, #32
 80076a0:	f200 8084 	bhi.w	80077ac <UART_SetConfig+0xc4c>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0xb4c>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	08007737 	.word	0x08007737
 80076b0:	0800773f 	.word	0x0800773f
 80076b4:	080077ad 	.word	0x080077ad
 80076b8:	080077ad 	.word	0x080077ad
 80076bc:	08007747 	.word	0x08007747
 80076c0:	080077ad 	.word	0x080077ad
 80076c4:	080077ad 	.word	0x080077ad
 80076c8:	080077ad 	.word	0x080077ad
 80076cc:	08007757 	.word	0x08007757
 80076d0:	080077ad 	.word	0x080077ad
 80076d4:	080077ad 	.word	0x080077ad
 80076d8:	080077ad 	.word	0x080077ad
 80076dc:	080077ad 	.word	0x080077ad
 80076e0:	080077ad 	.word	0x080077ad
 80076e4:	080077ad 	.word	0x080077ad
 80076e8:	080077ad 	.word	0x080077ad
 80076ec:	08007767 	.word	0x08007767
 80076f0:	080077ad 	.word	0x080077ad
 80076f4:	080077ad 	.word	0x080077ad
 80076f8:	080077ad 	.word	0x080077ad
 80076fc:	080077ad 	.word	0x080077ad
 8007700:	080077ad 	.word	0x080077ad
 8007704:	080077ad 	.word	0x080077ad
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077ad 	.word	0x080077ad
 8007714:	080077ad 	.word	0x080077ad
 8007718:	080077ad 	.word	0x080077ad
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077ad 	.word	0x080077ad
 8007728:	080077ad 	.word	0x080077ad
 800772c:	0800779f 	.word	0x0800779f
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d037      	beq.n	80077a4 <UART_SetConfig+0xc44>
 8007734:	e03a      	b.n	80077ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007736:	f7fc fac1 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 800773a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800773c:	e03c      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800773e:	f7fc fad3 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 8007742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007744:	e038      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd fe32 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007754:	e030      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007756:	f107 0318 	add.w	r3, r7, #24
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd ff7e 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007764:	e028      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <UART_SetConfig+0xc2c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d012      	beq.n	8007798 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <UART_SetConfig+0xc2c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	08db      	lsrs	r3, r3, #3
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	4a04      	ldr	r2, [pc, #16]	; (8007790 <UART_SetConfig+0xc30>)
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007784:	e018      	b.n	80077b8 <UART_SetConfig+0xc58>
 8007786:	bf00      	nop
 8007788:	080093e8 	.word	0x080093e8
 800778c:	58024400 	.word	0x58024400
 8007790:	03d09000 	.word	0x03d09000
 8007794:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007798:	4b24      	ldr	r3, [pc, #144]	; (800782c <UART_SetConfig+0xccc>)
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800779c:	e00c      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800779e:	4b24      	ldr	r3, [pc, #144]	; (8007830 <UART_SetConfig+0xcd0>)
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a2:	e009      	b.n	80077b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077aa:	e005      	b.n	80077b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077b6:	bf00      	nop
    }

    if (pclk != 0U)
 80077b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d021      	beq.n	8007802 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	4a1c      	ldr	r2, [pc, #112]	; (8007834 <UART_SetConfig+0xcd4>)
 80077c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	441a      	add	r2, r3
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	2b0f      	cmp	r3, #15
 80077e6:	d909      	bls.n	80077fc <UART_SetConfig+0xc9c>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ee:	d205      	bcs.n	80077fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60da      	str	r2, [r3, #12]
 80077fa:	e002      	b.n	8007802 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2201      	movs	r2, #1
 8007806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2201      	movs	r2, #1
 800780e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2200      	movs	r2, #0
 8007816:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800781e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007822:	4618      	mov	r0, r3
 8007824:	3748      	adds	r7, #72	; 0x48
 8007826:	46bd      	mov	sp, r7
 8007828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782c:	03d09000 	.word	0x03d09000
 8007830:	003d0900 	.word	0x003d0900
 8007834:	080093e8 	.word	0x080093e8

08007838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00a      	beq.n	80078ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007936:	d10a      	bne.n	800794e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  }
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af02      	add	r7, sp, #8
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800798c:	f7f9 fd26 	bl	80013dc <HAL_GetTick>
 8007990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d10e      	bne.n	80079be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f82f 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e025      	b.n	8007a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d10e      	bne.n	80079ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f819 	bl	8007a12 <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e00f      	b.n	8007a0a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b09c      	sub	sp, #112	; 0x70
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a22:	e0a9      	b.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a2a:	f000 80a5 	beq.w	8007b78 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2e:	f7f9 fcd5 	bl	80013dc <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d302      	bcc.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d140      	bne.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a58:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a64:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e069      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d051      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae2:	d149      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007aec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b40:	623a      	str	r2, [r7, #32]
 8007b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	69f9      	ldr	r1, [r7, #28]
 8007b46:	6a3a      	ldr	r2, [r7, #32]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e010      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4013      	ands	r3, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f43f af46 	beq.w	8007a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3770      	adds	r7, #112	; 0x70
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	e027      	b.n	8007c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2224      	movs	r2, #36	; 0x24
 8007bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e02d      	b.n	8007c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2224      	movs	r2, #36	; 0x24
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0201 	bic.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f84f 	bl	8007d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d101      	bne.n	8007ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e02d      	b.n	8007d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f811 	bl	8007d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d108      	bne.n	8007d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d2c:	e031      	b.n	8007d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d2e:	2310      	movs	r3, #16
 8007d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d32:	2310      	movs	r3, #16
 8007d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	0e5b      	lsrs	r3, r3, #25
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0f5b      	lsrs	r3, r3, #29
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	7b3a      	ldrb	r2, [r7, #12]
 8007d5a:	4911      	ldr	r1, [pc, #68]	; (8007da0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d5c:	5c8a      	ldrb	r2, [r1, r2]
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d62:	7b3a      	ldrb	r2, [r7, #12]
 8007d64:	490f      	ldr	r1, [pc, #60]	; (8007da4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	7b7a      	ldrb	r2, [r7, #13]
 8007d78:	4909      	ldr	r1, [pc, #36]	; (8007da0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d7a:	5c8a      	ldrb	r2, [r1, r2]
 8007d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d80:	7b7a      	ldrb	r2, [r7, #13]
 8007d82:	4908      	ldr	r1, [pc, #32]	; (8007da4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d92:	bf00      	nop
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	08009400 	.word	0x08009400
 8007da4:	08009408 	.word	0x08009408

08007da8 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dae:	f107 0310 	add.w	r3, r7, #16
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	609a      	str	r2, [r3, #8]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8007dca:	f000 fc9d 	bl	8008708 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dd4:	e10c      	b.n	8007ff0 <STEPPERS_Init+0x248>
    {
    	for(j=0; j<4; j++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ddc:	e082      	b.n	8007ee4 <STEPPERS_Init+0x13c>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8007dde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007de2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007de6:	4887      	ldr	r0, [pc, #540]	; (8008004 <STEPPERS_Init+0x25c>)
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	440b      	add	r3, r1
 8007df0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007df4:	4a84      	ldr	r2, [pc, #528]	; (8008008 <STEPPERS_Init+0x260>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d10f      	bne.n	8007e1a <STEPPERS_Init+0x72>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dfa:	4b84      	ldr	r3, [pc, #528]	; (800800c <STEPPERS_Init+0x264>)
 8007dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e00:	4a82      	ldr	r2, [pc, #520]	; (800800c <STEPPERS_Init+0x264>)
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007e0a:	4b80      	ldr	r3, [pc, #512]	; (800800c <STEPPERS_Init+0x264>)
 8007e0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e03a      	b.n	8007e90 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8007e1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e1e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007e22:	4878      	ldr	r0, [pc, #480]	; (8008004 <STEPPERS_Init+0x25c>)
 8007e24:	4613      	mov	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e30:	4a77      	ldr	r2, [pc, #476]	; (8008010 <STEPPERS_Init+0x268>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d10f      	bne.n	8007e56 <STEPPERS_Init+0xae>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e36:	4b75      	ldr	r3, [pc, #468]	; (800800c <STEPPERS_Init+0x264>)
 8007e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e3c:	4a73      	ldr	r2, [pc, #460]	; (800800c <STEPPERS_Init+0x264>)
 8007e3e:	f043 0302 	orr.w	r3, r3, #2
 8007e42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007e46:	4b71      	ldr	r3, [pc, #452]	; (800800c <STEPPERS_Init+0x264>)
 8007e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	e01c      	b.n	8007e90 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8007e56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e5a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007e5e:	4869      	ldr	r0, [pc, #420]	; (8008004 <STEPPERS_Init+0x25c>)
 8007e60:	4613      	mov	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	440b      	add	r3, r1
 8007e68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e6c:	4a69      	ldr	r2, [pc, #420]	; (8008014 <STEPPERS_Init+0x26c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d10e      	bne.n	8007e90 <STEPPERS_Init+0xe8>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e72:	4b66      	ldr	r3, [pc, #408]	; (800800c <STEPPERS_Init+0x264>)
 8007e74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e78:	4a64      	ldr	r2, [pc, #400]	; (800800c <STEPPERS_Init+0x264>)
 8007e7a:	f043 0304 	orr.w	r3, r3, #4
 8007e7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007e82:	4b62      	ldr	r3, [pc, #392]	; (800800c <STEPPERS_Init+0x264>)
 8007e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	607b      	str	r3, [r7, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8007e90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e94:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007e98:	485a      	ldr	r0, [pc, #360]	; (8008004 <STEPPERS_Init+0x25c>)
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007eaa:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007eac:	2301      	movs	r3, #1
 8007eae:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8007eb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ebc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007ec0:	4850      	ldr	r0, [pc, #320]	; (8008004 <STEPPERS_Init+0x25c>)
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	440b      	add	r3, r1
 8007eca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ece:	f107 0210 	add.w	r2, r7, #16
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fa fd69 	bl	80029ac <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8007eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ede:	3301      	adds	r3, #1
 8007ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	f67f af78 	bls.w	8007dde <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8007eee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ef2:	4949      	ldr	r1, [pc, #292]	; (8008018 <STEPPERS_Init+0x270>)
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	3311      	adds	r3, #17
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8007f04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f08:	4943      	ldr	r1, [pc, #268]	; (8008018 <STEPPERS_Init+0x270>)
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	330f      	adds	r3, #15
 8007f16:	2200      	movs	r2, #0
 8007f18:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8007f1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f1e:	493e      	ldr	r1, [pc, #248]	; (8008018 <STEPPERS_Init+0x270>)
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8007f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f32:	4939      	ldr	r1, [pc, #228]	; (8008018 <STEPPERS_Init+0x270>)
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3304      	adds	r3, #4
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8007f44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f48:	4933      	ldr	r1, [pc, #204]	; (8008018 <STEPPERS_Init+0x270>)
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3308      	adds	r3, #8
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8007f5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f5e:	492e      	ldr	r1, [pc, #184]	; (8008018 <STEPPERS_Init+0x270>)
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	330e      	adds	r3, #14
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8007f70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f74:	4923      	ldr	r1, [pc, #140]	; (8008004 <STEPPERS_Init+0x25c>)
 8007f76:	4613      	mov	r3, r2
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	331b      	adds	r3, #27
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d00b      	beq.n	8007fa0 <STEPPERS_Init+0x1f8>
 8007f88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f8c:	491d      	ldr	r1, [pc, #116]	; (8008004 <STEPPERS_Init+0x25c>)
 8007f8e:	4613      	mov	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	331b      	adds	r3, #27
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <STEPPERS_Init+0x210>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8007fa0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fa4:	491c      	ldr	r1, [pc, #112]	; (8008018 <STEPPERS_Init+0x270>)
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3310      	adds	r3, #16
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	e016      	b.n	8007fe6 <STEPPERS_Init+0x23e>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8007fb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fbc:	4911      	ldr	r1, [pc, #68]	; (8008004 <STEPPERS_Init+0x25c>)
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	331b      	adds	r3, #27
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d10a      	bne.n	8007fe6 <STEPPERS_Init+0x23e>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8007fd0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fd4:	4910      	ldr	r1, [pc, #64]	; (8008018 <STEPPERS_Init+0x270>)
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8007fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fea:	3301      	adds	r3, #1
 8007fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f43f aeee 	beq.w	8007dd6 <STEPPERS_Init+0x2e>
    	}
    }
}
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3728      	adds	r7, #40	; 0x28
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	08009410 	.word	0x08009410
 8008008:	58020000 	.word	0x58020000
 800800c:	58024400 	.word	0x58024400
 8008010:	58020400 	.word	0x58020400
 8008014:	58020800 	.word	0x58020800
 8008018:	24030fdc 	.word	0x24030fdc

0800801c <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	605a      	str	r2, [r3, #4]
 800802e:	609a      	str	r2, [r3, #8]
 8008030:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	605a      	str	r2, [r3, #4]
 800803c:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8008042:	f7ff feb1 	bl	8007da8 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8008046:	f44f 7348 	mov.w	r3, #800	; 0x320
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a17      	ldr	r2, [pc, #92]	; (80080ac <STEPPERS_Init_TMR+0x90>)
 8008050:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2263      	movs	r2, #99	; 0x63
 8008056:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	1e5a      	subs	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2280      	movs	r2, #128	; 0x80
 8008070:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fd fefc 	bl	8005e70 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800807c:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 800807e:	f107 0314 	add.w	r3, r7, #20
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fe f981 	bl	800638c <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800808a:	2300      	movs	r3, #0
 800808c:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fe fbcf 	bl	800683c <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fd ffae 	bl	8006000 <HAL_TIM_Base_Start_IT>
    }
}
 80080a4:	bf00      	nop
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40014800 	.word	0x40014800

080080b0 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	460a      	mov	r2, r1
 80080ba:	71fb      	strb	r3, [r7, #7]
 80080bc:	4613      	mov	r3, r2
 80080be:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 80080c4:	79fa      	ldrb	r2, [r7, #7]
 80080c6:	4926      	ldr	r1, [pc, #152]	; (8008160 <STEPPER_SetSpeed+0xb0>)
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	440b      	add	r3, r1
 80080d2:	330c      	adds	r3, #12
 80080d4:	88ba      	ldrh	r2, [r7, #4]
 80080d6:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 80080d8:	79fa      	ldrb	r2, [r7, #7]
 80080da:	4922      	ldr	r1, [pc, #136]	; (8008164 <STEPPER_SetSpeed+0xb4>)
 80080dc:	4613      	mov	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	331b      	adds	r3, #27
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d10b      	bne.n	8008106 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 80080ee:	79fa      	ldrb	r2, [r7, #7]
 80080f0:	491c      	ldr	r1, [pc, #112]	; (8008164 <STEPPER_SetSpeed+0xb4>)
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	3318      	adds	r3, #24
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e009      	b.n	800811a <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8008106:	79fa      	ldrb	r2, [r7, #7]
 8008108:	4916      	ldr	r1, [pc, #88]	; (8008164 <STEPPER_SetSpeed+0xb4>)
 800810a:	4613      	mov	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3318      	adds	r3, #24
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 800811a:	88bb      	ldrh	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	fb02 f303 	mul.w	r3, r2, r3
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800812a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8008158 <STEPPER_SetSpeed+0xa8>
 800812e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008132:	79fa      	ldrb	r2, [r7, #7]
 8008134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008138:	ee17 0a90 	vmov	r0, s15
 800813c:	4908      	ldr	r1, [pc, #32]	; (8008160 <STEPPER_SetSpeed+0xb0>)
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	3308      	adds	r3, #8
 800814a:	6018      	str	r0, [r3, #0]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	00000000 	.word	0x00000000
 800815c:	40ed4c00 	.word	0x40ed4c00
 8008160:	24030fdc 	.word	0x24030fdc
 8008164:	08009410 	.word	0x08009410

08008168 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8008172:	79fa      	ldrb	r2, [r7, #7]
 8008174:	4999      	ldr	r1, [pc, #612]	; (80083dc <STEPPER_One_Step+0x274>)
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	331a      	adds	r3, #26
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f040 81c4 	bne.w	8008512 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800818a:	79fa      	ldrb	r2, [r7, #7]
 800818c:	4993      	ldr	r1, [pc, #588]	; (80083dc <STEPPER_One_Step+0x274>)
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	331b      	adds	r3, #27
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 8088 	bne.w	80082b2 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80081a2:	79fa      	ldrb	r2, [r7, #7]
 80081a4:	498d      	ldr	r1, [pc, #564]	; (80083dc <STEPPER_One_Step+0x274>)
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	79fa      	ldrb	r2, [r7, #7]
 80081b4:	4989      	ldr	r1, [pc, #548]	; (80083dc <STEPPER_One_Step+0x274>)
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	3310      	adds	r3, #16
 80081c2:	8819      	ldrh	r1, [r3, #0]
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	4c86      	ldr	r4, [pc, #536]	; (80083e0 <STEPPER_One_Step+0x278>)
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4423      	add	r3, r4
 80081d2:	330f      	adds	r3, #15
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b82      	ldr	r3, [pc, #520]	; (80083e4 <STEPPER_One_Step+0x27c>)
 80081da:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7fa fd94 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80081e4:	79fa      	ldrb	r2, [r7, #7]
 80081e6:	497d      	ldr	r1, [pc, #500]	; (80083dc <STEPPER_One_Step+0x274>)
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3304      	adds	r3, #4
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	79fa      	ldrb	r2, [r7, #7]
 80081f8:	4978      	ldr	r1, [pc, #480]	; (80083dc <STEPPER_One_Step+0x274>)
 80081fa:	4613      	mov	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	3312      	adds	r3, #18
 8008206:	8819      	ldrh	r1, [r3, #0]
 8008208:	79fa      	ldrb	r2, [r7, #7]
 800820a:	4c75      	ldr	r4, [pc, #468]	; (80083e0 <STEPPER_One_Step+0x278>)
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4423      	add	r3, r4
 8008216:	330f      	adds	r3, #15
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	4a72      	ldr	r2, [pc, #456]	; (80083e4 <STEPPER_One_Step+0x27c>)
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	461a      	mov	r2, r3
 8008224:	f7fa fd72 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008228:	79fa      	ldrb	r2, [r7, #7]
 800822a:	496c      	ldr	r1, [pc, #432]	; (80083dc <STEPPER_One_Step+0x274>)
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	3308      	adds	r3, #8
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	79fa      	ldrb	r2, [r7, #7]
 800823c:	4967      	ldr	r1, [pc, #412]	; (80083dc <STEPPER_One_Step+0x274>)
 800823e:	4613      	mov	r3, r2
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	440b      	add	r3, r1
 8008248:	3314      	adds	r3, #20
 800824a:	8819      	ldrh	r1, [r3, #0]
 800824c:	79fa      	ldrb	r2, [r7, #7]
 800824e:	4c64      	ldr	r4, [pc, #400]	; (80083e0 <STEPPER_One_Step+0x278>)
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4423      	add	r3, r4
 800825a:	330f      	adds	r3, #15
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4a61      	ldr	r2, [pc, #388]	; (80083e4 <STEPPER_One_Step+0x27c>)
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	789b      	ldrb	r3, [r3, #2]
 8008266:	461a      	mov	r2, r3
 8008268:	f7fa fd50 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	495b      	ldr	r1, [pc, #364]	; (80083dc <STEPPER_One_Step+0x274>)
 8008270:	4613      	mov	r3, r2
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	330c      	adds	r3, #12
 800827c:	6818      	ldr	r0, [r3, #0]
 800827e:	79fa      	ldrb	r2, [r7, #7]
 8008280:	4956      	ldr	r1, [pc, #344]	; (80083dc <STEPPER_One_Step+0x274>)
 8008282:	4613      	mov	r3, r2
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	1a9b      	subs	r3, r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	3316      	adds	r3, #22
 800828e:	8819      	ldrh	r1, [r3, #0]
 8008290:	79fa      	ldrb	r2, [r7, #7]
 8008292:	4c53      	ldr	r4, [pc, #332]	; (80083e0 <STEPPER_One_Step+0x278>)
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4423      	add	r3, r4
 800829e:	330f      	adds	r3, #15
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	4a50      	ldr	r2, [pc, #320]	; (80083e4 <STEPPER_One_Step+0x27c>)
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	78db      	ldrb	r3, [r3, #3]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f7fa fd2e 	bl	8002d0c <HAL_GPIO_WritePin>
 80082b0:	e12f      	b.n	8008512 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 80082b2:	79fa      	ldrb	r2, [r7, #7]
 80082b4:	4949      	ldr	r1, [pc, #292]	; (80083dc <STEPPER_One_Step+0x274>)
 80082b6:	4613      	mov	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	331b      	adds	r3, #27
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	f040 8091 	bne.w	80083ec <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80082ca:	79fa      	ldrb	r2, [r7, #7]
 80082cc:	4943      	ldr	r1, [pc, #268]	; (80083dc <STEPPER_One_Step+0x274>)
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	493f      	ldr	r1, [pc, #252]	; (80083dc <STEPPER_One_Step+0x274>)
 80082de:	4613      	mov	r3, r2
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	1a9b      	subs	r3, r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3310      	adds	r3, #16
 80082ea:	8819      	ldrh	r1, [r3, #0]
 80082ec:	79fa      	ldrb	r2, [r7, #7]
 80082ee:	4c3c      	ldr	r4, [pc, #240]	; (80083e0 <STEPPER_One_Step+0x278>)
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4423      	add	r3, r4
 80082fa:	330f      	adds	r3, #15
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	4b39      	ldr	r3, [pc, #228]	; (80083e8 <STEPPER_One_Step+0x280>)
 8008302:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8008306:	461a      	mov	r2, r3
 8008308:	f7fa fd00 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 800830c:	79fa      	ldrb	r2, [r7, #7]
 800830e:	4933      	ldr	r1, [pc, #204]	; (80083dc <STEPPER_One_Step+0x274>)
 8008310:	4613      	mov	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	3304      	adds	r3, #4
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	79fa      	ldrb	r2, [r7, #7]
 8008320:	492e      	ldr	r1, [pc, #184]	; (80083dc <STEPPER_One_Step+0x274>)
 8008322:	4613      	mov	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	3312      	adds	r3, #18
 800832e:	8819      	ldrh	r1, [r3, #0]
 8008330:	79fa      	ldrb	r2, [r7, #7]
 8008332:	4c2b      	ldr	r4, [pc, #172]	; (80083e0 <STEPPER_One_Step+0x278>)
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4423      	add	r3, r4
 800833e:	330f      	adds	r3, #15
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	4a29      	ldr	r2, [pc, #164]	; (80083e8 <STEPPER_One_Step+0x280>)
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	785b      	ldrb	r3, [r3, #1]
 800834a:	461a      	mov	r2, r3
 800834c:	f7fa fcde 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008350:	79fa      	ldrb	r2, [r7, #7]
 8008352:	4922      	ldr	r1, [pc, #136]	; (80083dc <STEPPER_One_Step+0x274>)
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3308      	adds	r3, #8
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	79fa      	ldrb	r2, [r7, #7]
 8008364:	491d      	ldr	r1, [pc, #116]	; (80083dc <STEPPER_One_Step+0x274>)
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3314      	adds	r3, #20
 8008372:	8819      	ldrh	r1, [r3, #0]
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	4c1a      	ldr	r4, [pc, #104]	; (80083e0 <STEPPER_One_Step+0x278>)
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4423      	add	r3, r4
 8008382:	330f      	adds	r3, #15
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <STEPPER_One_Step+0x280>)
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	789b      	ldrb	r3, [r3, #2]
 800838e:	461a      	mov	r2, r3
 8008390:	f7fa fcbc 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8008394:	79fa      	ldrb	r2, [r7, #7]
 8008396:	4911      	ldr	r1, [pc, #68]	; (80083dc <STEPPER_One_Step+0x274>)
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	330c      	adds	r3, #12
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	79fa      	ldrb	r2, [r7, #7]
 80083a8:	490c      	ldr	r1, [pc, #48]	; (80083dc <STEPPER_One_Step+0x274>)
 80083aa:	4613      	mov	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	1a9b      	subs	r3, r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	3316      	adds	r3, #22
 80083b6:	8819      	ldrh	r1, [r3, #0]
 80083b8:	79fa      	ldrb	r2, [r7, #7]
 80083ba:	4c09      	ldr	r4, [pc, #36]	; (80083e0 <STEPPER_One_Step+0x278>)
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4423      	add	r3, r4
 80083c6:	330f      	adds	r3, #15
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <STEPPER_One_Step+0x280>)
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	78db      	ldrb	r3, [r3, #3]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7fa fc9a 	bl	8002d0c <HAL_GPIO_WritePin>
 80083d8:	e09b      	b.n	8008512 <STEPPER_One_Step+0x3aa>
 80083da:	bf00      	nop
 80083dc:	08009410 	.word	0x08009410
 80083e0:	24030fdc 	.word	0x24030fdc
 80083e4:	24000010 	.word	0x24000010
 80083e8:	24000020 	.word	0x24000020
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 80083ec:	79fa      	ldrb	r2, [r7, #7]
 80083ee:	4988      	ldr	r1, [pc, #544]	; (8008610 <STEPPER_One_Step+0x4a8>)
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	331b      	adds	r3, #27
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	f040 8087 	bne.w	8008512 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8008404:	79fa      	ldrb	r2, [r7, #7]
 8008406:	4982      	ldr	r1, [pc, #520]	; (8008610 <STEPPER_One_Step+0x4a8>)
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	79fa      	ldrb	r2, [r7, #7]
 8008416:	497e      	ldr	r1, [pc, #504]	; (8008610 <STEPPER_One_Step+0x4a8>)
 8008418:	4613      	mov	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	3310      	adds	r3, #16
 8008424:	8819      	ldrh	r1, [r3, #0]
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	4c7a      	ldr	r4, [pc, #488]	; (8008614 <STEPPER_One_Step+0x4ac>)
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4423      	add	r3, r4
 8008434:	330f      	adds	r3, #15
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	4b77      	ldr	r3, [pc, #476]	; (8008618 <STEPPER_One_Step+0x4b0>)
 800843c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8008440:	461a      	mov	r2, r3
 8008442:	f7fa fc63 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8008446:	79fa      	ldrb	r2, [r7, #7]
 8008448:	4971      	ldr	r1, [pc, #452]	; (8008610 <STEPPER_One_Step+0x4a8>)
 800844a:	4613      	mov	r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	3304      	adds	r3, #4
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	79fa      	ldrb	r2, [r7, #7]
 800845a:	496d      	ldr	r1, [pc, #436]	; (8008610 <STEPPER_One_Step+0x4a8>)
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	3312      	adds	r3, #18
 8008468:	8819      	ldrh	r1, [r3, #0]
 800846a:	79fa      	ldrb	r2, [r7, #7]
 800846c:	4c69      	ldr	r4, [pc, #420]	; (8008614 <STEPPER_One_Step+0x4ac>)
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4423      	add	r3, r4
 8008478:	330f      	adds	r3, #15
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4a66      	ldr	r2, [pc, #408]	; (8008618 <STEPPER_One_Step+0x4b0>)
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	461a      	mov	r2, r3
 8008486:	f7fa fc41 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800848a:	79fa      	ldrb	r2, [r7, #7]
 800848c:	4960      	ldr	r1, [pc, #384]	; (8008610 <STEPPER_One_Step+0x4a8>)
 800848e:	4613      	mov	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	440b      	add	r3, r1
 8008498:	3308      	adds	r3, #8
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	495c      	ldr	r1, [pc, #368]	; (8008610 <STEPPER_One_Step+0x4a8>)
 80084a0:	4613      	mov	r3, r2
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	3314      	adds	r3, #20
 80084ac:	8819      	ldrh	r1, [r3, #0]
 80084ae:	79fa      	ldrb	r2, [r7, #7]
 80084b0:	4c58      	ldr	r4, [pc, #352]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4423      	add	r3, r4
 80084bc:	330f      	adds	r3, #15
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4a55      	ldr	r2, [pc, #340]	; (8008618 <STEPPER_One_Step+0x4b0>)
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	789b      	ldrb	r3, [r3, #2]
 80084c8:	461a      	mov	r2, r3
 80084ca:	f7fa fc1f 	bl	8002d0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80084ce:	79fa      	ldrb	r2, [r7, #7]
 80084d0:	494f      	ldr	r1, [pc, #316]	; (8008610 <STEPPER_One_Step+0x4a8>)
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	330c      	adds	r3, #12
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	79fa      	ldrb	r2, [r7, #7]
 80084e2:	494b      	ldr	r1, [pc, #300]	; (8008610 <STEPPER_One_Step+0x4a8>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	3316      	adds	r3, #22
 80084f0:	8819      	ldrh	r1, [r3, #0]
 80084f2:	79fa      	ldrb	r2, [r7, #7]
 80084f4:	4c47      	ldr	r4, [pc, #284]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4423      	add	r3, r4
 8008500:	330f      	adds	r3, #15
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	4a44      	ldr	r2, [pc, #272]	; (8008618 <STEPPER_One_Step+0x4b0>)
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	78db      	ldrb	r3, [r3, #3]
 800850c:	461a      	mov	r2, r3
 800850e:	f7fa fbfd 	bl	8002d0c <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 8008512:	79fa      	ldrb	r2, [r7, #7]
 8008514:	493f      	ldr	r1, [pc, #252]	; (8008614 <STEPPER_One_Step+0x4ac>)
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3311      	adds	r3, #17
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d132      	bne.n	800858e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8008528:	79fa      	ldrb	r2, [r7, #7]
 800852a:	493a      	ldr	r1, [pc, #232]	; (8008614 <STEPPER_One_Step+0x4ac>)
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	330f      	adds	r3, #15
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d112      	bne.n	8008564 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 800853e:	79f9      	ldrb	r1, [r7, #7]
 8008540:	79fa      	ldrb	r2, [r7, #7]
 8008542:	4834      	ldr	r0, [pc, #208]	; (8008614 <STEPPER_One_Step+0x4ac>)
 8008544:	460b      	mov	r3, r1
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	440b      	add	r3, r1
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4403      	add	r3, r0
 800854e:	3310      	adds	r3, #16
 8008550:	7818      	ldrb	r0, [r3, #0]
 8008552:	4930      	ldr	r1, [pc, #192]	; (8008614 <STEPPER_One_Step+0x4ac>)
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	330f      	adds	r3, #15
 8008560:	4602      	mov	r2, r0
 8008562:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	492b      	ldr	r1, [pc, #172]	; (8008614 <STEPPER_One_Step+0x4ac>)
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	330f      	adds	r3, #15
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	3b01      	subs	r3, #1
 8008578:	b2d8      	uxtb	r0, r3
 800857a:	4926      	ldr	r1, [pc, #152]	; (8008614 <STEPPER_One_Step+0x4ac>)
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	330f      	adds	r3, #15
 8008588:	4602      	mov	r2, r0
 800858a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800858c:	e03c      	b.n	8008608 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800858e:	79fa      	ldrb	r2, [r7, #7]
 8008590:	4920      	ldr	r1, [pc, #128]	; (8008614 <STEPPER_One_Step+0x4ac>)
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	3311      	adds	r3, #17
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d131      	bne.n	8008608 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 80085a4:	79fa      	ldrb	r2, [r7, #7]
 80085a6:	491b      	ldr	r1, [pc, #108]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	330f      	adds	r3, #15
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	b2d8      	uxtb	r0, r3
 80085ba:	4916      	ldr	r1, [pc, #88]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	330f      	adds	r3, #15
 80085c8:	4602      	mov	r2, r0
 80085ca:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	4911      	ldr	r1, [pc, #68]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	440b      	add	r3, r1
 80085da:	330f      	adds	r3, #15
 80085dc:	7819      	ldrb	r1, [r3, #0]
 80085de:	79fa      	ldrb	r2, [r7, #7]
 80085e0:	480c      	ldr	r0, [pc, #48]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4403      	add	r3, r0
 80085ec:	3310      	adds	r3, #16
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	4299      	cmp	r1, r3
 80085f2:	d109      	bne.n	8008608 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80085f4:	79fa      	ldrb	r2, [r7, #7]
 80085f6:	4907      	ldr	r1, [pc, #28]	; (8008614 <STEPPER_One_Step+0x4ac>)
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	330f      	adds	r3, #15
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	bd90      	pop	{r4, r7, pc}
 8008610:	08009410 	.word	0x08009410
 8008614:	24030fdc 	.word	0x24030fdc
 8008618:	24000030 	.word	0x24000030

0800861c <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a34      	ldr	r2, [pc, #208]	; (8008700 <STEPPER_TMR_OVF_ISR+0xe4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d162      	bne.n	80086f8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8008632:	2300      	movs	r3, #0
 8008634:	73fb      	strb	r3, [r7, #15]
 8008636:	e05c      	b.n	80086f2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 8008638:	7bfa      	ldrb	r2, [r7, #15]
 800863a:	4932      	ldr	r1, [pc, #200]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3304      	adds	r3, #4
 8008648:	6819      	ldr	r1, [r3, #0]
 800864a:	7bfa      	ldrb	r2, [r7, #15]
 800864c:	482d      	ldr	r0, [pc, #180]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4403      	add	r3, r0
 8008658:	3308      	adds	r3, #8
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4299      	cmp	r1, r3
 800865e:	d333      	bcc.n	80086c8 <STEPPER_TMR_OVF_ISR+0xac>
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	4928      	ldr	r1, [pc, #160]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008664:	4613      	mov	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	330e      	adds	r3, #14
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d028      	beq.n	80086c8 <STEPPER_TMR_OVF_ISR+0xac>
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	4922      	ldr	r1, [pc, #136]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01e      	beq.n	80086c8 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fd6b 	bl	8008168 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8008692:	7bfa      	ldrb	r2, [r7, #15]
 8008694:	491b      	ldr	r1, [pc, #108]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	1e59      	subs	r1, r3, #1
 80086a4:	4817      	ldr	r0, [pc, #92]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4403      	add	r3, r0
 80086b0:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 80086b2:	7bfa      	ldrb	r2, [r7, #15]
 80086b4:	4913      	ldr	r1, [pc, #76]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3304      	adds	r3, #4
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	e011      	b.n	80086ec <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 80086c8:	7bfa      	ldrb	r2, [r7, #15]
 80086ca:	490e      	ldr	r1, [pc, #56]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3304      	adds	r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	1c59      	adds	r1, r3, #1
 80086dc:	4809      	ldr	r0, [pc, #36]	; (8008704 <STEPPER_TMR_OVF_ISR+0xe8>)
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4403      	add	r3, r0
 80086e8:	3304      	adds	r3, #4
 80086ea:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	3301      	adds	r3, #1
 80086f0:	73fb      	strb	r3, [r7, #15]
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d09f      	beq.n	8008638 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40014800 	.word	0x40014800
 8008704:	24030fdc 	.word	0x24030fdc

08008708 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800870c:	4b14      	ldr	r3, [pc, #80]	; (8008760 <DWT_Delay_Init+0x58>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	4a13      	ldr	r2, [pc, #76]	; (8008760 <DWT_Delay_Init+0x58>)
 8008712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008716:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <DWT_Delay_Init+0x58>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4a10      	ldr	r2, [pc, #64]	; (8008760 <DWT_Delay_Init+0x58>)
 800871e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008722:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8008724:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <DWT_Delay_Init+0x5c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a0e      	ldr	r2, [pc, #56]	; (8008764 <DWT_Delay_Init+0x5c>)
 800872a:	f023 0301 	bic.w	r3, r3, #1
 800872e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <DWT_Delay_Init+0x5c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0b      	ldr	r2, [pc, #44]	; (8008764 <DWT_Delay_Init+0x5c>)
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <DWT_Delay_Init+0x5c>)
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8008742:	bf00      	nop
    __ASM volatile ("NOP");
 8008744:	bf00      	nop
    __ASM volatile ("NOP");
 8008746:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8008748:	4b06      	ldr	r3, [pc, #24]	; (8008764 <DWT_Delay_Init+0x5c>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8008750:	2300      	movs	r3, #0
 8008752:	e000      	b.n	8008756 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8008754:	2301      	movs	r3, #1
    }
}
 8008756:	4618      	mov	r0, r3
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	e000edf0 	.word	0xe000edf0
 8008764:	e0001000 	.word	0xe0001000

08008768 <siprintf>:
 8008768:	b40e      	push	{r1, r2, r3}
 800876a:	b500      	push	{lr}
 800876c:	b09c      	sub	sp, #112	; 0x70
 800876e:	ab1d      	add	r3, sp, #116	; 0x74
 8008770:	9002      	str	r0, [sp, #8]
 8008772:	9006      	str	r0, [sp, #24]
 8008774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008778:	4809      	ldr	r0, [pc, #36]	; (80087a0 <siprintf+0x38>)
 800877a:	9107      	str	r1, [sp, #28]
 800877c:	9104      	str	r1, [sp, #16]
 800877e:	4909      	ldr	r1, [pc, #36]	; (80087a4 <siprintf+0x3c>)
 8008780:	f853 2b04 	ldr.w	r2, [r3], #4
 8008784:	9105      	str	r1, [sp, #20]
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	a902      	add	r1, sp, #8
 800878c:	f000 f98c 	bl	8008aa8 <_svfiprintf_r>
 8008790:	9b02      	ldr	r3, [sp, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	b01c      	add	sp, #112	; 0x70
 8008798:	f85d eb04 	ldr.w	lr, [sp], #4
 800879c:	b003      	add	sp, #12
 800879e:	4770      	bx	lr
 80087a0:	24000050 	.word	0x24000050
 80087a4:	ffff0208 	.word	0xffff0208

080087a8 <memset>:
 80087a8:	4402      	add	r2, r0
 80087aa:	4603      	mov	r3, r0
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d100      	bne.n	80087b2 <memset+0xa>
 80087b0:	4770      	bx	lr
 80087b2:	f803 1b01 	strb.w	r1, [r3], #1
 80087b6:	e7f9      	b.n	80087ac <memset+0x4>

080087b8 <__errno>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	; (80087c0 <__errno+0x8>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	24000050 	.word	0x24000050

080087c4 <__libc_init_array>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	4d0d      	ldr	r5, [pc, #52]	; (80087fc <__libc_init_array+0x38>)
 80087c8:	4c0d      	ldr	r4, [pc, #52]	; (8008800 <__libc_init_array+0x3c>)
 80087ca:	1b64      	subs	r4, r4, r5
 80087cc:	10a4      	asrs	r4, r4, #2
 80087ce:	2600      	movs	r6, #0
 80087d0:	42a6      	cmp	r6, r4
 80087d2:	d109      	bne.n	80087e8 <__libc_init_array+0x24>
 80087d4:	4d0b      	ldr	r5, [pc, #44]	; (8008804 <__libc_init_array+0x40>)
 80087d6:	4c0c      	ldr	r4, [pc, #48]	; (8008808 <__libc_init_array+0x44>)
 80087d8:	f000 fdbc 	bl	8009354 <_init>
 80087dc:	1b64      	subs	r4, r4, r5
 80087de:	10a4      	asrs	r4, r4, #2
 80087e0:	2600      	movs	r6, #0
 80087e2:	42a6      	cmp	r6, r4
 80087e4:	d105      	bne.n	80087f2 <__libc_init_array+0x2e>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ec:	4798      	blx	r3
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7ee      	b.n	80087d0 <__libc_init_array+0xc>
 80087f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f6:	4798      	blx	r3
 80087f8:	3601      	adds	r6, #1
 80087fa:	e7f2      	b.n	80087e2 <__libc_init_array+0x1e>
 80087fc:	08009468 	.word	0x08009468
 8008800:	08009468 	.word	0x08009468
 8008804:	08009468 	.word	0x08009468
 8008808:	0800946c 	.word	0x0800946c

0800880c <__retarget_lock_acquire_recursive>:
 800880c:	4770      	bx	lr

0800880e <__retarget_lock_release_recursive>:
 800880e:	4770      	bx	lr

08008810 <_free_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4605      	mov	r5, r0
 8008814:	2900      	cmp	r1, #0
 8008816:	d041      	beq.n	800889c <_free_r+0x8c>
 8008818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881c:	1f0c      	subs	r4, r1, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfb8      	it	lt
 8008822:	18e4      	addlt	r4, r4, r3
 8008824:	f000 f8d8 	bl	80089d8 <__malloc_lock>
 8008828:	4a1d      	ldr	r2, [pc, #116]	; (80088a0 <_free_r+0x90>)
 800882a:	6813      	ldr	r3, [r2, #0]
 800882c:	b933      	cbnz	r3, 800883c <_free_r+0x2c>
 800882e:	6063      	str	r3, [r4, #4]
 8008830:	6014      	str	r4, [r2, #0]
 8008832:	4628      	mov	r0, r5
 8008834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008838:	f000 b8d4 	b.w	80089e4 <__malloc_unlock>
 800883c:	42a3      	cmp	r3, r4
 800883e:	d908      	bls.n	8008852 <_free_r+0x42>
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	1821      	adds	r1, r4, r0
 8008844:	428b      	cmp	r3, r1
 8008846:	bf01      	itttt	eq
 8008848:	6819      	ldreq	r1, [r3, #0]
 800884a:	685b      	ldreq	r3, [r3, #4]
 800884c:	1809      	addeq	r1, r1, r0
 800884e:	6021      	streq	r1, [r4, #0]
 8008850:	e7ed      	b.n	800882e <_free_r+0x1e>
 8008852:	461a      	mov	r2, r3
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	b10b      	cbz	r3, 800885c <_free_r+0x4c>
 8008858:	42a3      	cmp	r3, r4
 800885a:	d9fa      	bls.n	8008852 <_free_r+0x42>
 800885c:	6811      	ldr	r1, [r2, #0]
 800885e:	1850      	adds	r0, r2, r1
 8008860:	42a0      	cmp	r0, r4
 8008862:	d10b      	bne.n	800887c <_free_r+0x6c>
 8008864:	6820      	ldr	r0, [r4, #0]
 8008866:	4401      	add	r1, r0
 8008868:	1850      	adds	r0, r2, r1
 800886a:	4283      	cmp	r3, r0
 800886c:	6011      	str	r1, [r2, #0]
 800886e:	d1e0      	bne.n	8008832 <_free_r+0x22>
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	6053      	str	r3, [r2, #4]
 8008876:	4408      	add	r0, r1
 8008878:	6010      	str	r0, [r2, #0]
 800887a:	e7da      	b.n	8008832 <_free_r+0x22>
 800887c:	d902      	bls.n	8008884 <_free_r+0x74>
 800887e:	230c      	movs	r3, #12
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	e7d6      	b.n	8008832 <_free_r+0x22>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	1821      	adds	r1, r4, r0
 8008888:	428b      	cmp	r3, r1
 800888a:	bf04      	itt	eq
 800888c:	6819      	ldreq	r1, [r3, #0]
 800888e:	685b      	ldreq	r3, [r3, #4]
 8008890:	6063      	str	r3, [r4, #4]
 8008892:	bf04      	itt	eq
 8008894:	1809      	addeq	r1, r1, r0
 8008896:	6021      	streq	r1, [r4, #0]
 8008898:	6054      	str	r4, [r2, #4]
 800889a:	e7ca      	b.n	8008832 <_free_r+0x22>
 800889c:	bd38      	pop	{r3, r4, r5, pc}
 800889e:	bf00      	nop
 80088a0:	24031134 	.word	0x24031134

080088a4 <sbrk_aligned>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	4e0f      	ldr	r6, [pc, #60]	; (80088e4 <sbrk_aligned+0x40>)
 80088a8:	460c      	mov	r4, r1
 80088aa:	6831      	ldr	r1, [r6, #0]
 80088ac:	4605      	mov	r5, r0
 80088ae:	b911      	cbnz	r1, 80088b6 <sbrk_aligned+0x12>
 80088b0:	f000 fbac 	bl	800900c <_sbrk_r>
 80088b4:	6030      	str	r0, [r6, #0]
 80088b6:	4621      	mov	r1, r4
 80088b8:	4628      	mov	r0, r5
 80088ba:	f000 fba7 	bl	800900c <_sbrk_r>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d103      	bne.n	80088ca <sbrk_aligned+0x26>
 80088c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088c6:	4620      	mov	r0, r4
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	1cc4      	adds	r4, r0, #3
 80088cc:	f024 0403 	bic.w	r4, r4, #3
 80088d0:	42a0      	cmp	r0, r4
 80088d2:	d0f8      	beq.n	80088c6 <sbrk_aligned+0x22>
 80088d4:	1a21      	subs	r1, r4, r0
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 fb98 	bl	800900c <_sbrk_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d1f2      	bne.n	80088c6 <sbrk_aligned+0x22>
 80088e0:	e7ef      	b.n	80088c2 <sbrk_aligned+0x1e>
 80088e2:	bf00      	nop
 80088e4:	24031130 	.word	0x24031130

080088e8 <_malloc_r>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	1ccd      	adds	r5, r1, #3
 80088ee:	f025 0503 	bic.w	r5, r5, #3
 80088f2:	3508      	adds	r5, #8
 80088f4:	2d0c      	cmp	r5, #12
 80088f6:	bf38      	it	cc
 80088f8:	250c      	movcc	r5, #12
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	4606      	mov	r6, r0
 80088fe:	db01      	blt.n	8008904 <_malloc_r+0x1c>
 8008900:	42a9      	cmp	r1, r5
 8008902:	d904      	bls.n	800890e <_malloc_r+0x26>
 8008904:	230c      	movs	r3, #12
 8008906:	6033      	str	r3, [r6, #0]
 8008908:	2000      	movs	r0, #0
 800890a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800890e:	4f31      	ldr	r7, [pc, #196]	; (80089d4 <_malloc_r+0xec>)
 8008910:	f000 f862 	bl	80089d8 <__malloc_lock>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	461c      	mov	r4, r3
 8008918:	bb44      	cbnz	r4, 800896c <_malloc_r+0x84>
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff ffc1 	bl	80088a4 <sbrk_aligned>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	4604      	mov	r4, r0
 8008926:	d150      	bne.n	80089ca <_malloc_r+0xe2>
 8008928:	683c      	ldr	r4, [r7, #0]
 800892a:	4621      	mov	r1, r4
 800892c:	2900      	cmp	r1, #0
 800892e:	d141      	bne.n	80089b4 <_malloc_r+0xcc>
 8008930:	2c00      	cmp	r4, #0
 8008932:	d044      	beq.n	80089be <_malloc_r+0xd6>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	4630      	mov	r0, r6
 8008938:	eb04 0803 	add.w	r8, r4, r3
 800893c:	f000 fb66 	bl	800900c <_sbrk_r>
 8008940:	4580      	cmp	r8, r0
 8008942:	d13c      	bne.n	80089be <_malloc_r+0xd6>
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	1a6d      	subs	r5, r5, r1
 8008948:	4629      	mov	r1, r5
 800894a:	4630      	mov	r0, r6
 800894c:	f7ff ffaa 	bl	80088a4 <sbrk_aligned>
 8008950:	3001      	adds	r0, #1
 8008952:	d034      	beq.n	80089be <_malloc_r+0xd6>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	442b      	add	r3, r5
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d036      	beq.n	80089ce <_malloc_r+0xe6>
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	42a2      	cmp	r2, r4
 8008964:	d129      	bne.n	80089ba <_malloc_r+0xd2>
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	e00e      	b.n	800898a <_malloc_r+0xa2>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	1b52      	subs	r2, r2, r5
 8008970:	d41d      	bmi.n	80089ae <_malloc_r+0xc6>
 8008972:	2a0b      	cmp	r2, #11
 8008974:	d916      	bls.n	80089a4 <_malloc_r+0xbc>
 8008976:	1961      	adds	r1, r4, r5
 8008978:	42a3      	cmp	r3, r4
 800897a:	6025      	str	r5, [r4, #0]
 800897c:	bf18      	it	ne
 800897e:	6059      	strne	r1, [r3, #4]
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	bf08      	it	eq
 8008984:	6039      	streq	r1, [r7, #0]
 8008986:	5162      	str	r2, [r4, r5]
 8008988:	604b      	str	r3, [r1, #4]
 800898a:	4630      	mov	r0, r6
 800898c:	f000 f82a 	bl	80089e4 <__malloc_unlock>
 8008990:	f104 000b 	add.w	r0, r4, #11
 8008994:	1d23      	adds	r3, r4, #4
 8008996:	f020 0007 	bic.w	r0, r0, #7
 800899a:	1ac2      	subs	r2, r0, r3
 800899c:	d0b5      	beq.n	800890a <_malloc_r+0x22>
 800899e:	1a1b      	subs	r3, r3, r0
 80089a0:	50a3      	str	r3, [r4, r2]
 80089a2:	e7b2      	b.n	800890a <_malloc_r+0x22>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	6862      	ldr	r2, [r4, #4]
 80089a8:	d1de      	bne.n	8008968 <_malloc_r+0x80>
 80089aa:	603a      	str	r2, [r7, #0]
 80089ac:	e7ed      	b.n	800898a <_malloc_r+0xa2>
 80089ae:	4623      	mov	r3, r4
 80089b0:	6864      	ldr	r4, [r4, #4]
 80089b2:	e7b1      	b.n	8008918 <_malloc_r+0x30>
 80089b4:	460c      	mov	r4, r1
 80089b6:	6849      	ldr	r1, [r1, #4]
 80089b8:	e7b8      	b.n	800892c <_malloc_r+0x44>
 80089ba:	4613      	mov	r3, r2
 80089bc:	e7ce      	b.n	800895c <_malloc_r+0x74>
 80089be:	230c      	movs	r3, #12
 80089c0:	6033      	str	r3, [r6, #0]
 80089c2:	4630      	mov	r0, r6
 80089c4:	f000 f80e 	bl	80089e4 <__malloc_unlock>
 80089c8:	e79e      	b.n	8008908 <_malloc_r+0x20>
 80089ca:	6005      	str	r5, [r0, #0]
 80089cc:	e7dd      	b.n	800898a <_malloc_r+0xa2>
 80089ce:	605b      	str	r3, [r3, #4]
 80089d0:	deff      	udf	#255	; 0xff
 80089d2:	bf00      	nop
 80089d4:	24031134 	.word	0x24031134

080089d8 <__malloc_lock>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__malloc_lock+0x8>)
 80089da:	f7ff bf17 	b.w	800880c <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	2403112c 	.word	0x2403112c

080089e4 <__malloc_unlock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__malloc_unlock+0x8>)
 80089e6:	f7ff bf12 	b.w	800880e <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	2403112c 	.word	0x2403112c

080089f0 <__ssputs_r>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	688e      	ldr	r6, [r1, #8]
 80089f6:	461f      	mov	r7, r3
 80089f8:	42be      	cmp	r6, r7
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	4682      	mov	sl, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	4690      	mov	r8, r2
 8008a02:	d82d      	bhi.n	8008a60 <__ssputs_r+0x70>
 8008a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a0c:	d026      	beq.n	8008a5c <__ssputs_r+0x6c>
 8008a0e:	6965      	ldr	r5, [r4, #20]
 8008a10:	6909      	ldr	r1, [r1, #16]
 8008a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a16:	eba3 0901 	sub.w	r9, r3, r1
 8008a1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a1e:	1c7b      	adds	r3, r7, #1
 8008a20:	444b      	add	r3, r9
 8008a22:	106d      	asrs	r5, r5, #1
 8008a24:	429d      	cmp	r5, r3
 8008a26:	bf38      	it	cc
 8008a28:	461d      	movcc	r5, r3
 8008a2a:	0553      	lsls	r3, r2, #21
 8008a2c:	d527      	bpl.n	8008a7e <__ssputs_r+0x8e>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7ff ff5a 	bl	80088e8 <_malloc_r>
 8008a34:	4606      	mov	r6, r0
 8008a36:	b360      	cbz	r0, 8008a92 <__ssputs_r+0xa2>
 8008a38:	6921      	ldr	r1, [r4, #16]
 8008a3a:	464a      	mov	r2, r9
 8008a3c:	f000 faf6 	bl	800902c <memcpy>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4a:	81a3      	strh	r3, [r4, #12]
 8008a4c:	6126      	str	r6, [r4, #16]
 8008a4e:	6165      	str	r5, [r4, #20]
 8008a50:	444e      	add	r6, r9
 8008a52:	eba5 0509 	sub.w	r5, r5, r9
 8008a56:	6026      	str	r6, [r4, #0]
 8008a58:	60a5      	str	r5, [r4, #8]
 8008a5a:	463e      	mov	r6, r7
 8008a5c:	42be      	cmp	r6, r7
 8008a5e:	d900      	bls.n	8008a62 <__ssputs_r+0x72>
 8008a60:	463e      	mov	r6, r7
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	4632      	mov	r2, r6
 8008a66:	4641      	mov	r1, r8
 8008a68:	f000 fab6 	bl	8008fd8 <memmove>
 8008a6c:	68a3      	ldr	r3, [r4, #8]
 8008a6e:	1b9b      	subs	r3, r3, r6
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	4433      	add	r3, r6
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a7e:	462a      	mov	r2, r5
 8008a80:	f000 fae2 	bl	8009048 <_realloc_r>
 8008a84:	4606      	mov	r6, r0
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d1e0      	bne.n	8008a4c <__ssputs_r+0x5c>
 8008a8a:	6921      	ldr	r1, [r4, #16]
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f7ff febf 	bl	8008810 <_free_r>
 8008a92:	230c      	movs	r3, #12
 8008a94:	f8ca 3000 	str.w	r3, [sl]
 8008a98:	89a3      	ldrh	r3, [r4, #12]
 8008a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aa4:	e7e9      	b.n	8008a7a <__ssputs_r+0x8a>
	...

08008aa8 <_svfiprintf_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	4698      	mov	r8, r3
 8008aae:	898b      	ldrh	r3, [r1, #12]
 8008ab0:	061b      	lsls	r3, r3, #24
 8008ab2:	b09d      	sub	sp, #116	; 0x74
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	d510      	bpl.n	8008ade <_svfiprintf_r+0x36>
 8008abc:	690b      	ldr	r3, [r1, #16]
 8008abe:	b973      	cbnz	r3, 8008ade <_svfiprintf_r+0x36>
 8008ac0:	2140      	movs	r1, #64	; 0x40
 8008ac2:	f7ff ff11 	bl	80088e8 <_malloc_r>
 8008ac6:	6028      	str	r0, [r5, #0]
 8008ac8:	6128      	str	r0, [r5, #16]
 8008aca:	b930      	cbnz	r0, 8008ada <_svfiprintf_r+0x32>
 8008acc:	230c      	movs	r3, #12
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad4:	b01d      	add	sp, #116	; 0x74
 8008ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ada:	2340      	movs	r3, #64	; 0x40
 8008adc:	616b      	str	r3, [r5, #20]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aec:	2330      	movs	r3, #48	; 0x30
 8008aee:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8008c8c <_svfiprintf_r+0x1e4>
 8008af2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af6:	f04f 0901 	mov.w	r9, #1
 8008afa:	4623      	mov	r3, r4
 8008afc:	469a      	mov	sl, r3
 8008afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b02:	b10a      	cbz	r2, 8008b08 <_svfiprintf_r+0x60>
 8008b04:	2a25      	cmp	r2, #37	; 0x25
 8008b06:	d1f9      	bne.n	8008afc <_svfiprintf_r+0x54>
 8008b08:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0c:	d00b      	beq.n	8008b26 <_svfiprintf_r+0x7e>
 8008b0e:	465b      	mov	r3, fp
 8008b10:	4622      	mov	r2, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ff6b 	bl	80089f0 <__ssputs_r>
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f000 80a7 	beq.w	8008c6e <_svfiprintf_r+0x1c6>
 8008b20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b22:	445a      	add	r2, fp
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 809f 	beq.w	8008c6e <_svfiprintf_r+0x1c6>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3a:	f10a 0a01 	add.w	sl, sl, #1
 8008b3e:	9304      	str	r3, [sp, #16]
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b46:	931a      	str	r3, [sp, #104]	; 0x68
 8008b48:	4654      	mov	r4, sl
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b50:	484e      	ldr	r0, [pc, #312]	; (8008c8c <_svfiprintf_r+0x1e4>)
 8008b52:	f7f7 fbad 	bl	80002b0 <memchr>
 8008b56:	9a04      	ldr	r2, [sp, #16]
 8008b58:	b9d8      	cbnz	r0, 8008b92 <_svfiprintf_r+0xea>
 8008b5a:	06d0      	lsls	r0, r2, #27
 8008b5c:	bf44      	itt	mi
 8008b5e:	2320      	movmi	r3, #32
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b64:	0711      	lsls	r1, r2, #28
 8008b66:	bf44      	itt	mi
 8008b68:	232b      	movmi	r3, #43	; 0x2b
 8008b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b2a      	cmp	r3, #42	; 0x2a
 8008b74:	d015      	beq.n	8008ba2 <_svfiprintf_r+0xfa>
 8008b76:	9a07      	ldr	r2, [sp, #28]
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4621      	mov	r1, r4
 8008b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b86:	3b30      	subs	r3, #48	; 0x30
 8008b88:	2b09      	cmp	r3, #9
 8008b8a:	d94b      	bls.n	8008c24 <_svfiprintf_r+0x17c>
 8008b8c:	b1b0      	cbz	r0, 8008bbc <_svfiprintf_r+0x114>
 8008b8e:	9207      	str	r2, [sp, #28]
 8008b90:	e014      	b.n	8008bbc <_svfiprintf_r+0x114>
 8008b92:	eba0 0308 	sub.w	r3, r0, r8
 8008b96:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	46a2      	mov	sl, r4
 8008ba0:	e7d2      	b.n	8008b48 <_svfiprintf_r+0xa0>
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	1d19      	adds	r1, r3, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	9103      	str	r1, [sp, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbb      	ittet	lt
 8008bae:	425b      	neglt	r3, r3
 8008bb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb4:	9307      	strge	r3, [sp, #28]
 8008bb6:	9307      	strlt	r3, [sp, #28]
 8008bb8:	bfb8      	it	lt
 8008bba:	9204      	strlt	r2, [sp, #16]
 8008bbc:	7823      	ldrb	r3, [r4, #0]
 8008bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc0:	d10a      	bne.n	8008bd8 <_svfiprintf_r+0x130>
 8008bc2:	7863      	ldrb	r3, [r4, #1]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d132      	bne.n	8008c2e <_svfiprintf_r+0x186>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	1d1a      	adds	r2, r3, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	9203      	str	r2, [sp, #12]
 8008bd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd4:	3402      	adds	r4, #2
 8008bd6:	9305      	str	r3, [sp, #20]
 8008bd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8008c9c <_svfiprintf_r+0x1f4>
 8008bdc:	7821      	ldrb	r1, [r4, #0]
 8008bde:	2203      	movs	r2, #3
 8008be0:	4650      	mov	r0, sl
 8008be2:	f7f7 fb65 	bl	80002b0 <memchr>
 8008be6:	b138      	cbz	r0, 8008bf8 <_svfiprintf_r+0x150>
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	eba0 000a 	sub.w	r0, r0, sl
 8008bee:	2240      	movs	r2, #64	; 0x40
 8008bf0:	4082      	lsls	r2, r0
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	3401      	adds	r4, #1
 8008bf6:	9304      	str	r3, [sp, #16]
 8008bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfc:	4824      	ldr	r0, [pc, #144]	; (8008c90 <_svfiprintf_r+0x1e8>)
 8008bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c02:	2206      	movs	r2, #6
 8008c04:	f7f7 fb54 	bl	80002b0 <memchr>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d036      	beq.n	8008c7a <_svfiprintf_r+0x1d2>
 8008c0c:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <_svfiprintf_r+0x1ec>)
 8008c0e:	bb1b      	cbnz	r3, 8008c58 <_svfiprintf_r+0x1b0>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	3308      	adds	r3, #8
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	4433      	add	r3, r6
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	e76a      	b.n	8008afa <_svfiprintf_r+0x52>
 8008c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c28:	460c      	mov	r4, r1
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e7a8      	b.n	8008b80 <_svfiprintf_r+0xd8>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	3401      	adds	r4, #1
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	4619      	mov	r1, r3
 8008c36:	f04f 0c0a 	mov.w	ip, #10
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c40:	3a30      	subs	r2, #48	; 0x30
 8008c42:	2a09      	cmp	r2, #9
 8008c44:	d903      	bls.n	8008c4e <_svfiprintf_r+0x1a6>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c6      	beq.n	8008bd8 <_svfiprintf_r+0x130>
 8008c4a:	9105      	str	r1, [sp, #20]
 8008c4c:	e7c4      	b.n	8008bd8 <_svfiprintf_r+0x130>
 8008c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c52:	4604      	mov	r4, r0
 8008c54:	2301      	movs	r3, #1
 8008c56:	e7f0      	b.n	8008c3a <_svfiprintf_r+0x192>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <_svfiprintf_r+0x1f0>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4638      	mov	r0, r7
 8008c64:	f3af 8000 	nop.w
 8008c68:	1c42      	adds	r2, r0, #1
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	d1d6      	bne.n	8008c1c <_svfiprintf_r+0x174>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	065b      	lsls	r3, r3, #25
 8008c72:	f53f af2d 	bmi.w	8008ad0 <_svfiprintf_r+0x28>
 8008c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c78:	e72c      	b.n	8008ad4 <_svfiprintf_r+0x2c>
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_svfiprintf_r+0x1f0>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4638      	mov	r0, r7
 8008c86:	f000 f879 	bl	8008d7c <_printf_i>
 8008c8a:	e7ed      	b.n	8008c68 <_svfiprintf_r+0x1c0>
 8008c8c:	0800942c 	.word	0x0800942c
 8008c90:	08009436 	.word	0x08009436
 8008c94:	00000000 	.word	0x00000000
 8008c98:	080089f1 	.word	0x080089f1
 8008c9c:	08009432 	.word	0x08009432

08008ca0 <_printf_common>:
 8008ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	4698      	mov	r8, r3
 8008ca8:	688a      	ldr	r2, [r1, #8]
 8008caa:	690b      	ldr	r3, [r1, #16]
 8008cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	bfb8      	it	lt
 8008cb4:	4613      	movlt	r3, r2
 8008cb6:	6033      	str	r3, [r6, #0]
 8008cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b10a      	cbz	r2, 8008cc6 <_printf_common+0x26>
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	6033      	str	r3, [r6, #0]
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	0699      	lsls	r1, r3, #26
 8008cca:	bf42      	ittt	mi
 8008ccc:	6833      	ldrmi	r3, [r6, #0]
 8008cce:	3302      	addmi	r3, #2
 8008cd0:	6033      	strmi	r3, [r6, #0]
 8008cd2:	6825      	ldr	r5, [r4, #0]
 8008cd4:	f015 0506 	ands.w	r5, r5, #6
 8008cd8:	d106      	bne.n	8008ce8 <_printf_common+0x48>
 8008cda:	f104 0a19 	add.w	sl, r4, #25
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	6832      	ldr	r2, [r6, #0]
 8008ce2:	1a9b      	subs	r3, r3, r2
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dc26      	bgt.n	8008d36 <_printf_common+0x96>
 8008ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	3b00      	subs	r3, #0
 8008cf0:	bf18      	it	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	0692      	lsls	r2, r2, #26
 8008cf6:	d42b      	bmi.n	8008d50 <_printf_common+0xb0>
 8008cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c8      	blx	r9
 8008d02:	3001      	adds	r0, #1
 8008d04:	d01e      	beq.n	8008d44 <_printf_common+0xa4>
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	6922      	ldr	r2, [r4, #16]
 8008d0a:	f003 0306 	and.w	r3, r3, #6
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	bf02      	ittt	eq
 8008d12:	68e5      	ldreq	r5, [r4, #12]
 8008d14:	6833      	ldreq	r3, [r6, #0]
 8008d16:	1aed      	subeq	r5, r5, r3
 8008d18:	68a3      	ldr	r3, [r4, #8]
 8008d1a:	bf0c      	ite	eq
 8008d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d20:	2500      	movne	r5, #0
 8008d22:	4293      	cmp	r3, r2
 8008d24:	bfc4      	itt	gt
 8008d26:	1a9b      	subgt	r3, r3, r2
 8008d28:	18ed      	addgt	r5, r5, r3
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	341a      	adds	r4, #26
 8008d2e:	42b5      	cmp	r5, r6
 8008d30:	d11a      	bne.n	8008d68 <_printf_common+0xc8>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e008      	b.n	8008d48 <_printf_common+0xa8>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4652      	mov	r2, sl
 8008d3a:	4641      	mov	r1, r8
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	47c8      	blx	r9
 8008d40:	3001      	adds	r0, #1
 8008d42:	d103      	bne.n	8008d4c <_printf_common+0xac>
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	e7c6      	b.n	8008cde <_printf_common+0x3e>
 8008d50:	18e1      	adds	r1, r4, r3
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	2030      	movs	r0, #48	; 0x30
 8008d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d5a:	4422      	add	r2, r4
 8008d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d64:	3302      	adds	r3, #2
 8008d66:	e7c7      	b.n	8008cf8 <_printf_common+0x58>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c8      	blx	r9
 8008d72:	3001      	adds	r0, #1
 8008d74:	d0e6      	beq.n	8008d44 <_printf_common+0xa4>
 8008d76:	3601      	adds	r6, #1
 8008d78:	e7d9      	b.n	8008d2e <_printf_common+0x8e>
	...

08008d7c <_printf_i>:
 8008d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	7e0f      	ldrb	r7, [r1, #24]
 8008d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d84:	2f78      	cmp	r7, #120	; 0x78
 8008d86:	4691      	mov	r9, r2
 8008d88:	4680      	mov	r8, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	469a      	mov	sl, r3
 8008d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d92:	d807      	bhi.n	8008da4 <_printf_i+0x28>
 8008d94:	2f62      	cmp	r7, #98	; 0x62
 8008d96:	d80a      	bhi.n	8008dae <_printf_i+0x32>
 8008d98:	2f00      	cmp	r7, #0
 8008d9a:	f000 80e0 	beq.w	8008f5e <_printf_i+0x1e2>
 8008d9e:	2f58      	cmp	r7, #88	; 0x58
 8008da0:	f000 80bb 	beq.w	8008f1a <_printf_i+0x19e>
 8008da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dac:	e03a      	b.n	8008e24 <_printf_i+0xa8>
 8008dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008db2:	2b15      	cmp	r3, #21
 8008db4:	d8f6      	bhi.n	8008da4 <_printf_i+0x28>
 8008db6:	a101      	add	r1, pc, #4	; (adr r1, 8008dbc <_printf_i+0x40>)
 8008db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dbc:	08008e15 	.word	0x08008e15
 8008dc0:	08008e29 	.word	0x08008e29
 8008dc4:	08008da5 	.word	0x08008da5
 8008dc8:	08008da5 	.word	0x08008da5
 8008dcc:	08008da5 	.word	0x08008da5
 8008dd0:	08008da5 	.word	0x08008da5
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008da5 	.word	0x08008da5
 8008ddc:	08008da5 	.word	0x08008da5
 8008de0:	08008da5 	.word	0x08008da5
 8008de4:	08008da5 	.word	0x08008da5
 8008de8:	08008f45 	.word	0x08008f45
 8008dec:	08008eb9 	.word	0x08008eb9
 8008df0:	08008efb 	.word	0x08008efb
 8008df4:	08008da5 	.word	0x08008da5
 8008df8:	08008da5 	.word	0x08008da5
 8008dfc:	08008f67 	.word	0x08008f67
 8008e00:	08008da5 	.word	0x08008da5
 8008e04:	08008eb9 	.word	0x08008eb9
 8008e08:	08008da5 	.word	0x08008da5
 8008e0c:	08008da5 	.word	0x08008da5
 8008e10:	08008f03 	.word	0x08008f03
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	1d1a      	adds	r2, r3, #4
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0ab      	b.n	8008f80 <_printf_i+0x204>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	6829      	ldr	r1, [r5, #0]
 8008e2c:	061f      	lsls	r7, r3, #24
 8008e2e:	f101 0004 	add.w	r0, r1, #4
 8008e32:	6028      	str	r0, [r5, #0]
 8008e34:	d501      	bpl.n	8008e3a <_printf_i+0xbe>
 8008e36:	680d      	ldr	r5, [r1, #0]
 8008e38:	e003      	b.n	8008e42 <_printf_i+0xc6>
 8008e3a:	065e      	lsls	r6, r3, #25
 8008e3c:	d5fb      	bpl.n	8008e36 <_printf_i+0xba>
 8008e3e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008e42:	6861      	ldr	r1, [r4, #4]
 8008e44:	2d00      	cmp	r5, #0
 8008e46:	da7a      	bge.n	8008f3e <_printf_i+0x1c2>
 8008e48:	202d      	movs	r0, #45	; 0x2d
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008e50:	60a1      	str	r1, [r4, #8]
 8008e52:	da2d      	bge.n	8008eb0 <_printf_i+0x134>
 8008e54:	485e      	ldr	r0, [pc, #376]	; (8008fd0 <_printf_i+0x254>)
 8008e56:	426d      	negs	r5, r5
 8008e58:	230a      	movs	r3, #10
 8008e5a:	4616      	mov	r6, r2
 8008e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e60:	fb03 5711 	mls	r7, r3, r1, r5
 8008e64:	5dc7      	ldrb	r7, [r0, r7]
 8008e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e6a:	462f      	mov	r7, r5
 8008e6c:	42bb      	cmp	r3, r7
 8008e6e:	460d      	mov	r5, r1
 8008e70:	d9f4      	bls.n	8008e5c <_printf_i+0xe0>
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	d10b      	bne.n	8008e8e <_printf_i+0x112>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	07df      	lsls	r7, r3, #31
 8008e7a:	d508      	bpl.n	8008e8e <_printf_i+0x112>
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	6861      	ldr	r1, [r4, #4]
 8008e80:	4299      	cmp	r1, r3
 8008e82:	bfde      	ittt	le
 8008e84:	2330      	movle	r3, #48	; 0x30
 8008e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e8a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008e8e:	1b92      	subs	r2, r2, r6
 8008e90:	6122      	str	r2, [r4, #16]
 8008e92:	f8cd a000 	str.w	sl, [sp]
 8008e96:	464b      	mov	r3, r9
 8008e98:	aa03      	add	r2, sp, #12
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	f7ff feff 	bl	8008ca0 <_printf_common>
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d171      	bne.n	8008f8a <_printf_i+0x20e>
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eaa:	b004      	add	sp, #16
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb0:	f023 0304 	bic.w	r3, r3, #4
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	e7cd      	b.n	8008e54 <_printf_i+0xd8>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	1d19      	adds	r1, r3, #4
 8008ebe:	6029      	str	r1, [r5, #0]
 8008ec0:	0605      	lsls	r5, r0, #24
 8008ec2:	d501      	bpl.n	8008ec8 <_printf_i+0x14c>
 8008ec4:	681d      	ldr	r5, [r3, #0]
 8008ec6:	e002      	b.n	8008ece <_printf_i+0x152>
 8008ec8:	0641      	lsls	r1, r0, #25
 8008eca:	d5fb      	bpl.n	8008ec4 <_printf_i+0x148>
 8008ecc:	881d      	ldrh	r5, [r3, #0]
 8008ece:	4840      	ldr	r0, [pc, #256]	; (8008fd0 <_printf_i+0x254>)
 8008ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ed2:	bf14      	ite	ne
 8008ed4:	230a      	movne	r3, #10
 8008ed6:	2308      	moveq	r3, #8
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ede:	6866      	ldr	r6, [r4, #4]
 8008ee0:	60a6      	str	r6, [r4, #8]
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	dbb9      	blt.n	8008e5a <_printf_i+0xde>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	f021 0104 	bic.w	r1, r1, #4
 8008eec:	6021      	str	r1, [r4, #0]
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	d1b3      	bne.n	8008e5a <_printf_i+0xde>
 8008ef2:	2e00      	cmp	r6, #0
 8008ef4:	d1b1      	bne.n	8008e5a <_printf_i+0xde>
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	e7bb      	b.n	8008e72 <_printf_i+0xf6>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f043 0320 	orr.w	r3, r3, #32
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	4834      	ldr	r0, [pc, #208]	; (8008fd4 <_printf_i+0x258>)
 8008f04:	2778      	movs	r7, #120	; 0x78
 8008f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f0a:	6829      	ldr	r1, [r5, #0]
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	1d0e      	adds	r6, r1, #4
 8008f10:	602e      	str	r6, [r5, #0]
 8008f12:	061e      	lsls	r6, r3, #24
 8008f14:	d503      	bpl.n	8008f1e <_printf_i+0x1a2>
 8008f16:	680d      	ldr	r5, [r1, #0]
 8008f18:	e004      	b.n	8008f24 <_printf_i+0x1a8>
 8008f1a:	482d      	ldr	r0, [pc, #180]	; (8008fd0 <_printf_i+0x254>)
 8008f1c:	e7f3      	b.n	8008f06 <_printf_i+0x18a>
 8008f1e:	065d      	lsls	r5, r3, #25
 8008f20:	d5f9      	bpl.n	8008f16 <_printf_i+0x19a>
 8008f22:	880d      	ldrh	r5, [r1, #0]
 8008f24:	07d9      	lsls	r1, r3, #31
 8008f26:	bf44      	itt	mi
 8008f28:	f043 0320 	orrmi.w	r3, r3, #32
 8008f2c:	6023      	strmi	r3, [r4, #0]
 8008f2e:	b10d      	cbz	r5, 8008f34 <_printf_i+0x1b8>
 8008f30:	2310      	movs	r3, #16
 8008f32:	e7d1      	b.n	8008ed8 <_printf_i+0x15c>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f023 0320 	bic.w	r3, r3, #32
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	e7f8      	b.n	8008f30 <_printf_i+0x1b4>
 8008f3e:	4824      	ldr	r0, [pc, #144]	; (8008fd0 <_printf_i+0x254>)
 8008f40:	230a      	movs	r3, #10
 8008f42:	e7cc      	b.n	8008ede <_printf_i+0x162>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	6826      	ldr	r6, [r4, #0]
 8008f48:	6961      	ldr	r1, [r4, #20]
 8008f4a:	1d18      	adds	r0, r3, #4
 8008f4c:	6028      	str	r0, [r5, #0]
 8008f4e:	0635      	lsls	r5, r6, #24
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	d501      	bpl.n	8008f58 <_printf_i+0x1dc>
 8008f54:	6019      	str	r1, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <_printf_i+0x1e2>
 8008f58:	0670      	lsls	r0, r6, #25
 8008f5a:	d5fb      	bpl.n	8008f54 <_printf_i+0x1d8>
 8008f5c:	8019      	strh	r1, [r3, #0]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6123      	str	r3, [r4, #16]
 8008f62:	4616      	mov	r6, r2
 8008f64:	e795      	b.n	8008e92 <_printf_i+0x116>
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	1d1a      	adds	r2, r3, #4
 8008f6a:	602a      	str	r2, [r5, #0]
 8008f6c:	681e      	ldr	r6, [r3, #0]
 8008f6e:	6862      	ldr	r2, [r4, #4]
 8008f70:	2100      	movs	r1, #0
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7f7 f99c 	bl	80002b0 <memchr>
 8008f78:	b108      	cbz	r0, 8008f7e <_printf_i+0x202>
 8008f7a:	1b80      	subs	r0, r0, r6
 8008f7c:	6060      	str	r0, [r4, #4]
 8008f7e:	6863      	ldr	r3, [r4, #4]
 8008f80:	6123      	str	r3, [r4, #16]
 8008f82:	2300      	movs	r3, #0
 8008f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f88:	e783      	b.n	8008e92 <_printf_i+0x116>
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	4649      	mov	r1, r9
 8008f90:	4640      	mov	r0, r8
 8008f92:	47d0      	blx	sl
 8008f94:	3001      	adds	r0, #1
 8008f96:	d086      	beq.n	8008ea6 <_printf_i+0x12a>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	079b      	lsls	r3, r3, #30
 8008f9c:	d414      	bmi.n	8008fc8 <_printf_i+0x24c>
 8008f9e:	68e0      	ldr	r0, [r4, #12]
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	4298      	cmp	r0, r3
 8008fa4:	bfb8      	it	lt
 8008fa6:	4618      	movlt	r0, r3
 8008fa8:	e77f      	b.n	8008eaa <_printf_i+0x12e>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4632      	mov	r2, r6
 8008fae:	4649      	mov	r1, r9
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	47d0      	blx	sl
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f43f af76 	beq.w	8008ea6 <_printf_i+0x12a>
 8008fba:	3501      	adds	r5, #1
 8008fbc:	68e3      	ldr	r3, [r4, #12]
 8008fbe:	9903      	ldr	r1, [sp, #12]
 8008fc0:	1a5b      	subs	r3, r3, r1
 8008fc2:	42ab      	cmp	r3, r5
 8008fc4:	dcf1      	bgt.n	8008faa <_printf_i+0x22e>
 8008fc6:	e7ea      	b.n	8008f9e <_printf_i+0x222>
 8008fc8:	2500      	movs	r5, #0
 8008fca:	f104 0619 	add.w	r6, r4, #25
 8008fce:	e7f5      	b.n	8008fbc <_printf_i+0x240>
 8008fd0:	0800943d 	.word	0x0800943d
 8008fd4:	0800944e 	.word	0x0800944e

08008fd8 <memmove>:
 8008fd8:	4288      	cmp	r0, r1
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	eb01 0402 	add.w	r4, r1, r2
 8008fe0:	d902      	bls.n	8008fe8 <memmove+0x10>
 8008fe2:	4284      	cmp	r4, r0
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	d807      	bhi.n	8008ff8 <memmove+0x20>
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	42a1      	cmp	r1, r4
 8008fec:	d008      	beq.n	8009000 <memmove+0x28>
 8008fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ff6:	e7f8      	b.n	8008fea <memmove+0x12>
 8008ff8:	4402      	add	r2, r0
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	d100      	bne.n	8009002 <memmove+0x2a>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900a:	e7f7      	b.n	8008ffc <memmove+0x24>

0800900c <_sbrk_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d06      	ldr	r5, [pc, #24]	; (8009028 <_sbrk_r+0x1c>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	602b      	str	r3, [r5, #0]
 8009018:	f7f8 f882 	bl	8001120 <_sbrk>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_sbrk_r+0x1a>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_sbrk_r+0x1a>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	24031128 	.word	0x24031128

0800902c <memcpy>:
 800902c:	440a      	add	r2, r1
 800902e:	4291      	cmp	r1, r2
 8009030:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009034:	d100      	bne.n	8009038 <memcpy+0xc>
 8009036:	4770      	bx	lr
 8009038:	b510      	push	{r4, lr}
 800903a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009042:	4291      	cmp	r1, r2
 8009044:	d1f9      	bne.n	800903a <memcpy+0xe>
 8009046:	bd10      	pop	{r4, pc}

08009048 <_realloc_r>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	4680      	mov	r8, r0
 800904e:	4615      	mov	r5, r2
 8009050:	460c      	mov	r4, r1
 8009052:	b921      	cbnz	r1, 800905e <_realloc_r+0x16>
 8009054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009058:	4611      	mov	r1, r2
 800905a:	f7ff bc45 	b.w	80088e8 <_malloc_r>
 800905e:	b92a      	cbnz	r2, 800906c <_realloc_r+0x24>
 8009060:	f7ff fbd6 	bl	8008810 <_free_r>
 8009064:	2400      	movs	r4, #0
 8009066:	4620      	mov	r0, r4
 8009068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906c:	f000 f81a 	bl	80090a4 <_malloc_usable_size_r>
 8009070:	4285      	cmp	r5, r0
 8009072:	4606      	mov	r6, r0
 8009074:	d802      	bhi.n	800907c <_realloc_r+0x34>
 8009076:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800907a:	d8f4      	bhi.n	8009066 <_realloc_r+0x1e>
 800907c:	4629      	mov	r1, r5
 800907e:	4640      	mov	r0, r8
 8009080:	f7ff fc32 	bl	80088e8 <_malloc_r>
 8009084:	4607      	mov	r7, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	d0ec      	beq.n	8009064 <_realloc_r+0x1c>
 800908a:	42b5      	cmp	r5, r6
 800908c:	462a      	mov	r2, r5
 800908e:	4621      	mov	r1, r4
 8009090:	bf28      	it	cs
 8009092:	4632      	movcs	r2, r6
 8009094:	f7ff ffca 	bl	800902c <memcpy>
 8009098:	4621      	mov	r1, r4
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff fbb8 	bl	8008810 <_free_r>
 80090a0:	463c      	mov	r4, r7
 80090a2:	e7e0      	b.n	8009066 <_realloc_r+0x1e>

080090a4 <_malloc_usable_size_r>:
 80090a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a8:	1f18      	subs	r0, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfbc      	itt	lt
 80090ae:	580b      	ldrlt	r3, [r1, r0]
 80090b0:	18c0      	addlt	r0, r0, r3
 80090b2:	4770      	bx	lr

080090b4 <__udivmoddi4>:
 80090b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	4686      	mov	lr, r0
 80090ba:	468c      	mov	ip, r1
 80090bc:	4608      	mov	r0, r1
 80090be:	9e08      	ldr	r6, [sp, #32]
 80090c0:	4615      	mov	r5, r2
 80090c2:	4674      	mov	r4, lr
 80090c4:	4619      	mov	r1, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f040 80c2 	bne.w	8009250 <__udivmoddi4+0x19c>
 80090cc:	4285      	cmp	r5, r0
 80090ce:	fab2 f282 	clz	r2, r2
 80090d2:	d945      	bls.n	8009160 <__udivmoddi4+0xac>
 80090d4:	b14a      	cbz	r2, 80090ea <__udivmoddi4+0x36>
 80090d6:	f1c2 0320 	rsb	r3, r2, #32
 80090da:	fa00 fc02 	lsl.w	ip, r0, r2
 80090de:	fa2e f303 	lsr.w	r3, lr, r3
 80090e2:	4095      	lsls	r5, r2
 80090e4:	ea43 0c0c 	orr.w	ip, r3, ip
 80090e8:	4094      	lsls	r4, r2
 80090ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80090ee:	b2a8      	uxth	r0, r5
 80090f0:	fbbc f8fe 	udiv	r8, ip, lr
 80090f4:	0c23      	lsrs	r3, r4, #16
 80090f6:	fb0e cc18 	mls	ip, lr, r8, ip
 80090fa:	fb08 f900 	mul.w	r9, r8, r0
 80090fe:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009102:	4599      	cmp	r9, r3
 8009104:	d928      	bls.n	8009158 <__udivmoddi4+0xa4>
 8009106:	18eb      	adds	r3, r5, r3
 8009108:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 800910c:	d204      	bcs.n	8009118 <__udivmoddi4+0x64>
 800910e:	4599      	cmp	r9, r3
 8009110:	d902      	bls.n	8009118 <__udivmoddi4+0x64>
 8009112:	f1a8 0702 	sub.w	r7, r8, #2
 8009116:	442b      	add	r3, r5
 8009118:	eba3 0309 	sub.w	r3, r3, r9
 800911c:	b2a4      	uxth	r4, r4
 800911e:	fbb3 fcfe 	udiv	ip, r3, lr
 8009122:	fb0e 331c 	mls	r3, lr, ip, r3
 8009126:	fb0c f000 	mul.w	r0, ip, r0
 800912a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800912e:	42a0      	cmp	r0, r4
 8009130:	d914      	bls.n	800915c <__udivmoddi4+0xa8>
 8009132:	192c      	adds	r4, r5, r4
 8009134:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8009138:	d204      	bcs.n	8009144 <__udivmoddi4+0x90>
 800913a:	42a0      	cmp	r0, r4
 800913c:	d902      	bls.n	8009144 <__udivmoddi4+0x90>
 800913e:	f1ac 0302 	sub.w	r3, ip, #2
 8009142:	442c      	add	r4, r5
 8009144:	1a24      	subs	r4, r4, r0
 8009146:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 800914a:	b11e      	cbz	r6, 8009154 <__udivmoddi4+0xa0>
 800914c:	40d4      	lsrs	r4, r2
 800914e:	2300      	movs	r3, #0
 8009150:	6034      	str	r4, [r6, #0]
 8009152:	6073      	str	r3, [r6, #4]
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009158:	4647      	mov	r7, r8
 800915a:	e7dd      	b.n	8009118 <__udivmoddi4+0x64>
 800915c:	4663      	mov	r3, ip
 800915e:	e7f1      	b.n	8009144 <__udivmoddi4+0x90>
 8009160:	bb92      	cbnz	r2, 80091c8 <__udivmoddi4+0x114>
 8009162:	1b43      	subs	r3, r0, r5
 8009164:	2101      	movs	r1, #1
 8009166:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800916a:	b2af      	uxth	r7, r5
 800916c:	fbb3 fcfe 	udiv	ip, r3, lr
 8009170:	0c20      	lsrs	r0, r4, #16
 8009172:	fb0e 331c 	mls	r3, lr, ip, r3
 8009176:	fb0c f807 	mul.w	r8, ip, r7
 800917a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800917e:	4598      	cmp	r8, r3
 8009180:	d962      	bls.n	8009248 <__udivmoddi4+0x194>
 8009182:	18eb      	adds	r3, r5, r3
 8009184:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8009188:	d204      	bcs.n	8009194 <__udivmoddi4+0xe0>
 800918a:	4598      	cmp	r8, r3
 800918c:	d902      	bls.n	8009194 <__udivmoddi4+0xe0>
 800918e:	f1ac 0002 	sub.w	r0, ip, #2
 8009192:	442b      	add	r3, r5
 8009194:	eba3 0308 	sub.w	r3, r3, r8
 8009198:	b2a4      	uxth	r4, r4
 800919a:	fbb3 fcfe 	udiv	ip, r3, lr
 800919e:	fb0e 331c 	mls	r3, lr, ip, r3
 80091a2:	fb0c f707 	mul.w	r7, ip, r7
 80091a6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80091aa:	42a7      	cmp	r7, r4
 80091ac:	d94e      	bls.n	800924c <__udivmoddi4+0x198>
 80091ae:	192c      	adds	r4, r5, r4
 80091b0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 80091b4:	d204      	bcs.n	80091c0 <__udivmoddi4+0x10c>
 80091b6:	42a7      	cmp	r7, r4
 80091b8:	d902      	bls.n	80091c0 <__udivmoddi4+0x10c>
 80091ba:	f1ac 0302 	sub.w	r3, ip, #2
 80091be:	442c      	add	r4, r5
 80091c0:	1be4      	subs	r4, r4, r7
 80091c2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80091c6:	e7c0      	b.n	800914a <__udivmoddi4+0x96>
 80091c8:	f1c2 0320 	rsb	r3, r2, #32
 80091cc:	fa20 f103 	lsr.w	r1, r0, r3
 80091d0:	4095      	lsls	r5, r2
 80091d2:	4090      	lsls	r0, r2
 80091d4:	fa2e f303 	lsr.w	r3, lr, r3
 80091d8:	4303      	orrs	r3, r0
 80091da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80091de:	b2af      	uxth	r7, r5
 80091e0:	fbb1 fcfe 	udiv	ip, r1, lr
 80091e4:	fb0e 101c 	mls	r0, lr, ip, r1
 80091e8:	0c19      	lsrs	r1, r3, #16
 80091ea:	fb0c f807 	mul.w	r8, ip, r7
 80091ee:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091f2:	4588      	cmp	r8, r1
 80091f4:	fa04 f402 	lsl.w	r4, r4, r2
 80091f8:	d922      	bls.n	8009240 <__udivmoddi4+0x18c>
 80091fa:	1869      	adds	r1, r5, r1
 80091fc:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8009200:	d204      	bcs.n	800920c <__udivmoddi4+0x158>
 8009202:	4588      	cmp	r8, r1
 8009204:	d902      	bls.n	800920c <__udivmoddi4+0x158>
 8009206:	f1ac 0002 	sub.w	r0, ip, #2
 800920a:	4429      	add	r1, r5
 800920c:	eba1 0108 	sub.w	r1, r1, r8
 8009210:	b29b      	uxth	r3, r3
 8009212:	fbb1 fcfe 	udiv	ip, r1, lr
 8009216:	fb0e 111c 	mls	r1, lr, ip, r1
 800921a:	fb0c f707 	mul.w	r7, ip, r7
 800921e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009222:	429f      	cmp	r7, r3
 8009224:	d90e      	bls.n	8009244 <__udivmoddi4+0x190>
 8009226:	18eb      	adds	r3, r5, r3
 8009228:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800922c:	d204      	bcs.n	8009238 <__udivmoddi4+0x184>
 800922e:	429f      	cmp	r7, r3
 8009230:	d902      	bls.n	8009238 <__udivmoddi4+0x184>
 8009232:	f1ac 0102 	sub.w	r1, ip, #2
 8009236:	442b      	add	r3, r5
 8009238:	1bdb      	subs	r3, r3, r7
 800923a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800923e:	e792      	b.n	8009166 <__udivmoddi4+0xb2>
 8009240:	4660      	mov	r0, ip
 8009242:	e7e3      	b.n	800920c <__udivmoddi4+0x158>
 8009244:	4661      	mov	r1, ip
 8009246:	e7f7      	b.n	8009238 <__udivmoddi4+0x184>
 8009248:	4660      	mov	r0, ip
 800924a:	e7a3      	b.n	8009194 <__udivmoddi4+0xe0>
 800924c:	4663      	mov	r3, ip
 800924e:	e7b7      	b.n	80091c0 <__udivmoddi4+0x10c>
 8009250:	4283      	cmp	r3, r0
 8009252:	d906      	bls.n	8009262 <__udivmoddi4+0x1ae>
 8009254:	b916      	cbnz	r6, 800925c <__udivmoddi4+0x1a8>
 8009256:	2100      	movs	r1, #0
 8009258:	4608      	mov	r0, r1
 800925a:	e77b      	b.n	8009154 <__udivmoddi4+0xa0>
 800925c:	e9c6 e000 	strd	lr, r0, [r6]
 8009260:	e7f9      	b.n	8009256 <__udivmoddi4+0x1a2>
 8009262:	fab3 f783 	clz	r7, r3
 8009266:	b98f      	cbnz	r7, 800928c <__udivmoddi4+0x1d8>
 8009268:	4283      	cmp	r3, r0
 800926a:	d301      	bcc.n	8009270 <__udivmoddi4+0x1bc>
 800926c:	4572      	cmp	r2, lr
 800926e:	d808      	bhi.n	8009282 <__udivmoddi4+0x1ce>
 8009270:	ebbe 0402 	subs.w	r4, lr, r2
 8009274:	eb60 0303 	sbc.w	r3, r0, r3
 8009278:	2001      	movs	r0, #1
 800927a:	469c      	mov	ip, r3
 800927c:	b91e      	cbnz	r6, 8009286 <__udivmoddi4+0x1d2>
 800927e:	2100      	movs	r1, #0
 8009280:	e768      	b.n	8009154 <__udivmoddi4+0xa0>
 8009282:	4638      	mov	r0, r7
 8009284:	e7fa      	b.n	800927c <__udivmoddi4+0x1c8>
 8009286:	e9c6 4c00 	strd	r4, ip, [r6]
 800928a:	e7f8      	b.n	800927e <__udivmoddi4+0x1ca>
 800928c:	f1c7 0c20 	rsb	ip, r7, #32
 8009290:	40bb      	lsls	r3, r7
 8009292:	fa22 f40c 	lsr.w	r4, r2, ip
 8009296:	431c      	orrs	r4, r3
 8009298:	fa2e f10c 	lsr.w	r1, lr, ip
 800929c:	fa20 f30c 	lsr.w	r3, r0, ip
 80092a0:	40b8      	lsls	r0, r7
 80092a2:	4301      	orrs	r1, r0
 80092a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
 80092a8:	fa0e f507 	lsl.w	r5, lr, r7
 80092ac:	fbb3 f8f9 	udiv	r8, r3, r9
 80092b0:	fa1f fe84 	uxth.w	lr, r4
 80092b4:	fb09 3018 	mls	r0, r9, r8, r3
 80092b8:	0c0b      	lsrs	r3, r1, #16
 80092ba:	fb08 fa0e 	mul.w	sl, r8, lr
 80092be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092c2:	459a      	cmp	sl, r3
 80092c4:	fa02 f207 	lsl.w	r2, r2, r7
 80092c8:	d940      	bls.n	800934c <__udivmoddi4+0x298>
 80092ca:	18e3      	adds	r3, r4, r3
 80092cc:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80092d0:	d204      	bcs.n	80092dc <__udivmoddi4+0x228>
 80092d2:	459a      	cmp	sl, r3
 80092d4:	d902      	bls.n	80092dc <__udivmoddi4+0x228>
 80092d6:	f1a8 0002 	sub.w	r0, r8, #2
 80092da:	4423      	add	r3, r4
 80092dc:	eba3 030a 	sub.w	r3, r3, sl
 80092e0:	b289      	uxth	r1, r1
 80092e2:	fbb3 f8f9 	udiv	r8, r3, r9
 80092e6:	fb09 3318 	mls	r3, r9, r8, r3
 80092ea:	fb08 fe0e 	mul.w	lr, r8, lr
 80092ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80092f2:	458e      	cmp	lr, r1
 80092f4:	d92c      	bls.n	8009350 <__udivmoddi4+0x29c>
 80092f6:	1861      	adds	r1, r4, r1
 80092f8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80092fc:	d204      	bcs.n	8009308 <__udivmoddi4+0x254>
 80092fe:	458e      	cmp	lr, r1
 8009300:	d902      	bls.n	8009308 <__udivmoddi4+0x254>
 8009302:	f1a8 0302 	sub.w	r3, r8, #2
 8009306:	4421      	add	r1, r4
 8009308:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800930c:	fba0 9802 	umull	r9, r8, r0, r2
 8009310:	eba1 010e 	sub.w	r1, r1, lr
 8009314:	4541      	cmp	r1, r8
 8009316:	46ce      	mov	lr, r9
 8009318:	4643      	mov	r3, r8
 800931a:	d302      	bcc.n	8009322 <__udivmoddi4+0x26e>
 800931c:	d106      	bne.n	800932c <__udivmoddi4+0x278>
 800931e:	454d      	cmp	r5, r9
 8009320:	d204      	bcs.n	800932c <__udivmoddi4+0x278>
 8009322:	ebb9 0e02 	subs.w	lr, r9, r2
 8009326:	eb68 0304 	sbc.w	r3, r8, r4
 800932a:	3801      	subs	r0, #1
 800932c:	2e00      	cmp	r6, #0
 800932e:	d0a6      	beq.n	800927e <__udivmoddi4+0x1ca>
 8009330:	ebb5 020e 	subs.w	r2, r5, lr
 8009334:	eb61 0103 	sbc.w	r1, r1, r3
 8009338:	fa01 fc0c 	lsl.w	ip, r1, ip
 800933c:	fa22 f307 	lsr.w	r3, r2, r7
 8009340:	ea4c 0303 	orr.w	r3, ip, r3
 8009344:	40f9      	lsrs	r1, r7
 8009346:	e9c6 3100 	strd	r3, r1, [r6]
 800934a:	e798      	b.n	800927e <__udivmoddi4+0x1ca>
 800934c:	4640      	mov	r0, r8
 800934e:	e7c5      	b.n	80092dc <__udivmoddi4+0x228>
 8009350:	4643      	mov	r3, r8
 8009352:	e7d9      	b.n	8009308 <__udivmoddi4+0x254>

08009354 <_init>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	bf00      	nop
 8009358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935a:	bc08      	pop	{r3}
 800935c:	469e      	mov	lr, r3
 800935e:	4770      	bx	lr

08009360 <_fini>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr
