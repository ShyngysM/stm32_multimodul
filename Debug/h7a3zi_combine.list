
h7a3zi_combine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f6c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092f4  080092f4  000192f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092fc  080092fc  000192fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  08009304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000310a8  240000a0  080093a4  000200a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24031148  080093a4  00021148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022e85  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005044  00000000  00000000  00042f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001840  00000000  00000000  00047f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000132b  00000000  00000000  000497d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000336b4  00000000  00000000  0004ab03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e21  00000000  00000000  0007e1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015544c  00000000  00000000  00097fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      0000001e  00000000  00000000  001ed424  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005de0  00000000  00000000  001ed444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000191  00000000  00000000  001f3224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00001a6a  00000000  00000000  001f33b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b80c 	b.w	8000380 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f008 fdf8 	bl	8008f64 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__aeabi_idiv0>:
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <__do_global_dtors_aux>:
 8000384:	b510      	push	{r4, lr}
 8000386:	4c05      	ldr	r4, [pc, #20]	; (800039c <__do_global_dtors_aux+0x18>)
 8000388:	7823      	ldrb	r3, [r4, #0]
 800038a:	b933      	cbnz	r3, 800039a <__do_global_dtors_aux+0x16>
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <__do_global_dtors_aux+0x1c>)
 800038e:	b113      	cbz	r3, 8000396 <__do_global_dtors_aux+0x12>
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <__do_global_dtors_aux+0x20>)
 8000392:	f3af 8000 	nop.w
 8000396:	2301      	movs	r3, #1
 8000398:	7023      	strb	r3, [r4, #0]
 800039a:	bd10      	pop	{r4, pc}
 800039c:	240000a0 	.word	0x240000a0
 80003a0:	00000000 	.word	0x00000000
 80003a4:	08009204 	.word	0x08009204

080003a8 <frame_dummy>:
 80003a8:	b508      	push	{r3, lr}
 80003aa:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <frame_dummy+0x10>)
 80003ac:	b11b      	cbz	r3, 80003b6 <frame_dummy+0xe>
 80003ae:	4903      	ldr	r1, [pc, #12]	; (80003bc <frame_dummy+0x14>)
 80003b0:	4803      	ldr	r0, [pc, #12]	; (80003c0 <frame_dummy+0x18>)
 80003b2:	f3af 8000 	nop.w
 80003b6:	bd08      	pop	{r3, pc}
 80003b8:	00000000 	.word	0x00000000
 80003bc:	240000a4 	.word	0x240000a4
 80003c0:	08009204 	.word	0x08009204

080003c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80003c8:	f000 feda 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003cc:	f000 f866 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d0:	f000 f9fc 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003d4:	f000 f9a6 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80003d8:	f000 f9f0 	bl	80007bc <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80003dc:	f000 f8dc 	bl	8000598 <MX_ADC1_Init>
  MX_TIM16_Init();
 80003e0:	f000 f952 	bl	8000688 <MX_TIM16_Init>
  MX_TIM17_Init();
 80003e4:	f000 f978 	bl	80006d8 <MX_TIM17_Init>

  // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // Pumpe
  //  HAL_Delay(1500);

  // start
  STEPPERS_Init_TMR(&htim17); // nötig für init look also ISR CODE BEGIN 4
 80003e8:	4821      	ldr	r0, [pc, #132]	; (8000470 <main+0xac>)
 80003ea:	f007 fd6f 	bl	8007ecc <STEPPERS_Init_TMR>
  STEPPER_SetSpeed(STEPPER_MOTOR1, 14); // set RPM
 80003ee:	210e      	movs	r1, #14
 80003f0:	2000      	movs	r0, #0
 80003f2:	f007 fdb5 	bl	8007f60 <STEPPER_SetSpeed>

  // STEPPER_Step_NonBlocking(STEPPER_MOTOR1, 1048, DIR_CW); // rotate 180
  // HAL_Delay(4000);
  measure();
 80003f6:	f000 fb39 	bl	8000a6c <measure>
  // for (j = 0; j < i; j++) {
  //   uart_buf_len = sprintf(uart_buf, "%lu, %u \r\n", j, sensor_data[j]);
  //   HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  // }

  analyse();
 80003fa:	f000 fbc3 	bl	8000b84 <analyse>
  // for (j = 0; j < i; j++) {
  //   uart_buf_len = sprintf(uart_buf, "%lu, %u \r\n", j, sensor_data[j]);
  //   HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  // }

  uart_buf_len = sprintf(uart_buf, "Measurements \n");
 80003fe:	491d      	ldr	r1, [pc, #116]	; (8000474 <main+0xb0>)
 8000400:	481d      	ldr	r0, [pc, #116]	; (8000478 <main+0xb4>)
 8000402:	f008 f909 	bl	8008618 <siprintf>
 8000406:	4603      	mov	r3, r0
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <main+0xb8>)
 800040a:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <main+0xb8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	b29a      	uxth	r2, r3
 8000412:	2364      	movs	r3, #100	; 0x64
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0xb4>)
 8000416:	481a      	ldr	r0, [pc, #104]	; (8000480 <main+0xbc>)
 8000418:	f006 fa64 	bl	80068e4 <HAL_UART_Transmit>

  uart_buf_len =
      sprintf(uart_buf, "htime = %lu; pulses = %u;   \r\n", htime, pulses);
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <main+0xc0>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <main+0xc4>)
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	4919      	ldr	r1, [pc, #100]	; (800048c <main+0xc8>)
 8000426:	4814      	ldr	r0, [pc, #80]	; (8000478 <main+0xb4>)
 8000428:	f008 f8f6 	bl	8008618 <siprintf>
 800042c:	4603      	mov	r3, r0
  uart_buf_len =
 800042e:	4a13      	ldr	r2, [pc, #76]	; (800047c <main+0xb8>)
 8000430:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <main+0xb8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	b29a      	uxth	r2, r3
 8000438:	2364      	movs	r3, #100	; 0x64
 800043a:	490f      	ldr	r1, [pc, #60]	; (8000478 <main+0xb4>)
 800043c:	4810      	ldr	r0, [pc, #64]	; (8000480 <main+0xbc>)
 800043e:	f006 fa51 	bl	80068e4 <HAL_UART_Transmit>

  uart_buf_len =
      sprintf(uart_buf, "bad state = %d; vibr = %lu  \r\n", bad, vibr_begin);
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <main+0xcc>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <main+0xd0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4912      	ldr	r1, [pc, #72]	; (8000498 <main+0xd4>)
 800044e:	480a      	ldr	r0, [pc, #40]	; (8000478 <main+0xb4>)
 8000450:	f008 f8e2 	bl	8008618 <siprintf>
 8000454:	4603      	mov	r3, r0
  uart_buf_len =
 8000456:	4a09      	ldr	r2, [pc, #36]	; (800047c <main+0xb8>)
 8000458:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <main+0xb8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	b29a      	uxth	r2, r3
 8000460:	2364      	movs	r3, #100	; 0x64
 8000462:	4905      	ldr	r1, [pc, #20]	; (8000478 <main+0xb4>)
 8000464:	4806      	ldr	r0, [pc, #24]	; (8000480 <main+0xbc>)
 8000466:	f006 fa3d 	bl	80068e4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800046a:	bf00      	nop
 800046c:	e7fd      	b.n	800046a <main+0xa6>
 800046e:	bf00      	nop
 8000470:	2400016c 	.word	0x2400016c
 8000474:	0800921c 	.word	0x0800921c
 8000478:	24030f94 	.word	0x24030f94
 800047c:	24030fc8 	.word	0x24030fc8
 8000480:	240001b8 	.word	0x240001b8
 8000484:	24030fd4 	.word	0x24030fd4
 8000488:	24030fd0 	.word	0x24030fd0
 800048c:	0800922c 	.word	0x0800922c
 8000490:	24030fe1 	.word	0x24030fe1
 8000494:	24030fd8 	.word	0x24030fd8
 8000498:	0800924c 	.word	0x0800924c

0800049c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	; 0x70
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	224c      	movs	r2, #76	; 0x4c
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f008 f8d4 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2220      	movs	r2, #32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f008 f8ce 	bl	8008658 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80004bc:	4b34      	ldr	r3, [pc, #208]	; (8000590 <SystemClock_Config+0xf4>)
 80004be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c6:	2004      	movs	r0, #4
 80004c8:	f002 fb92 	bl	8002bf0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004cc:	2300      	movs	r3, #0
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <SystemClock_Config+0xf8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a2f      	ldr	r2, [pc, #188]	; (8000594 <SystemClock_Config+0xf8>)
 80004d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <SystemClock_Config+0xf8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80004e8:	bf00      	nop
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <SystemClock_Config+0xf8>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f6:	d1f8      	bne.n	80004ea <SystemClock_Config+0x4e>
  }

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <SystemClock_Config+0xf4>)
 80004fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004fc:	f023 0303 	bic.w	r3, r3, #3
 8000500:	4a23      	ldr	r2, [pc, #140]	; (8000590 <SystemClock_Config+0xf4>)
 8000502:	f043 0302 	orr.w	r3, r3, #2
 8000506:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 8000508:	2321      	movs	r3, #33	; 0x21
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
      RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800050c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000512:	2301      	movs	r3, #1
 8000514:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	2302      	movs	r3, #2
 800051c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000522:	2318      	movs	r3, #24
 8000524:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800052a:	2304      	movs	r3, #4
 800052c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000532:	230c      	movs	r3, #12
 8000534:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000536:	2300      	movs	r3, #0
 8000538:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fbae 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xb6>
    Error_Handler();
 800054e:	f000 fbcf 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2102      	movs	r1, #2
 8000576:	4618      	mov	r0, r3
 8000578:	f002 ff98 	bl	80034ac <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xea>
    Error_Handler();
 8000582:	f000 fbb5 	bl	8000cf0 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3770      	adds	r7, #112	; 0x70
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	58024400 	.word	0x58024400
 8000594:	58024800 	.word	0x58024800

08000598 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	615a      	str	r2, [r3, #20]
 80005ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <MX_ADC1_Init+0xe4>)
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <MX_ADC1_Init+0xe8>)
 80005c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_ADC1_Init+0xe4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <MX_ADC1_Init+0xe4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_ADC1_Init+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <MX_ADC1_Init+0xe4>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_ADC1_Init+0xe4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_ADC1_Init+0xe4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_ADC1_Init+0xe4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_ADC1_Init+0xe4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_ADC1_Init+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0xe4>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_ADC1_Init+0xe4>)
 800061a:	f001 f825 	bl	8001668 <HAL_ADC_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0x90>
    Error_Handler();
 8000624:	f000 fb64 	bl	8000cf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
   */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_ADC1_Init+0xe4>)
 8000634:	f001 ff66 	bl	8002504 <HAL_ADCEx_MultiModeConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xaa>
    Error_Handler();
 800063e:	f000 fb57 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_15;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0xec>)
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000646:	2306      	movs	r3, #6
 8000648:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000652:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000654:	2304      	movs	r3, #4
 8000656:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0xe4>)
 8000666:	f001 faf9 	bl	8001c5c <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0xdc>
    Error_Handler();
 8000670:	f000 fb3e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	240000bc 	.word	0x240000bc
 8000680:	40022000 	.word	0x40022000
 8000684:	3ef08000 	.word	0x3ef08000

08000688 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_TIM16_Init+0x48>)
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <MX_TIM16_Init+0x4c>)
 8000690:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600 - 1;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_TIM16_Init+0x48>)
 8000694:	f242 527f 	movw	r2, #9599	; 0x257f
 8000698:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_TIM16_Init+0x48>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000 - 1;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_TIM16_Init+0x48>)
 80006a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_TIM16_Init+0x48>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_TIM16_Init+0x48>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_TIM16_Init+0x48>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_TIM16_Init+0x48>)
 80006bc:	f005 fb30 	bl	8005d20 <HAL_TIM_Base_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM16_Init+0x42>
    Error_Handler();
 80006c6:	f000 fb13 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000120 	.word	0x24000120
 80006d4:	40014400 	.word	0x40014400

080006d8 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_TIM17_Init+0x44>)
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_TIM17_Init+0x48>)
 80006e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_TIM17_Init+0x44>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_TIM17_Init+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_TIM17_Init+0x44>)
 80006f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006f4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_TIM17_Init+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_TIM17_Init+0x44>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_TIM17_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_TIM17_Init+0x44>)
 800070a:	f005 fb09 	bl	8005d20 <HAL_TIM_Base_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM17_Init+0x40>
    Error_Handler();
 8000714:	f000 faec 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2400016c 	.word	0x2400016c
 8000720:	40014800 	.word	0x40014800

08000724 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_USART3_UART_Init+0x94>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 800076e:	f006 f869 	bl	8006844 <HAL_UART_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_USART3_UART_Init+0x58>
    Error_Handler();
 8000778:	f000 faba 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) !=
 800077c:	2100      	movs	r1, #0
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000780:	f007 f9a0 	bl	8007ac4 <HAL_UARTEx_SetTxFifoThreshold>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 800078a:	f000 fab1 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) !=
 800078e:	2100      	movs	r1, #0
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 8000792:	f007 f9d5 	bl	8007b40 <HAL_UARTEx_SetRxFifoThreshold>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 800079c:	f000 faa8 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_USART3_UART_Init+0x90>)
 80007a2:	f007 f956 	bl	8007a52 <HAL_UARTEx_DisableFifoMode>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 80007ac:	f000 faa0 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	240001b8 	.word	0x240001b8
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b95      	ldr	r3, [pc, #596]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	4a93      	ldr	r2, [pc, #588]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f2:	4b91      	ldr	r3, [pc, #580]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	623b      	str	r3, [r7, #32]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000800:	4b8d      	ldr	r3, [pc, #564]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	4a8c      	ldr	r2, [pc, #560]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000808:	f043 0320 	orr.w	r3, r3, #32
 800080c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000810:	4b89      	ldr	r3, [pc, #548]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b86      	ldr	r3, [pc, #536]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	4a84      	ldr	r2, [pc, #528]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082e:	4b82      	ldr	r3, [pc, #520]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b7e      	ldr	r3, [pc, #504]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	4a7d      	ldr	r2, [pc, #500]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084c:	4b7a      	ldr	r3, [pc, #488]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b77      	ldr	r3, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	4a75      	ldr	r2, [pc, #468]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086a:	4b73      	ldr	r3, [pc, #460]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000878:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	4a6e      	ldr	r2, [pc, #440]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000888:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <MX_GPIO_Init+0x26c>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	4a66      	ldr	r2, [pc, #408]	; (8000a38 <MX_GPIO_Init+0x26c>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a6:	4b64      	ldr	r3, [pc, #400]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	f003 0308 	and.w	r3, r3, #8
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b4:	4b60      	ldr	r3, [pc, #384]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80008b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ba:	4a5f      	ldr	r2, [pc, #380]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c4:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <MX_GPIO_Init+0x26c>)
 80008c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d8:	4858      	ldr	r0, [pc, #352]	; (8000a3c <MX_GPIO_Init+0x270>)
 80008da:	f002 f96f 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2120      	movs	r1, #32
 80008e2:	4857      	ldr	r0, [pc, #348]	; (8000a40 <MX_GPIO_Init+0x274>)
 80008e4:	f002 f96a 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | GPIO_PIN_6, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f244 0141 	movw	r1, #16449	; 0x4041
 80008ee:	4855      	ldr	r0, [pc, #340]	; (8000a44 <MX_GPIO_Init+0x278>)
 80008f0:	f002 f964 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13 | GPIO_PIN_14 | LD2_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f246 0102 	movw	r1, #24578	; 0x6002
 80008fa:	4853      	ldr	r0, [pc, #332]	; (8000a48 <MX_GPIO_Init+0x27c>)
 80008fc:	f002 f95e 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_14,
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 41a4 	mov.w	r1, #20992	; 0x5200
 8000906:	4851      	ldr	r0, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x280>)
 8000908:	f002 f958 	bl	8002bbc <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	484b      	ldr	r0, [pc, #300]	; (8000a50 <MX_GPIO_Init+0x284>)
 8000922:	f001 ff9b 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	483f      	ldr	r0, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x270>)
 8000940:	f001 ff8c 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000944:	2320      	movs	r3, #32
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4839      	ldr	r0, [pc, #228]	; (8000a40 <MX_GPIO_Init+0x274>)
 800095c:	f001 ff7e 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | GPIO_PIN_6;
 8000960:	f244 0341 	movw	r3, #16449	; 0x4041
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4832      	ldr	r0, [pc, #200]	; (8000a44 <MX_GPIO_Init+0x278>)
 800097a:	f001 ff6f 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | LD2_Pin;
 800097e:	f246 0302 	movw	r3, #24578	; 0x6002
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	482c      	ldr	r0, [pc, #176]	; (8000a48 <MX_GPIO_Init+0x27c>)
 8000998:	f001 ff60 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <MX_GPIO_Init+0x280>)
 80009b2:	f001 ff53 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	481d      	ldr	r0, [pc, #116]	; (8000a40 <MX_GPIO_Init+0x274>)
 80009cc:	f001 ff46 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_GPIO_Init+0x274>)
 80009ee:	f001 ff35 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 80009f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_GPIO_Init+0x274>)
 8000a0c:	f001 ff26 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_14;
 8000a10:	f44f 43a4 	mov.w	r3, #20992	; 0x5200
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_GPIO_Init+0x280>)
 8000a2a:	f001 ff17 	bl	800285c <HAL_GPIO_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	; 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58021400 	.word	0x58021400
 8000a40:	58020000 	.word	0x58020000
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	58020800 	.word	0x58020800

08000a54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// calling an ISR for STEPPER
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  STEPPER_TMR_OVF_ISR(htim);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f007 fd35 	bl	80084cc <STEPPER_TMR_OVF_ISR>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <measure>:

void measure(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  i = 0;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <measure+0xf0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  is_vibrating = false;
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <measure+0xf4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim16); // start tim16
 8000a7c:	4839      	ldr	r0, [pc, #228]	; (8000b64 <measure+0xf8>)
 8000a7e:	f005 f9a7 	bl	8005dd0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9,
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4837      	ldr	r0, [pc, #220]	; (8000b68 <measure+0xfc>)
 8000a8a:	f002 f897 	bl	8002bbc <HAL_GPIO_WritePin>
                    GPIO_PIN_SET); // set help signal (yellow led)

  while (tim_val_ms < 10000 - 1) // with presc of 9600 it is exactly 1 sec
 8000a8e:	e04f      	b.n	8000b30 <measure+0xc4>
  {

    if (!is_vibrating && tim_val_ms >= 2000 - 1) {
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <measure+0xf4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d013      	beq.n	8000ac6 <measure+0x5a>
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <measure+0x100>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d90d      	bls.n	8000ac6 <measure+0x5a>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET); // vibrator ON
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	482d      	ldr	r0, [pc, #180]	; (8000b68 <measure+0xfc>)
 8000ab2:	f002 f883 	bl	8002bbc <HAL_GPIO_WritePin>
      vibr_begin = i; // saving time of begin vibration
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <measure+0xf0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <measure+0x104>)
 8000abc:	6013      	str	r3, [r2, #0]
      is_vibrating = true;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <measure+0xf4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e013      	b.n	8000aee <measure+0x82>

    } else if (is_vibrating && tim_val_ms >= 3000 - 1) {
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <measure+0xf4>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00f      	beq.n	8000aee <measure+0x82>
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <measure+0x100>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d909      	bls.n	8000aee <measure+0x82>
      HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET); // vibrator OFF
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <measure+0xfc>)
 8000ae2:	f002 f86b 	bl	8002bbc <HAL_GPIO_WritePin>
      vibr_end = i; // saving time of end vibration
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <measure+0xf0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <measure+0x108>)
 8000aec:	6013      	str	r3, [r2, #0]
    }

    HAL_ADC_Start(&hadc1);
 8000aee:	4822      	ldr	r0, [pc, #136]	; (8000b78 <measure+0x10c>)
 8000af0:	f000 ff14 	bl	800191c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af8:	481f      	ldr	r0, [pc, #124]	; (8000b78 <measure+0x10c>)
 8000afa:	f000 ffc9 	bl	8001a90 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000afe:	481e      	ldr	r0, [pc, #120]	; (8000b78 <measure+0x10c>)
 8000b00:	f001 f89e 	bl	8001c40 <HAL_ADC_GetValue>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <measure+0x110>)
 8000b0a:	801a      	strh	r2, [r3, #0]
    sensor_data[i] = raw;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <measure+0xf0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <measure+0x110>)
 8000b12:	8811      	ldrh	r1, [r2, #0]
 8000b14:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <measure+0x114>)
 8000b16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    i++;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <measure+0xf0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <measure+0xf0>)
 8000b22:	6013      	str	r3, [r2, #0]
    tim_val_ms = __HAL_TIM_GET_COUNTER(&htim16);
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <measure+0xf8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <measure+0x100>)
 8000b2e:	801a      	strh	r2, [r3, #0]
  while (tim_val_ms < 10000 - 1) // with presc of 9600 it is exactly 1 sec
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <measure+0x100>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	f242 720e 	movw	r2, #9998	; 0x270e
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d9a9      	bls.n	8000a90 <measure+0x24>
  }
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET); // LED yellow
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <measure+0xfc>)
 8000b44:	f002 f83a 	bl	8002bbc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Stop_IT(&htim16);
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <measure+0xf8>)
 8000b4a:	f005 fa29 	bl	8005fa0 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <measure+0xf8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24030f8c 	.word	0x24030f8c
 8000b60:	24030fe0 	.word	0x24030fe0
 8000b64:	24000120 	.word	0x24000120
 8000b68:	58021800 	.word	0x58021800
 8000b6c:	24000248 	.word	0x24000248
 8000b70:	24030fd8 	.word	0x24030fd8
 8000b74:	24030fdc 	.word	0x24030fdc
 8000b78:	240000bc 	.word	0x240000bc
 8000b7c:	24030fcc 	.word	0x24030fcc
 8000b80:	2400024c 	.word	0x2400024c

08000b84 <analyse>:

void analyse(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  // digitalize signal v:[0,1]
  for (j = 0; j < i; j++) {
 8000b88:	4b51      	ldr	r3, [pc, #324]	; (8000cd0 <analyse+0x14c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e01b      	b.n	8000bc8 <analyse+0x44>
    if (sensor_data[j] < TRIGGER) { // aprox. 2V
 8000b90:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <analyse+0x14c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <analyse+0x150>)
 8000b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	f649 3326 	movw	r3, #39718	; 0x9b26
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d206      	bcs.n	8000bb2 <analyse+0x2e>
      sensor_data[j] = 0;
 8000ba4:	4b4a      	ldr	r3, [pc, #296]	; (8000cd0 <analyse+0x14c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <analyse+0x150>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000bb0:	e005      	b.n	8000bbe <analyse+0x3a>
    } else {
      sensor_data[j] = 1;
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <analyse+0x14c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a47      	ldr	r2, [pc, #284]	; (8000cd4 <analyse+0x150>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (j = 0; j < i; j++) {
 8000bbe:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <analyse+0x14c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <analyse+0x14c>)
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <analyse+0x14c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <analyse+0x154>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3dd      	bcc.n	8000b90 <analyse+0xc>
    }
  }
  // count pulses
  for (j = 0; j < i; j++) {
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <analyse+0x14c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e029      	b.n	8000c30 <analyse+0xac>
    edge = sensor_data[j + 1] - sensor_data[j];
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <analyse+0x14c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <analyse+0x150>)
 8000be4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <analyse+0x14c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4939      	ldr	r1, [pc, #228]	; (8000cd4 <analyse+0x150>)
 8000bee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <analyse+0x158>)
 8000bf8:	801a      	strh	r2, [r3, #0]
    if (edge == 1) { // count only negative pulses
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <analyse+0x158>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d105      	bne.n	8000c0e <analyse+0x8a>
      pulses++;
 8000c02:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <analyse+0x15c>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <analyse+0x15c>)
 8000c0c:	801a      	strh	r2, [r3, #0]
    }
    if (sensor_data[j] == 1) {
 8000c0e:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <analyse+0x14c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <analyse+0x150>)
 8000c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d104      	bne.n	8000c26 <analyse+0xa2>
      htime++;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <analyse+0x160>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <analyse+0x160>)
 8000c24:	6013      	str	r3, [r2, #0]
  for (j = 0; j < i; j++) {
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <analyse+0x14c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <analyse+0x14c>)
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <analyse+0x14c>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <analyse+0x154>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d3cf      	bcc.n	8000bdc <analyse+0x58>
    }
  }
  // check if sensor has been open before vibration
  bad = false;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <analyse+0x164>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  for (j = 0; j <= vibr_begin; j++) {
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <analyse+0x14c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	e00f      	b.n	8000c6a <analyse+0xe6>
    if (sensor_data[j] == 0) {
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <analyse+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <analyse+0x150>)
 8000c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d103      	bne.n	8000c60 <analyse+0xdc>
      bad = true;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <analyse+0x164>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
      break;
 8000c5e:	e00a      	b.n	8000c76 <analyse+0xf2>
  for (j = 0; j <= vibr_begin; j++) {
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <analyse+0x14c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <analyse+0x14c>)
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <analyse+0x14c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <analyse+0x168>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d9e9      	bls.n	8000c4a <analyse+0xc6>
    }
  }
  // check if sensor been open after vibration + Einschwingungszeit
  for (j = (uint32_t)(i * 0.75); j < i; j++) {
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <analyse+0x154>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c82:	eeb6 6b08 	vmov.f64	d6, #104	; 0x3f400000  0.750
 8000c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c8e:	ee17 2a90 	vmov	r2, s15
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <analyse+0x14c>)
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e00f      	b.n	8000cb8 <analyse+0x134>
    if (sensor_data[j] == 0) {
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <analyse+0x14c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <analyse+0x150>)
 8000c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <analyse+0x12a>
      bad = true;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <analyse+0x164>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
      break;
 8000cac:	e00b      	b.n	8000cc6 <analyse+0x142>
  for (j = (uint32_t)(i * 0.75); j < i; j++) {
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <analyse+0x14c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <analyse+0x14c>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <analyse+0x14c>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <analyse+0x154>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d3e9      	bcc.n	8000c98 <analyse+0x114>
    }
  }
  // find on ratio
  // t_rl = htime * 1/i;
  // on_ratio = t_rl/1000;
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	24030f90 	.word	0x24030f90
 8000cd4:	2400024c 	.word	0x2400024c
 8000cd8:	24030f8c 	.word	0x24030f8c
 8000cdc:	24030fce 	.word	0x24030fce
 8000ce0:	24030fd0 	.word	0x24030fd0
 8000ce4:	24030fd4 	.word	0x24030fd4
 8000ce8:	24030fe1 	.word	0x24030fe1
 8000cec:	24030fd8 	.word	0x24030fd8

08000cf0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_MspInit+0x30>)
 8000d04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x30>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x30>)
 8000d14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b8      	sub	sp, #224	; 0xe0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	22b8      	movs	r2, #184	; 0xb8
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 fc81 	bl	8008658 <memset>
  if(hadc->Instance==ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	; (8000e04 <HAL_ADC_MspInit+0xd4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d14c      	bne.n	8000dfa <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d7a:	23c0      	movs	r3, #192	; 0xc0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 ff17 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d9c:	f7ff ffa8 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000da2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000db2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc4:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0xd8>)
 8000dd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_ADC_MspInit+0xdc>)
 8000df6:	f001 fd31 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	37e0      	adds	r7, #224	; 0xe0
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020000 	.word	0x58020000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_TIM_Base_MspInit+0x74>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10f      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e24:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e34:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e40:	e01b      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM17)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a11      	ldr	r2, [pc, #68]	; (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d116      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e4e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2076      	movs	r0, #118	; 0x76
 8000e70:	f001 fcbf 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e74:	2076      	movs	r0, #118	; 0x76
 8000e76:	f001 fcd6 	bl	8002826 <HAL_NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40014400 	.word	0x40014400
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	40014800 	.word	0x40014800

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0b8      	sub	sp, #224	; 0xe0
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	22b8      	movs	r2, #184	; 0xb8
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f007 fbd1 	bl	8008658 <memset>
  if(huart->Instance==USART3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_UART_MspInit+0xc0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d142      	bne.n	8000f46 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fe78 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ff09 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000ef0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f02:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0xc4>)
 8000f0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <HAL_UART_MspInit+0xc8>)
 8000f42:	f001 fc8b 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	37e0      	adds	r7, #224	; 0xe0
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f957 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM17_IRQHandler+0x10>)
 8000fc2:	f005 f81c 	bl	8005ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2400016c 	.word	0x2400016c

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f007 fb32 	bl	8008668 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	24100000 	.word	0x24100000
 8001030:	00000400 	.word	0x00000400
 8001034:	24030fe4 	.word	0x24030fe4
 8001038:	24031148 	.word	0x24031148

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <SystemInit+0xd0>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <SystemInit+0xd0>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <SystemInit+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	2b02      	cmp	r3, #2
 800105a:	d807      	bhi.n	800106c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <SystemInit+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <SystemInit+0xd4>)
 8001066:	f043 0303 	orr.w	r3, r3, #3
 800106a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <SystemInit+0xd8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <SystemInit+0xd8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <SystemInit+0xd8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <SystemInit+0xd8>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <SystemInit+0xd8>)
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SystemInit+0xdc>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <SystemInit+0xd4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <SystemInit+0xd4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 030f 	bic.w	r3, r3, #15
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <SystemInit+0xd4>)
 80010a0:	f043 0303 	orr.w	r3, r3, #3
 80010a4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <SystemInit+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <SystemInit+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <SystemInit+0xd8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <SystemInit+0xd8>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <SystemInit+0xe0>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <SystemInit+0xd8>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <SystemInit+0xe4>)
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <SystemInit+0xd8>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <SystemInit+0xe8>)
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <SystemInit+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <SystemInit+0xd8>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <SystemInit+0xe8>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <SystemInit+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <SystemInit+0xd8>)
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <SystemInit+0xe8>)
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SystemInit+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <SystemInit+0xd8>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <SystemInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <SystemInit+0xec>)
 80010fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001100:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	52002000 	.word	0x52002000
 8001114:	58024400 	.word	0x58024400
 8001118:	eaf6ed7f 	.word	0xeaf6ed7f
 800111c:	02020200 	.word	0x02020200
 8001120:	01ff0000 	.word	0x01ff0000
 8001124:	01010280 	.word	0x01010280
 8001128:	52004000 	.word	0x52004000

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff ff84 	bl	800103c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115a:	f007 fa8b 	bl	8008674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff f931 	bl	80003c4 <main>
  bx  lr
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800116c:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8001170:	08009304 	.word	0x08009304
  ldr r2, =_sbss
 8001174:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8001178:	24031148 	.word	0x24031148

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f001 fb28 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800118c:	f002 fb44 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_Init+0x68>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <HAL_Init+0x6c>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_Init+0x6c>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_Init+0x70>)
 80011c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_Init+0x74>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f814 	bl	80011f8 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e002      	b.n	80011e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd8f 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024400 	.word	0x58024400
 80011ec:	0800926c 	.word	0x0800926c
 80011f0:	24000004 	.word	0x24000004
 80011f4:	24000000 	.word	0x24000000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e021      	b.n	8001250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_InitTick+0x64>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fb0d 	bl	8002842 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001240:	f001 fad7 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2400000c 	.word	0x2400000c
 800125c:	24000000 	.word	0x24000000
 8001260:	24000008 	.word	0x24000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2400000c 	.word	0x2400000c
 8001288:	24030fe8 	.word	0x24030fe8

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	24030fe8 	.word	0x24030fe8

080012a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3360      	adds	r3, #96	; 0x60
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	430b      	orrs	r3, r1
 800133a:	431a      	orrs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	431a      	orrs	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	611a      	str	r2, [r3, #16]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3360      	adds	r3, #96	; 0x60
 800138e:	461a      	mov	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
  }
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013da:	b480      	push	{r7}
 80013dc:	b087      	sub	sp, #28
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3330      	adds	r3, #48	; 0x30
 80013ea:	461a      	mov	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	211f      	movs	r1, #31
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0e9b      	lsrs	r3, r3, #26
 8001412:	f003 011f 	and.w	r1, r3, #31
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3314      	adds	r3, #20
 8001442:	461a      	mov	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0e5b      	lsrs	r3, r3, #25
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	0d1b      	lsrs	r3, r3, #20
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	2107      	movs	r1, #7
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	0d1b      	lsrs	r3, r3, #20
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0318 	and.w	r3, r3, #24
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	400b      	ands	r3, r1
 80014b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014b6:	431a      	orrs	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	000fffff 	.word	0x000fffff

080014d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001516:	4013      	ands	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6093      	str	r3, [r2, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	5fffffc0 	.word	0x5fffffc0

0800152c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800153c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001540:	d101      	bne.n	8001546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_ADC_EnableInternalRegulator+0x24>)
 8001562:	4013      	ands	r3, r2
 8001564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	6fffffc0 	.word	0x6fffffc0

0800157c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001590:	d101      	bne.n	8001596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <LL_ADC_Enable+0x24>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	7fffffc0 	.word	0x7fffffc0

080015cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <LL_ADC_IsEnabled+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_ADC_IsEnabled+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_ADC_REG_StartConversion+0x24>)
 8001602:	4013      	ands	r3, r2
 8001604:	f043 0204 	orr.w	r2, r3, #4
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	7fffffc0 	.word	0x7fffffc0

0800161c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b04      	cmp	r3, #4
 800162e:	d101      	bne.n	8001634 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b08      	cmp	r3, #8
 8001654:	d101      	bne.n	800165a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e138      	b.n	80018f4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fb4d 	bl	8000d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff3f 	bl	800152c <LL_ADC_IsDeepPowerDownEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff25 	bl	8001508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff5a 	bl	800157c <LL_ADC_IsInternalRegulatorEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d114      	bne.n	80016f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff3e 	bl	8001554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_ADC_Init+0x294>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	4a88      	ldr	r2, [pc, #544]	; (8001900 <HAL_ADC_Init+0x298>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	3301      	adds	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ea:	e002      	b.n	80016f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff3d 	bl	800157c <LL_ADC_IsInternalRegulatorEnabled>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f043 0210 	orr.w	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff77 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 800172e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 80d2 	bne.w	80018e2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f040 80ce 	bne.w	80018e2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800174e:	f043 0202 	orr.w	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff36 	bl	80015cc <LL_ADC_IsEnabled>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d110      	bne.n	8001788 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001766:	4867      	ldr	r0, [pc, #412]	; (8001904 <HAL_ADC_Init+0x29c>)
 8001768:	f7ff ff30 	bl	80015cc <LL_ADC_IsEnabled>
 800176c:	4604      	mov	r4, r0
 800176e:	4866      	ldr	r0, [pc, #408]	; (8001908 <HAL_ADC_Init+0x2a0>)
 8001770:	f7ff ff2c 	bl	80015cc <LL_ADC_IsEnabled>
 8001774:	4603      	mov	r3, r0
 8001776:	4323      	orrs	r3, r4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4619      	mov	r1, r3
 8001782:	4862      	ldr	r0, [pc, #392]	; (800190c <HAL_ADC_Init+0x2a4>)
 8001784:	f7ff fd8e 	bl	80012a4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7d5b      	ldrb	r3, [r3, #21]
 800178c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001792:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001798:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7f1b      	ldrb	r3, [r3, #28]
 800179e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7f1b      	ldrb	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	045b      	lsls	r3, r3, #17
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_ADC_Init+0x2a8>)
 80017de:	4013      	ands	r3, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	69b9      	ldr	r1, [r7, #24]
 80017e6:	430b      	orrs	r3, r1
 80017e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff14 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 80017f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff21 	bl	8001642 <LL_ADC_INJ_IsConversionOngoing>
 8001800:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d14a      	bne.n	800189e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d147      	bne.n	800189e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7d1b      	ldrb	r3, [r3, #20]
 8001812:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_ADC_Init+0x2ac>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	430b      	orrs	r3, r1
 800182e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001836:	2b01      	cmp	r3, #1
 8001838:	d11b      	bne.n	8001872 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_ADC_Init+0x2b0>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800184e:	3a01      	subs	r2, #1
 8001850:	0411      	lsls	r1, r2, #16
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001862:	430a      	orrs	r2, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0201 	orr.w	r2, r2, #1
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	e007      	b.n	8001882 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fd41 	bl	8002320 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10c      	bne.n	80018c0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f023 010f 	bic.w	r1, r3, #15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
 80018be:	e007      	b.n	80018d0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 020f 	bic.w	r2, r2, #15
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f023 0303 	bic.w	r3, r3, #3
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
 80018e0:	e007      	b.n	80018f2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3724      	adds	r7, #36	; 0x24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	24000000 	.word	0x24000000
 8001900:	053e2d63 	.word	0x053e2d63
 8001904:	40022000 	.word	0x40022000
 8001908:	40022100 	.word	0x40022100
 800190c:	40022300 	.word	0x40022300
 8001910:	fff0c003 	.word	0xfff0c003
 8001914:	ffffbffc 	.word	0xffffbffc
 8001918:	fc00f81e 	.word	0xfc00f81e

0800191c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001924:	4856      	ldr	r0, [pc, #344]	; (8001a80 <HAL_ADC_Start+0x164>)
 8001926:	f7ff fdd3 	bl	80014d0 <LL_ADC_GetMultimode>
 800192a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fe73 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 809a 	bne.w	8001a72 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_Start+0x30>
 8001948:	2302      	movs	r3, #2
 800194a:	e095      	b.n	8001a78 <HAL_ADC_Start+0x15c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fc67 	bl	8002228 <ADC_Enable>
 800195a:	4603      	mov	r3, r0
 800195c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 8081 	bne.w	8001a68 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800196a:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_ADC_Start+0x168>)
 800196c:	4013      	ands	r3, r2
 800196e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_ADC_Start+0x16c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d002      	beq.n	8001986 <HAL_ADC_Start+0x6a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e000      	b.n	8001988 <HAL_ADC_Start+0x6c>
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_ADC_Start+0x170>)
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	4293      	cmp	r3, r2
 800198e:	d002      	beq.n	8001996 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ae:	d106      	bne.n	80019be <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f023 0206 	bic.w	r2, r3, #6
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	221c      	movs	r2, #28
 80019ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <HAL_ADC_Start+0x16c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d002      	beq.n	80019e4 <HAL_ADC_Start+0xc8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e000      	b.n	80019e6 <HAL_ADC_Start+0xca>
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_ADC_Start+0x170>)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d008      	beq.n	8001a00 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d002      	beq.n	8001a00 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d114      	bne.n	8001a2a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fde6 	bl	80015f4 <LL_ADC_REG_StartConversion>
 8001a28:	e025      	b.n	8001a76 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_ADC_Start+0x16c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d002      	beq.n	8001a46 <HAL_ADC_Start+0x12a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	e000      	b.n	8001a48 <HAL_ADC_Start+0x12c>
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_ADC_Start+0x170>)
 8001a48:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00f      	beq.n	8001a76 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
 8001a66:	e006      	b.n	8001a76 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a70:	e001      	b.n	8001a76 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40022300 	.word	0x40022300
 8001a84:	fffff0fe 	.word	0xfffff0fe
 8001a88:	40022100 	.word	0x40022100
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a9a:	4866      	ldr	r0, [pc, #408]	; (8001c34 <HAL_ADC_PollForConversion+0x1a4>)
 8001a9c:	f7ff fd18 	bl	80014d0 <LL_ADC_GetMultimode>
 8001aa0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d102      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e02a      	b.n	8001b06 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d002      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b09      	cmp	r3, #9
 8001ac0:	d111      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0a4      	b.n	8001c2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ae4:	e00f      	b.n	8001b06 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ae6:	4853      	ldr	r0, [pc, #332]	; (8001c34 <HAL_ADC_PollForConversion+0x1a4>)
 8001ae8:	f7ff fd00 	bl	80014ec <LL_ADC_GetMultiDMATransfer>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f043 0220 	orr.w	r2, r3, #32
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e093      	b.n	8001c2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b02:	2304      	movs	r3, #4
 8001b04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b06:	f7ff fbc1 	bl	800128c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b0c:	e021      	b.n	8001b52 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b14:	d01d      	beq.n	8001b52 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b16:	f7ff fbb9 	bl	800128c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <HAL_ADC_PollForConversion+0x9c>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d112      	bne.n	8001b52 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e06b      	b.n	8001c2a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0d6      	beq.n	8001b0e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc1f 	bl	80013b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01c      	beq.n	8001bb6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7d5b      	ldrb	r3, [r3, #21]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d118      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d111      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_ADC_PollForConversion+0x1a8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ADC_PollForConversion+0x136>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_PollForConversion+0x138>
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_ADC_PollForConversion+0x1ac>)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d008      	beq.n	8001be2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d002      	beq.n	8001be2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d104      	bne.n	8001bec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	e00c      	b.n	8001c06 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_ADC_PollForConversion+0x1a8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d002      	beq.n	8001bfc <HAL_ADC_PollForConversion+0x16c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e000      	b.n	8001bfe <HAL_ADC_PollForConversion+0x16e>
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_ADC_PollForConversion+0x1ac>)
 8001bfe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d104      	bne.n	8001c16 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e008      	b.n	8001c28 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	220c      	movs	r2, #12
 8001c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022300 	.word	0x40022300
 8001c38:	40022100 	.word	0x40022100
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b0a1      	sub	sp, #132	; 0x84
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a9a      	ldr	r2, [pc, #616]	; (8001ee0 <HAL_ADC_ConfigChannel+0x284>)
 8001c76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x2a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e2bc      	b.n	8002200 <HAL_ADC_ConfigChannel+0x5a4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcc2 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 82a1 	bne.w	80021e2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d108      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x62>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	e016      	b.n	8001cec <HAL_ADC_ConfigChannel+0x90>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e003      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	69d1      	ldr	r1, [r2, #28]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f7ff fb67 	bl	80013da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fc83 	bl	800161c <LL_ADC_REG_IsConversionOngoing>
 8001d16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fc90 	bl	8001642 <LL_ADC_INJ_IsConversionOngoing>
 8001d22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80a0 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 809c 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fb76 	bl	8001432 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x110>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	e00a      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x126>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d027      	beq.n	8001ddc <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6919      	ldr	r1, [r3, #16]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9a:	f7ff fab7 	bl	800130c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7e5b      	ldrb	r3, [r3, #25]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x158>
 8001dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001db2:	e000      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x15a>
 8001db4:	2300      	movs	r3, #0
 8001db6:	461a      	mov	r2, r3
 8001db8:	f7ff fae1 	bl	800137e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	7e1b      	ldrb	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x176>
 8001dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x178>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fab9 	bl	800134c <LL_ADC_SetDataRightShift>
 8001dda:	e047      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	069b      	lsls	r3, r3, #26
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dfe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	069b      	lsls	r3, r3, #26
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d107      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e22:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e46:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e6a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fbab 	bl	80015cc <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 81bb 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fafc 	bl	8001488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_ADC_ConfigChannel+0x284>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 8130 	bne.w	80020fc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x268>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e01b      	b.n	8001efc <HAL_ADC_ConfigChannel+0x2a0>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e005      	b.n	8001eec <HAL_ADC_ConfigChannel+0x290>
 8001ee0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	bf94      	ite	ls
 8001ef6:	2301      	movls	r3, #1
 8001ef8:	2300      	movhi	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d079      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x2c0>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	3301      	adds	r3, #1
 8001f14:	069b      	lsls	r3, r3, #26
 8001f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1a:	e015      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x2ec>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e003      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	069b      	lsls	r3, r3, #26
 8001f44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x30c>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	e017      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x33c>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e003      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	ea42 0103 	orr.w	r1, r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x362>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	051b      	lsls	r3, r3, #20
 8001fbc:	e018      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x394>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e003      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	e07e      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x3b4>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	3301      	adds	r3, #1
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200e:	e015      	b.n	800203c <HAL_ADC_ConfigChannel+0x3e0>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e003      	b.n	8002034 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ADC_ConfigChannel+0x400>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	e017      	b.n	800208c <HAL_ADC_ConfigChannel+0x430>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	61bb      	str	r3, [r7, #24]
  return result;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e003      	b.n	8002080 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	ea42 0103 	orr.w	r1, r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x45c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	3b1e      	subs	r3, #30
 80020b0:	051b      	lsls	r3, r3, #20
 80020b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b6:	e01b      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x494>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	60fb      	str	r3, [r7, #12]
  return result;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f0:	430b      	orrs	r3, r1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff f99b 	bl	8001432 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da77      	bge.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002104:	4840      	ldr	r0, [pc, #256]	; (8002208 <HAL_ADC_ConfigChannel+0x5ac>)
 8002106:	f7ff f8f3 	bl	80012f0 <LL_ADC_GetCommonPathInternalCh>
 800210a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210c:	483f      	ldr	r0, [pc, #252]	; (800220c <HAL_ADC_ConfigChannel+0x5b0>)
 800210e:	f7ff fa5d 	bl	80015cc <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	483e      	ldr	r0, [pc, #248]	; (8002210 <HAL_ADC_ConfigChannel+0x5b4>)
 8002116:	f7ff fa59 	bl	80015cc <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	4323      	orrs	r3, r4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d155      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <HAL_ADC_ConfigChannel+0x5b8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d122      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x516>
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11d      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a35      	ldr	r2, [pc, #212]	; (8002210 <HAL_ADC_ConfigChannel+0x5b4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d159      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002142:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002146:	4619      	mov	r1, r3
 8002148:	482f      	ldr	r0, [pc, #188]	; (8002208 <HAL_ADC_ConfigChannel+0x5ac>)
 800214a:	f7ff f8be 	bl	80012ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <HAL_ADC_ConfigChannel+0x5bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_ADC_ConfigChannel+0x5c0>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	3301      	adds	r3, #1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002162:	e002      	b.n	800216a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3b01      	subs	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002170:	e040      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <HAL_ADC_ConfigChannel+0x5c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x544>
 800217c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_ADC_ConfigChannel+0x5b4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d131      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	4619      	mov	r1, r3
 8002198:	481b      	ldr	r0, [pc, #108]	; (8002208 <HAL_ADC_ConfigChannel+0x5ac>)
 800219a:	f7ff f896 	bl	80012ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800219e:	e029      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_ADC_ConfigChannel+0x5c8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d124      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11f      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_ADC_ConfigChannel+0x5b4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021c4:	4619      	mov	r1, r3
 80021c6:	4810      	ldr	r0, [pc, #64]	; (8002208 <HAL_ADC_ConfigChannel+0x5ac>)
 80021c8:	f7ff f87f 	bl	80012ca <LL_ADC_SetCommonPathInternalCh>
 80021cc:	e012      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f043 0220 	orr.w	r2, r3, #32
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021e0:	e008      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002200:	4618      	mov	r0, r3
 8002202:	3784      	adds	r7, #132	; 0x84
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	40022300 	.word	0x40022300
 800220c:	40022000 	.word	0x40022000
 8002210:	40022100 	.word	0x40022100
 8002214:	cb840000 	.word	0xcb840000
 8002218:	24000000 	.word	0x24000000
 800221c:	053e2d63 	.word	0x053e2d63
 8002220:	bac04000 	.word	0xbac04000
 8002224:	cfb80000 	.word	0xcfb80000

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f9c9 	bl	80015cc <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d161      	bne.n	8002304 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b32      	ldr	r3, [pc, #200]	; (8002310 <ADC_Enable+0xe8>)
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e04d      	b.n	8002306 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f998 	bl	80015a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002274:	f7ff f80a 	bl	800128c <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800227a:	4826      	ldr	r0, [pc, #152]	; (8002314 <ADC_Enable+0xec>)
 800227c:	f7ff f928 	bl	80014d0 <LL_ADC_GetMultimode>
 8002280:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a24      	ldr	r2, [pc, #144]	; (8002318 <ADC_Enable+0xf0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d002      	beq.n	8002292 <ADC_Enable+0x6a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	e000      	b.n	8002294 <ADC_Enable+0x6c>
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <ADC_Enable+0xf4>)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	4293      	cmp	r3, r2
 800229a:	d02c      	beq.n	80022f6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d130      	bne.n	8002304 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022a2:	e028      	b.n	80022f6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f98f 	bl	80015cc <LL_ADC_IsEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f973 	bl	80015a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022be:	f7fe ffe5 	bl	800128c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d914      	bls.n	80022f6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d00d      	beq.n	80022f6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1cf      	bne.n	80022a4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	8000003f 	.word	0x8000003f
 8002314:	40022300 	.word	0x40022300
 8002318:	40022100 	.word	0x40022100
 800231c:	40022000 	.word	0x40022000

08002320 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002328:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <ADC_ConfigureBoostMode+0x188>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01c      	beq.n	800236e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002334:	f001 fbea 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8002338:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002342:	d010      	beq.n	8002366 <ADC_ConfigureBoostMode+0x46>
 8002344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002348:	d871      	bhi.n	800242e <ADC_ConfigureBoostMode+0x10e>
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d002      	beq.n	8002356 <ADC_ConfigureBoostMode+0x36>
 8002350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002354:	d16b      	bne.n	800242e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
        break;
 8002364:	e066      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	60fb      	str	r3, [r7, #12]
        break;
 800236c:	e062      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800236e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002372:	f002 fb33 	bl	80049dc <HAL_RCCEx_GetPeriphCLKFreq>
 8002376:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002380:	d051      	beq.n	8002426 <ADC_ConfigureBoostMode+0x106>
 8002382:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002386:	d854      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 8002388:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800238c:	d047      	beq.n	800241e <ADC_ConfigureBoostMode+0xfe>
 800238e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002392:	d84e      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 8002394:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002398:	d03d      	beq.n	8002416 <ADC_ConfigureBoostMode+0xf6>
 800239a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800239e:	d848      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023a4:	d033      	beq.n	800240e <ADC_ConfigureBoostMode+0xee>
 80023a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023aa:	d842      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023ac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023b0:	d029      	beq.n	8002406 <ADC_ConfigureBoostMode+0xe6>
 80023b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023b6:	d83c      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80023bc:	d01a      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xd4>
 80023be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80023c2:	d836      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023c8:	d014      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xd4>
 80023ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023ce:	d830      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d4:	d00e      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xd4>
 80023d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023da:	d82a      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023e0:	d008      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xd4>
 80023e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80023e6:	d824      	bhi.n	8002432 <ADC_ConfigureBoostMode+0x112>
 80023e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023ec:	d002      	beq.n	80023f4 <ADC_ConfigureBoostMode+0xd4>
 80023ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023f2:	d11e      	bne.n	8002432 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0c9b      	lsrs	r3, r3, #18
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e016      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
        break;
 800240c:	e012      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	60fb      	str	r3, [r7, #12]
        break;
 8002414:	e00e      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	60fb      	str	r3, [r7, #12]
        break;
 800241c:	e00a      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	09db      	lsrs	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]
        break;
 8002424:	e006      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	60fb      	str	r3, [r7, #12]
        break;
 800242c:	e002      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
        break;
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002432:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <ADC_ConfigureBoostMode+0x18c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d808      	bhi.n	8002454 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002450:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002452:	e025      	b.n	80024a0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <ADC_ConfigureBoostMode+0x190>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d80a      	bhi.n	8002472 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	e016      	b.n	80024a0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <ADC_ConfigureBoostMode+0x194>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d80a      	bhi.n	8002490 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	e007      	b.n	80024a0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40022300 	.word	0x40022300
 80024ac:	005f5e10 	.word	0x005f5e10
 80024b0:	00bebc20 	.word	0x00bebc20
 80024b4:	017d7840 	.word	0x017d7840

080024b8 <LL_ADC_IsEnabled>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_IsConversionOngoing>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b09f      	sub	sp, #124	; 0x7c
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800251e:	2302      	movs	r3, #2
 8002520:	e080      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a3d      	ldr	r2, [pc, #244]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e001      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e05f      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ffb9 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 800256c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffb3 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d141      	bne.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800257e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13e      	bne.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002586:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a2:	4822      	ldr	r0, [pc, #136]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025a4:	f7ff ff88 	bl	80024b8 <LL_ADC_IsEnabled>
 80025a8:	4604      	mov	r4, r0
 80025aa:	4821      	ldr	r0, [pc, #132]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025ac:	f7ff ff84 	bl	80024b8 <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4323      	orrs	r3, r4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12e      	bne.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	6892      	ldr	r2, [r2, #8]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d0:	e021      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025de:	4813      	ldr	r0, [pc, #76]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80025e0:	f7ff ff6a 	bl	80024b8 <LL_ADC_IsEnabled>
 80025e4:	4604      	mov	r4, r0
 80025e6:	4812      	ldr	r0, [pc, #72]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025e8:	f7ff ff66 	bl	80024b8 <LL_ADC_IsEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4323      	orrs	r3, r4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d110      	bne.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002600:	e009      	b.n	8002616 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002614:	e000      	b.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002616:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002620:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002624:	4618      	mov	r0, r3
 8002626:	377c      	adds	r7, #124	; 0x7c
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	40022000 	.word	0x40022000
 8002630:	40022100 	.word	0x40022100
 8002634:	40022300 	.word	0x40022300
 8002638:	fffff0e0 	.word	0xfffff0e0

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	4313      	orrs	r3, r2
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x40>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00
 8002680:	05fa0000 	.word	0x05fa0000

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff40 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff90 	bl	8002730 <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5f 	bl	80026dc <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff33 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa4 	bl	8002798 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800286a:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_GPIO_Init+0x234>)
 800286c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800286e:	e194      	b.n	8002b9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8186 	beq.w	8002b94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_GPIO_Init+0x44>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d6:	2201      	movs	r2, #1
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b03      	cmp	r3, #3
 800290c:	d017      	beq.n	800293e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d123      	bne.n	8002992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80e0 	beq.w	8002b94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	4b2f      	ldr	r3, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80029e4:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_GPIO_Init+0x238>)
 80029e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_GPIO_Init+0x23c>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <HAL_GPIO_Init+0x240>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d052      	beq.n	8002ac4 <HAL_GPIO_Init+0x268>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_GPIO_Init+0x244>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_GPIO_Init+0x248>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_GPIO_Init+0x24c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_GPIO_Init+0x250>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_GPIO_Init+0x254>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x21e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_GPIO_Init+0x258>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_GPIO_Init+0x25c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x216>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_GPIO_Init+0x260>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x212>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_GPIO_Init+0x264>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x20e>
 8002a66:	2309      	movs	r3, #9
 8002a68:	e02d      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	e02b      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	e029      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e027      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e025      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	e023      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e021      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e01f      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e01d      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e01b      	b.n	8002ac6 <HAL_GPIO_Init+0x26a>
 8002a8e:	bf00      	nop
 8002a90:	58000080 	.word	0x58000080
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58000400 	.word	0x58000400
 8002a9c:	58020000 	.word	0x58020000
 8002aa0:	58020400 	.word	0x58020400
 8002aa4:	58020800 	.word	0x58020800
 8002aa8:	58020c00 	.word	0x58020c00
 8002aac:	58021000 	.word	0x58021000
 8002ab0:	58021400 	.word	0x58021400
 8002ab4:	58021800 	.word	0x58021800
 8002ab8:	58021c00 	.word	0x58021c00
 8002abc:	58022000 	.word	0x58022000
 8002ac0:	58022400 	.word	0x58022400
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f002 0203 	and.w	r2, r2, #3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4093      	lsls	r3, r2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad6:	4938      	ldr	r1, [pc, #224]	; (8002bb8 <HAL_GPIO_Init+0x35c>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae63 	bne.w	8002870 <HAL_GPIO_Init+0x14>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	; 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	58000400 	.word	0x58000400

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d00a      	beq.n	8002c1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e040      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e03e      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c22:	491f      	ldr	r1, [pc, #124]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c2a:	f7fe fb2f 	bl	800128c <HAL_GetTick>
 8002c2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c30:	e009      	b.n	8002c46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c32:	f7fe fb2b 	bl	800128c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c40:	d901      	bls.n	8002c46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e028      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	d1ee      	bne.n	8002c32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b1e      	cmp	r3, #30
 8002c58:	d008      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5e:	d005      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b1d      	cmp	r3, #29
 8002c64:	d002      	beq.n	8002c6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b2d      	cmp	r3, #45	; 0x2d
 8002c6a:	d114      	bne.n	8002c96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c6c:	f7fe fb0e 	bl	800128c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c72:	e009      	b.n	8002c88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c74:	f7fe fb0a 	bl	800128c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c82:	d901      	bls.n	8002c88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e007      	b.n	8002c98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d1ee      	bne.n	8002c74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	58024800 	.word	0x58024800

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e3f4      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80b3 	beq.w	8002e2a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc4:	4b95      	ldr	r3, [pc, #596]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cce:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d007      	beq.n	8002cea <HAL_RCC_OscConfig+0x46>
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	2b18      	cmp	r3, #24
 8002cde:	d112      	bne.n	8002d06 <HAL_RCC_OscConfig+0x62>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d10d      	bne.n	8002d06 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8098 	beq.w	8002e28 <HAL_RCC_OscConfig+0x184>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 8093 	bne.w	8002e28 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e3cc      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7a>
 8002d10:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a81      	ldr	r2, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e058      	b.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0xa8>
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a79      	ldr	r2, [pc, #484]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b77      	ldr	r3, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a76      	ldr	r2, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e041      	b.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_OscConfig+0xd8>
 8002d56:	4b71      	ldr	r3, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a70      	ldr	r2, [pc, #448]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b6e      	ldr	r3, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6d      	ldr	r2, [pc, #436]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6a      	ldr	r2, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e029      	b.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a64      	ldr	r2, [pc, #400]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a61      	ldr	r2, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e011      	b.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002dac:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002dca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fa58 	bl	800128c <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fa54 	bl	800128c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e356      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x13c>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fa44 	bl	800128c <HAL_GetTick>
 8002e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fa40 	bl	800128c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e342      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x164>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 808d 	beq.w	8002f52 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1ba>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	d137      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x220>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d132      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e314      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0219 	bic.w	r2, r3, #25
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4926      	ldr	r1, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e88:	f7fe fa00 	bl	800128c <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe f9fc 	bl	800128c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2fe      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	061b      	lsls	r3, r3, #24
 8002ebc:	4917      	ldr	r1, [pc, #92]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec2:	e046      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d029      	beq.n	8002f20 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0219 	bic.w	r2, r3, #25
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4910      	ldr	r1, [pc, #64]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe f9d5 	bl	800128c <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe f9d1 	bl	800128c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2d3      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	4902      	ldr	r1, [pc, #8]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ae>
 8002f1a:	bf00      	nop
 8002f1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f20:	4b97      	ldr	r3, [pc, #604]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a96      	ldr	r2, [pc, #600]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fe f9ae 	bl	800128c <HAL_GetTick>
 8002f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f34:	f7fe f9aa 	bl	800128c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e2ac      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f46:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06a      	beq.n	8003034 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b88      	ldr	r3, [pc, #544]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f68:	4b85      	ldr	r3, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d007      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2e0>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	d11b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x30e>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d116      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f84:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e281      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f9c:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4975      	ldr	r1, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb0:	e040      	b.n	8003034 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d023      	beq.n	8003002 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fba:	4b71      	ldr	r3, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a70      	ldr	r2, [pc, #448]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f961 	bl	800128c <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fce:	f7fe f95d 	bl	800128c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e25f      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe0:	4b67      	ldr	r3, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
 8003000:	e018      	b.n	8003034 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f93d 	bl	800128c <HAL_GetTick>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003016:	f7fe f939 	bl	800128c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e23b      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003028:	4b55      	ldr	r3, [pc, #340]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d036      	beq.n	80030ae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d019      	beq.n	800307c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003048:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	4a4c      	ldr	r2, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe f91a 	bl	800128c <HAL_GetTick>
 8003058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe f916 	bl	800128c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e218      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800306e:	4b44      	ldr	r3, [pc, #272]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x3b8>
 800307a:	e018      	b.n	80030ae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe f900 	bl	800128c <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe f8fc 	bl	800128c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1fe      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ce:	f7fe f8dd 	bl	800128c <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030d6:	f7fe f8d9 	bl	800128c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1db      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x432>
 80030f4:	e018      	b.n	8003128 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003100:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003102:	f7fe f8c3 	bl	800128c <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800310a:	f7fe f8bf 	bl	800128c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1c1      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800311c:	4b18      	ldr	r3, [pc, #96]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80af 	beq.w	8003294 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003142:	f7fe f8a3 	bl	800128c <HAL_GetTick>
 8003146:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fe f89f 	bl	800128c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1a1      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x4e0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x4e4>
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a02      	ldr	r2, [pc, #8]	; (8003180 <HAL_RCC_OscConfig+0x4dc>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e05b      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 800317e:	bf00      	nop
 8003180:	58024400 	.word	0x58024400
 8003184:	58024800 	.word	0x58024800
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d112      	bne.n	80031b6 <HAL_RCC_OscConfig+0x512>
 8003190:	4b9d      	ldr	r3, [pc, #628]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a9c      	ldr	r2, [pc, #624]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b9a      	ldr	r3, [pc, #616]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a99      	ldr	r2, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
 80031a8:	4b97      	ldr	r3, [pc, #604]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a96      	ldr	r2, [pc, #600]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031ae:	f023 0304 	bic.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	e03f      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x540>
 80031be:	4b92      	ldr	r3, [pc, #584]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a91      	ldr	r2, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ca:	4b8f      	ldr	r3, [pc, #572]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a8e      	ldr	r2, [pc, #568]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	e028      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b85      	cmp	r3, #133	; 0x85
 80031ea:	d112      	bne.n	8003212 <HAL_RCC_OscConfig+0x56e>
 80031ec:	4b86      	ldr	r3, [pc, #536]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a85      	ldr	r2, [pc, #532]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	4b83      	ldr	r3, [pc, #524]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a82      	ldr	r2, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80031fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b80      	ldr	r3, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a7f      	ldr	r2, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e011      	b.n	8003236 <HAL_RCC_OscConfig+0x592>
 8003212:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	4a79      	ldr	r2, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	; 0x70
 800322a:	4b77      	ldr	r3, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a76      	ldr	r2, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe f825 	bl	800128c <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f821 	bl	800128c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e121      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCC_OscConfig+0x5a2>
 8003268:	e014      	b.n	8003294 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe f80f 	bl	800128c <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe f80b 	bl	800128c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e10b      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003288:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ee      	bne.n	8003272 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8100 	beq.w	800349e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a6:	2b18      	cmp	r3, #24
 80032a8:	f000 80bb 	beq.w	8003422 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	f040 8095 	bne.w	80033e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b54      	ldr	r3, [pc, #336]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd ffe3 	bl	800128c <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd ffdf 	bl	800128c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0e1      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032dc:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x768>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	430a      	orrs	r2, r1
 80032fc:	4942      	ldr	r1, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	628b      	str	r3, [r1, #40]	; 0x28
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	3b01      	subs	r3, #1
 8003308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	3b01      	subs	r3, #1
 8003312:	025b      	lsls	r3, r3, #9
 8003314:	b29b      	uxth	r3, r3
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	3b01      	subs	r3, #1
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003332:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003334:	4313      	orrs	r3, r2
 8003336:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003338:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x76c>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003350:	00d2      	lsls	r2, r2, #3
 8003352:	492d      	ldr	r1, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003354:	4313      	orrs	r3, r2
 8003356:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f023 020c 	bic.w	r2, r3, #12
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4928      	ldr	r1, [pc, #160]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003366:	4313      	orrs	r3, r2
 8003368:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	f023 0202 	bic.w	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4924      	ldr	r1, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003378:	4313      	orrs	r3, r2
 800337a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 800339a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd ff68 	bl	800128c <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd ff64 	bl	800128c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e066      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x71c>
 80033de:	e05e      	b.n	800349e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_RCC_OscConfig+0x764>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd ff4e 	bl	800128c <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f2:	e00f      	b.n	8003414 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd ff4a 	bl	800128c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d908      	bls.n	8003414 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04c      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
 8003406:	bf00      	nop
 8003408:	58024400 	.word	0x58024400
 800340c:	fffffc0c 	.word	0xfffffc0c
 8003410:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003414:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCC_OscConfig+0x804>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e9      	bne.n	80033f4 <HAL_RCC_OscConfig+0x750>
 8003420:	e03d      	b.n	800349e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_RCC_OscConfig+0x804>)
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCC_OscConfig+0x804>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b01      	cmp	r3, #1
 8003434:	d031      	beq.n	800349a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d12a      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d122      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d11a      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0a5b      	lsrs	r3, r3, #9
 8003468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d111      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d108      	bne.n	800349a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0e1b      	lsrs	r3, r3, #24
 800348c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3730      	adds	r7, #48	; 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400

080034ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e19c      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d910      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b87      	ldr	r3, [pc, #540]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	4985      	ldr	r1, [pc, #532]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b83      	ldr	r3, [pc, #524]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e184      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	4b7b      	ldr	r3, [pc, #492]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003508:	429a      	cmp	r2, r3
 800350a:	d908      	bls.n	800351e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800350c:	4b78      	ldr	r3, [pc, #480]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	4975      	ldr	r1, [pc, #468]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800351a:	4313      	orrs	r3, r2
 800351c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	4b70      	ldr	r3, [pc, #448]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003536:	429a      	cmp	r2, r3
 8003538:	d908      	bls.n	800354c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800353a:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	496a      	ldr	r1, [pc, #424]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003564:	429a      	cmp	r2, r3
 8003566:	d908      	bls.n	800357a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003568:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	495e      	ldr	r1, [pc, #376]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003576:	4313      	orrs	r3, r2
 8003578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003592:	429a      	cmp	r2, r3
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003596:	4b56      	ldr	r3, [pc, #344]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4953      	ldr	r1, [pc, #332]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d908      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f023 020f 	bic.w	r2, r3, #15
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4947      	ldr	r1, [pc, #284]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d055      	beq.n	800368e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4940      	ldr	r1, [pc, #256]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d107      	bne.n	800360c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d121      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0f6      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003614:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d115      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0ea      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0de      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0d6      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364c:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 0207 	bic.w	r2, r3, #7
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4925      	ldr	r1, [pc, #148]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fd fe15 	bl	800128c <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003664:	e00a      	b.n	800367c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003666:	f7fd fe11 	bl	800128c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0be      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367c:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	429a      	cmp	r2, r3
 800368c:	d1eb      	bne.n	8003666 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d208      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f023 020f 	bic.w	r2, r3, #15
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	490e      	ldr	r1, [pc, #56]	; (80036f0 <HAL_RCC_ClockConfig+0x244>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d214      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 020f 	bic.w	r2, r3, #15
 80036d2:	4906      	ldr	r1, [pc, #24]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCC_ClockConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e086      	b.n	80037fa <HAL_RCC_ClockConfig+0x34e>
 80036ec:	52002000 	.word	0x52002000
 80036f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370c:	429a      	cmp	r2, r3
 800370e:	d208      	bcs.n	8003722 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003710:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4939      	ldr	r1, [pc, #228]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 800371e:	4313      	orrs	r3, r2
 8003720:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	4b34      	ldr	r3, [pc, #208]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373a:	429a      	cmp	r2, r3
 800373c:	d208      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800373e:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	492e      	ldr	r1, [pc, #184]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 800374c:	4313      	orrs	r3, r2
 800374e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003768:	429a      	cmp	r2, r3
 800376a:	d208      	bcs.n	800377e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800376c:	4b25      	ldr	r3, [pc, #148]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4922      	ldr	r1, [pc, #136]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 800377a:	4313      	orrs	r3, r2
 800377c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003796:	429a      	cmp	r2, r3
 8003798:	d208      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800379a:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4917      	ldr	r1, [pc, #92]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80037ac:	f000 f834 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	4912      	ldr	r1, [pc, #72]	; (8003808 <HAL_RCC_ClockConfig+0x35c>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
 80037c8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_RCC_ClockConfig+0x358>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_RCC_ClockConfig+0x35c>)
 80037d4:	5cd3      	ldrb	r3, [r2, r3]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <HAL_RCC_ClockConfig+0x360>)
 80037e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e4:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <HAL_RCC_ClockConfig+0x364>)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_ClockConfig+0x368>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fd02 	bl	80011f8 <HAL_InitTick>
 80037f4:	4603      	mov	r3, r0
 80037f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
 8003808:	0800926c 	.word	0x0800926c
 800380c:	24000004 	.word	0x24000004
 8003810:	24000000 	.word	0x24000000
 8003814:	24000008 	.word	0x24000008

08003818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381e:	4bb3      	ldr	r3, [pc, #716]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003826:	2b18      	cmp	r3, #24
 8003828:	f200 8155 	bhi.w	8003ad6 <HAL_RCC_GetSysClockFreq+0x2be>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCC_GetSysClockFreq+0x1c>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003899 	.word	0x08003899
 8003838:	08003ad7 	.word	0x08003ad7
 800383c:	08003ad7 	.word	0x08003ad7
 8003840:	08003ad7 	.word	0x08003ad7
 8003844:	08003ad7 	.word	0x08003ad7
 8003848:	08003ad7 	.word	0x08003ad7
 800384c:	08003ad7 	.word	0x08003ad7
 8003850:	08003ad7 	.word	0x08003ad7
 8003854:	080038bf 	.word	0x080038bf
 8003858:	08003ad7 	.word	0x08003ad7
 800385c:	08003ad7 	.word	0x08003ad7
 8003860:	08003ad7 	.word	0x08003ad7
 8003864:	08003ad7 	.word	0x08003ad7
 8003868:	08003ad7 	.word	0x08003ad7
 800386c:	08003ad7 	.word	0x08003ad7
 8003870:	08003ad7 	.word	0x08003ad7
 8003874:	080038c5 	.word	0x080038c5
 8003878:	08003ad7 	.word	0x08003ad7
 800387c:	08003ad7 	.word	0x08003ad7
 8003880:	08003ad7 	.word	0x08003ad7
 8003884:	08003ad7 	.word	0x08003ad7
 8003888:	08003ad7 	.word	0x08003ad7
 800388c:	08003ad7 	.word	0x08003ad7
 8003890:	08003ad7 	.word	0x08003ad7
 8003894:	080038cb 	.word	0x080038cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003898:	4b94      	ldr	r3, [pc, #592]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038a4:	4b91      	ldr	r3, [pc, #580]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	08db      	lsrs	r3, r3, #3
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	4a90      	ldr	r2, [pc, #576]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80038b6:	e111      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038b8:	4b8d      	ldr	r3, [pc, #564]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ba:	61bb      	str	r3, [r7, #24]
    break;
 80038bc:	e10e      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038be:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038c0:	61bb      	str	r3, [r7, #24]
    break;
 80038c2:	e10b      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038c6:	61bb      	str	r3, [r7, #24]
    break;
 80038c8:	e108      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038d4:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038e0:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80038ea:	4b80      	ldr	r3, [pc, #512]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80e1 	beq.w	8003ad0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b02      	cmp	r3, #2
 8003912:	f000 8083 	beq.w	8003a1c <HAL_RCC_GetSysClockFreq+0x204>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b02      	cmp	r3, #2
 800391a:	f200 80a1 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x248>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x114>
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d056      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800392a:	e099      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800392c:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02d      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003938:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	08db      	lsrs	r3, r3, #3
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	4a6b      	ldr	r2, [pc, #428]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b62      	ldr	r3, [pc, #392]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a02 	vldr	s12, [r7, #8]
 8003976:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003afc <HAL_RCC_GetSysClockFreq+0x2e4>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003992:	e087      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b00 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003afc <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039d6:	e065      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003afc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a1a:	e043      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003afc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5e:	e021      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003afc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	0a5b      	lsrs	r3, r3, #9
 8003aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aae:	3301      	adds	r3, #1
 8003ab0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ac8:	ee17 3a90 	vmov	r3, s15
 8003acc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003ace:	e005      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    break;
 8003ad4:	e002      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ad8:	61bb      	str	r3, [r7, #24]
    break;
 8003ada:	bf00      	nop
  }

  return sysclockfreq;
 8003adc:	69bb      	ldr	r3, [r7, #24]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	58024400 	.word	0x58024400
 8003af0:	03d09000 	.word	0x03d09000
 8003af4:	003d0900 	.word	0x003d0900
 8003af8:	007a1200 	.word	0x007a1200
 8003afc:	46000000 	.word	0x46000000
 8003b00:	4c742400 	.word	0x4c742400
 8003b04:	4a742400 	.word	0x4a742400
 8003b08:	4af42400 	.word	0x4af42400

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b12:	f7ff fe81 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490f      	ldr	r1, [pc, #60]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	0800926c 	.word	0x0800926c
 8003b64:	24000004 	.word	0x24000004
 8003b68:	24000000 	.word	0x24000000

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003b70:	f7ff ffcc 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4904      	ldr	r1, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	58024400 	.word	0x58024400
 8003b94:	0800926c 	.word	0x0800926c

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003b9c:	f7ff ffb6 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	0800926c 	.word	0x0800926c

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003be8:	d02a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bee:	d824      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf4:	d018      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bfa:	d81e      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c04:	d007      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c06:	e018      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4b9f      	ldr	r3, [pc, #636]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	4a9e      	ldr	r2, [pc, #632]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 ff1b 	bl	8005a58 <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 ffc4 	bl	8005bbc <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c48:	4b8f      	ldr	r3, [pc, #572]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c54:	498c      	ldr	r1, [pc, #560]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	650b      	str	r3, [r1, #80]	; 0x50
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d03d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d826      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c74:	a201      	add	r2, pc, #4	; (adr r2, 8003c7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7a:	bf00      	nop
 8003c7c:	08003c91 	.word	0x08003c91
 8003c80:	08003c9f 	.word	0x08003c9f
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08003cc9 	.word	0x08003cc9
 8003c8c:	08003cc9 	.word	0x08003cc9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b7d      	ldr	r3, [pc, #500]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a7c      	ldr	r2, [pc, #496]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e015      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fed7 	bl	8005a58 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cae:	e00c      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 ff80 	bl	8005bbc <RCCEx_PLL3_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc0:	e003      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc6:	e000      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cd0:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	496a      	ldr	r1, [pc, #424]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ce2:	e001      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d04a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003cfc:	d031      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003cfe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d02:	d82b      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d08:	d02d      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	d825      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d10:	2bc0      	cmp	r3, #192	; 0xc0
 8003d12:	d02a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d14:	2bc0      	cmp	r3, #192	; 0xc0
 8003d16:	d821      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d81d      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d007      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003d28:	e018      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003d36:	e019      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fe8a 	bl	8005a58 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003d48:	e010      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3324      	adds	r3, #36	; 0x24
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 ff33 	bl	8005bbc <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003d5a:	e007      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003d72:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4942      	ldr	r1, [pc, #264]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	650b      	str	r3, [r1, #80]	; 0x50
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04f      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d9e:	d036      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003da0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003da4:	d830      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d032      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d82a      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003db2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003db6:	d02e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003db8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dbc:	d824      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d018      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d81e      	bhi.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003dd4:	e018      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003de2:	e019      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fe34 	bl	8005a58 <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003df4:	e010      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fedd 	bl	8005bbc <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003e06:	e007      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	4917      	ldr	r1, [pc, #92]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	650b      	str	r3, [r1, #80]	; 0x50
 8003e30:	e001      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d034      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d01c      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003e4a:	2b30      	cmp	r3, #48	; 0x30
 8003e4c:	d817      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d00c      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d813      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003e6a:	e010      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fdf0 	bl	8005a58 <RCCEx_PLL2_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003e7c:	e007      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
      break;
 8003e82:	e004      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8003e84:	bf00      	nop
 8003e86:	e002      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e88:	58024400 	.word	0x58024400
      break;
 8003e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e94:	4b9b      	ldr	r3, [pc, #620]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea0:	4998      	ldr	r1, [pc, #608]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d047      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	d030      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec6:	d82a      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ecc:	d02c      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003ece:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ed2:	d824      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d018      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ede:	d81e      	bhi.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d007      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003eea:	e018      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4b85      	ldr	r3, [pc, #532]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a84      	ldr	r2, [pc, #528]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ef8:	e017      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 fda9 	bl	8005a58 <RCCEx_PLL2_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f0a:	e00e      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3324      	adds	r3, #36	; 0x24
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fe52 	bl	8005bbc <RCCEx_PLL3_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f1c:	e005      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f30:	4b74      	ldr	r3, [pc, #464]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	4971      	ldr	r1, [pc, #452]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	650b      	str	r3, [r1, #80]	; 0x50
 8003f42:	e001      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d049      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f5c:	d02e      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f62:	d828      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003f64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f68:	d02a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f6e:	d822      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003f70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f74:	d026      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003f76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f7a:	d81c      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f86:	d816      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01d      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d111      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fd5d 	bl	8005a58 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003fa2:	e012      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3324      	adds	r3, #36	; 0x24
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fe06 	bl	8005bbc <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003fb4:	e009      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fba:	e006      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fdc:	4949      	ldr	r1, [pc, #292]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	650b      	str	r3, [r1, #80]	; 0x50
 8003fe2:	e001      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d053      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ffa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ffe:	d034      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004000:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004004:	d82e      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400a:	d030      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d828      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d02c      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d822      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800401e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004022:	d028      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004028:	d81c      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d010      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d816      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d111      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fd06 	bl	8005a58 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004050:	e014      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fdaf 	bl	8005bbc <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004062:	e00b      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800406a:	bf00      	nop
 800406c:	e006      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800406e:	bf00      	nop
 8004070:	e004      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004072:	bf00      	nop
 8004074:	e002      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004076:	bf00      	nop
 8004078:	e000      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800407a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004090:	491c      	ldr	r1, [pc, #112]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004092:	4313      	orrs	r3, r2
 8004094:	658b      	str	r3, [r1, #88]	; 0x58
 8004096:	e001      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d00e      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80040b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b6:	d814      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c0:	d10f      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c2:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040ce:	e00c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fcbe 	bl	8005a58 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7dfb      	ldrb	r3, [r7, #23]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	4901      	ldr	r1, [pc, #4]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	650b      	str	r3, [r1, #80]	; 0x50
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d032      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411c:	2b03      	cmp	r3, #3
 800411e:	d81b      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	0800415f 	.word	0x0800415f
 800412c:	08004139 	.word	0x08004139
 8004130:	08004147 	.word	0x08004147
 8004134:	0800415f 	.word	0x0800415f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4bb2      	ldr	r3, [pc, #712]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4ab1      	ldr	r2, [pc, #708]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004144:	e00c      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fc83 	bl	8005a58 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004156:	e003      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800415e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004166:	4ba7      	ldr	r3, [pc, #668]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	49a4      	ldr	r1, [pc, #656]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004174:	4313      	orrs	r3, r2
 8004176:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004178:	e001      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8086 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800418c:	4b9e      	ldr	r3, [pc, #632]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a9d      	ldr	r2, [pc, #628]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004198:	f7fd f878 	bl	800128c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419e:	e009      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a0:	f7fd f874 	bl	800128c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	; 0x64
 80041ac:	d902      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	75fb      	strb	r3, [r7, #23]
        break;
 80041b2:	e005      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b4:	4b94      	ldr	r3, [pc, #592]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ef      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d166      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041d0:	4053      	eors	r3, r2
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041da:	4b8a      	ldr	r3, [pc, #552]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041e4:	4b87      	ldr	r3, [pc, #540]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a86      	ldr	r2, [pc, #536]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041f0:	4b84      	ldr	r3, [pc, #528]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a83      	ldr	r2, [pc, #524]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041fc:	4a81      	ldr	r2, [pc, #516]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420c:	d115      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420e:	f7fd f83d 	bl	800128c <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004214:	e00b      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fd f839 	bl	800128c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d902      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	75fb      	strb	r3, [r7, #23]
            break;
 800422c:	e005      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800422e:	4b75      	ldr	r3, [pc, #468]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ed      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d126      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424e:	d10d      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800425e:	0919      	lsrs	r1, r3, #4
 8004260:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004262:	400b      	ands	r3, r1
 8004264:	4967      	ldr	r1, [pc, #412]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004266:	4313      	orrs	r3, r2
 8004268:	610b      	str	r3, [r1, #16]
 800426a:	e005      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800426c:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	4a64      	ldr	r2, [pc, #400]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004272:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004276:	6113      	str	r3, [r2, #16]
 8004278:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800427a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004286:	495f      	ldr	r1, [pc, #380]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004288:	4313      	orrs	r3, r2
 800428a:	670b      	str	r3, [r1, #112]	; 0x70
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	75bb      	strb	r3, [r7, #22]
 8004292:	e001      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d07f      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	2b28      	cmp	r3, #40	; 0x28
 80042ac:	d866      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	08004383 	.word	0x08004383
 80042b8:	0800437d 	.word	0x0800437d
 80042bc:	0800437d 	.word	0x0800437d
 80042c0:	0800437d 	.word	0x0800437d
 80042c4:	0800437d 	.word	0x0800437d
 80042c8:	0800437d 	.word	0x0800437d
 80042cc:	0800437d 	.word	0x0800437d
 80042d0:	0800437d 	.word	0x0800437d
 80042d4:	08004359 	.word	0x08004359
 80042d8:	0800437d 	.word	0x0800437d
 80042dc:	0800437d 	.word	0x0800437d
 80042e0:	0800437d 	.word	0x0800437d
 80042e4:	0800437d 	.word	0x0800437d
 80042e8:	0800437d 	.word	0x0800437d
 80042ec:	0800437d 	.word	0x0800437d
 80042f0:	0800437d 	.word	0x0800437d
 80042f4:	0800436b 	.word	0x0800436b
 80042f8:	0800437d 	.word	0x0800437d
 80042fc:	0800437d 	.word	0x0800437d
 8004300:	0800437d 	.word	0x0800437d
 8004304:	0800437d 	.word	0x0800437d
 8004308:	0800437d 	.word	0x0800437d
 800430c:	0800437d 	.word	0x0800437d
 8004310:	0800437d 	.word	0x0800437d
 8004314:	08004383 	.word	0x08004383
 8004318:	0800437d 	.word	0x0800437d
 800431c:	0800437d 	.word	0x0800437d
 8004320:	0800437d 	.word	0x0800437d
 8004324:	0800437d 	.word	0x0800437d
 8004328:	0800437d 	.word	0x0800437d
 800432c:	0800437d 	.word	0x0800437d
 8004330:	0800437d 	.word	0x0800437d
 8004334:	08004383 	.word	0x08004383
 8004338:	0800437d 	.word	0x0800437d
 800433c:	0800437d 	.word	0x0800437d
 8004340:	0800437d 	.word	0x0800437d
 8004344:	0800437d 	.word	0x0800437d
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800437d 	.word	0x0800437d
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004383 	.word	0x08004383
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fb7a 	bl	8005a58 <RCCEx_PLL2_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004368:	e00c      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3324      	adds	r3, #36	; 0x24
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fc23 	bl	8005bbc <RCCEx_PLL3_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
      break;
 8004380:	e000      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004398:	491a      	ldr	r1, [pc, #104]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800439a:	4313      	orrs	r3, r2
 800439c:	654b      	str	r3, [r1, #84]	; 0x54
 800439e:	e001      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03f      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d821      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x838>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	08004411 	.word	0x08004411
 80043c4:	080043d9 	.word	0x080043d9
 80043c8:	080043eb 	.word	0x080043eb
 80043cc:	08004411 	.word	0x08004411
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004411 	.word	0x08004411
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fb3a 	bl	8005a58 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043e8:	e013      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3324      	adds	r3, #36	; 0x24
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 fbe3 	bl	8005bbc <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043fa:	e00a      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004400:	e007      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
 8004408:	58024800 	.word	0x58024800
 800440c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004418:	4b9f      	ldr	r3, [pc, #636]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	f023 0207 	bic.w	r2, r3, #7
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004424:	499c      	ldr	r1, [pc, #624]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	654b      	str	r3, [r1, #84]	; 0x54
 800442a:	e001      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d039      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004442:	2b05      	cmp	r3, #5
 8004444:	d820      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800448f 	.word	0x0800448f
 8004450:	08004465 	.word	0x08004465
 8004454:	08004477 	.word	0x08004477
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f001 faf4 	bl	8005a58 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004474:	e00c      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3324      	adds	r3, #36	; 0x24
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fb9d 	bl	8005bbc <RCCEx_PLL3_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004486:	e003      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
      break;
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800448e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004496:	4b80      	ldr	r3, [pc, #512]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f023 0207 	bic.w	r2, r3, #7
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044a4:	497c      	ldr	r1, [pc, #496]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	658b      	str	r3, [r1, #88]	; 0x58
 80044aa:	e001      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d04b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80044c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044cc:	d828      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d02a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80044d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d8:	d822      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80044da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044de:	d026      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80044e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044e4:	d81c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80044e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ea:	d010      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80044ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f0:	d816      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01d      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80044f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fa:	d111      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 faa8 	bl	8005a58 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800450c:	e012      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	2102      	movs	r1, #2
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fb51 	bl	8005bbc <RCCEx_PLL3_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004526:	bf00      	nop
 8004528:	e004      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004534:	7dfb      	ldrb	r3, [r7, #23]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800453a:	4b57      	ldr	r3, [pc, #348]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004548:	4953      	ldr	r1, [pc, #332]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	654b      	str	r3, [r1, #84]	; 0x54
 800454e:	e001      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d04b      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004566:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800456a:	d02e      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800456c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004570:	d828      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d02a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d822      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800457e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004582:	d026      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004588:	d81c      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458e:	d010      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	d816      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01d      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459e:	d111      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 fa56 	bl	8005a58 <RCCEx_PLL2_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045b0:	e012      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 faff 	bl	8005bbc <RCCEx_PLL3_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
      break;
 80045c8:	e006      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80045ca:	bf00      	nop
 80045cc:	e004      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80045d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045ec:	492a      	ldr	r1, [pc, #168]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	658b      	str	r3, [r1, #88]	; 0x58
 80045f2:	e001      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d04d      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800460a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800460e:	d02e      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004610:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004614:	d828      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d02a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004620:	d822      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004622:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004626:	d026      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004628:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800462c:	d81c      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800462e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004632:	d010      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004638:	d816      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01d      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004642:	d111      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	2100      	movs	r1, #0
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fa04 	bl	8005a58 <RCCEx_PLL2_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004654:	e012      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3324      	adds	r3, #36	; 0x24
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f001 faad 	bl	8005bbc <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004666:	e009      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
      break;
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800467a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004690:	4901      	ldr	r1, [pc, #4]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	658b      	str	r3, [r1, #88]	; 0x58
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b6:	d10a      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3324      	adds	r3, #36	; 0x24
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fa7c 	bl	8005bbc <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80046ce:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	4988      	ldr	r1, [pc, #544]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f8:	d10a      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fa5b 	bl	8005bbc <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004710:	4b7b      	ldr	r3, [pc, #492]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471e:	4978      	ldr	r1, [pc, #480]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d034      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800473a:	d01d      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800473c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004740:	d817      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d009      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800474c:	e011      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f97f 	bl	8005a58 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800475e:	e00c      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3324      	adds	r3, #36	; 0x24
 8004764:	2102      	movs	r1, #2
 8004766:	4618      	mov	r0, r3
 8004768:	f001 fa28 	bl	8005bbc <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004770:	e003      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
      break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004780:	4b5f      	ldr	r3, [pc, #380]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800478e:	495c      	ldr	r1, [pc, #368]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	658b      	str	r3, [r1, #88]	; 0x58
 8004794:	e001      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d033      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047b0:	d01c      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80047b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047b6:	d816      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80047b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80047be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c2:	d007      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80047c4:	e00f      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c6:	4b4e      	ldr	r3, [pc, #312]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	4a4d      	ldr	r2, [pc, #308]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80047d2:	e00c      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3324      	adds	r3, #36	; 0x24
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f9ee 	bl	8005bbc <RCCEx_PLL3_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80047ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004802:	493f      	ldr	r1, [pc, #252]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	654b      	str	r3, [r1, #84]	; 0x54
 8004808:	e001      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d029      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d007      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004828:	e00f      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a34      	ldr	r2, [pc, #208]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004836:	e00b      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	2102      	movs	r1, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f90a 	bl	8005a58 <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	4927      	ldr	r1, [pc, #156]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004868:	e001      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f001 f99b 	bl	8005bbc <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d035      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a6:	d017      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80048a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ac:	d811      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b2:	d013      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b8:	d80b      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d010      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80048be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c2:	d106      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80048d0:	e007      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
      break;
 80048d6:	e004      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	4902      	ldr	r1, [pc, #8]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	654b      	str	r3, [r1, #84]	; 0x54
 80048fc:	e004      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004920:	492d      	ldr	r1, [pc, #180]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004922:	4313      	orrs	r3, r2
 8004924:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493e:	4926      	ldr	r1, [pc, #152]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004940:	4313      	orrs	r3, r2
 8004942:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	491e      	ldr	r1, [pc, #120]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800495e:	4313      	orrs	r3, r2
 8004960:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004978:	6113      	str	r3, [r2, #16]
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004984:	4914      	ldr	r1, [pc, #80]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004986:	4313      	orrs	r3, r2
 8004988:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da08      	bge.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	490e      	ldr	r1, [pc, #56]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d009      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	4906      	ldr	r1, [pc, #24]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80049c4:	7dbb      	ldrb	r3, [r7, #22]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	58024400 	.word	0x58024400

080049dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b090      	sub	sp, #64	; 0x40
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ea:	f040 8089 	bne.w	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80049ee:	4b91      	ldr	r3, [pc, #580]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d87d      	bhi.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a19 	.word	0x08004a19
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	08004af5 	.word	0x08004af5
 8004a14:	08004a85 	.word	0x08004a85
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a18:	4b86      	ldr	r3, [pc, #536]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a24:	d107      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fec2 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a34:	e3f4      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a3a:	e3f1      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a3c:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d107      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a4a:	f107 0318 	add.w	r3, r7, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fc08 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a58:	e3e2      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a5e:	e3df      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a60:	4b74      	ldr	r3, [pc, #464]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a6e:	f107 030c 	add.w	r3, r7, #12
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fd4a 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a7c:	e3d0      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a82:	e3cd      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a84:	4b6b      	ldr	r3, [pc, #428]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a8e:	4b69      	ldr	r3, [pc, #420]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa0:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	08db      	lsrs	r3, r3, #3
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	4a63      	ldr	r2, [pc, #396]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab2:	e01e      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ab4:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004aca:	4b5c      	ldr	r3, [pc, #368]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ace:	e010      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ad0:	4b58      	ldr	r3, [pc, #352]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004adc:	d106      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae4:	d102      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ae6:	4b56      	ldr	r3, [pc, #344]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aea:	e002      	b.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004af0:	e396      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004af2:	e395      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e392      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8004afa:	2300      	movs	r3, #0
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004afe:	e38f      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b06:	f040 809f 	bne.w	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8004b0a:	4b4a      	ldr	r3, [pc, #296]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	d04d      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	f200 8084 	bhi.w	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	2bc0      	cmp	r3, #192	; 0xc0
 8004b2a:	d07d      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b30:	d87d      	bhi.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d02d      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d877      	bhi.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d012      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004b4a:	e070      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b58:	d107      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fe28 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b68:	e35a      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6e:	e357      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7e:	f107 0318 	add.w	r3, r7, #24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fb6e 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b8c:	e348      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b92:	e345      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fcb0 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb0:	e336      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb6:	e333      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be6:	e01e      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c02:	e010      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c18:	d102      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c1e:	e002      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c24:	e2fc      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c26:	e2fb      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c2c:	e2f8      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c32:	e2f5      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c34:	58024400 	.word	0x58024400
 8004c38:	03d09000 	.word	0x03d09000
 8004c3c:	003d0900 	.word	0x003d0900
 8004c40:	007a1200 	.word	0x007a1200
 8004c44:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4e:	f040 809c 	bne.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004c52:	4b9d      	ldr	r3, [pc, #628]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c56:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004c5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c62:	d054      	beq.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	f200 808b 	bhi.w	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c74:	f000 8083 	beq.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c7e:	f200 8081 	bhi.w	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d02f      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d878      	bhi.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9e:	d012      	beq.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004ca0:	e070      	b.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ca2:	4b89      	ldr	r3, [pc, #548]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd7d 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cbe:	e2af      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc4:	e2ac      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cc6:	4b80      	ldr	r3, [pc, #512]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd4:	f107 0318 	add.w	r3, r7, #24
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fac3 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ce2:	e29d      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce8:	e29a      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cea:	4b77      	ldr	r3, [pc, #476]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cf8:	f107 030c 	add.w	r3, r7, #12
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc05 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d06:	e28b      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d0c:	e288      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d0e:	4b6e      	ldr	r3, [pc, #440]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d16:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d18:	4b6b      	ldr	r3, [pc, #428]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d10c      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	08db      	lsrs	r3, r3, #3
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d3c:	e01e      	b.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d3e:	4b62      	ldr	r3, [pc, #392]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d52:	d102      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d54:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e010      	b.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d5a:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d66:	d106      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d70:	4b58      	ldr	r3, [pc, #352]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	e002      	b.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004d7a:	e251      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004d7c:	e250      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d7e:	4b56      	ldr	r3, [pc, #344]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d82:	e24d      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d88:	e24a      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	f040 80a7 	bne.w	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004d94:	4b4c      	ldr	r3, [pc, #304]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004d9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da4:	d055      	beq.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dac:	f200 8096 	bhi.w	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db6:	f000 8084 	beq.w	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dc0:	f200 808c 	bhi.w	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d030      	beq.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8083 	bhi.w	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d012      	beq.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004de4:	e07a      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004de6:	4b38      	ldr	r3, [pc, #224]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df2:	d107      	bne.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fcdb 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e02:	e20d      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e08:	e20a      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e16:	d107      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e18:	f107 0318 	add.w	r3, r7, #24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fa21 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e26:	e1fb      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e2c:	e1f8      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e3c:	f107 030c 	add.w	r3, r7, #12
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fb63 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e4a:	e1e9      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e50:	e1e6      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e52:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d10c      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	08db      	lsrs	r3, r3, #3
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e80:	e01e      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e96:	d102      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e9c:	e010      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eaa:	d106      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb2:	d102      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8004eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ebe:	e1af      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004ec0:	e1ae      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec6:	e1ab      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	03d09000 	.word	0x03d09000
 8004ed0:	003d0900 	.word	0x003d0900
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ee0:	e19e      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ee8:	d173      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004eea:	4b9d      	ldr	r3, [pc, #628]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efa:	d02f      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f02:	d863      	bhi.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f10:	d012      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8004f12:	e05b      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f14:	4b92      	ldr	r3, [pc, #584]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f20:	d107      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f22:	f107 0318 	add.w	r3, r7, #24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f99c 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f30:	e176      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f36:	e173      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f38:	4b89      	ldr	r3, [pc, #548]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d107      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f46:	f107 030c 	add.w	r3, r7, #12
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fade 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f54:	e164      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f5a:	e161      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f5c:	4b80      	ldr	r3, [pc, #512]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f66:	4b7e      	ldr	r3, [pc, #504]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f78:	4b79      	ldr	r3, [pc, #484]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	08db      	lsrs	r3, r3, #3
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	4a78      	ldr	r2, [pc, #480]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8a:	e01e      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f8c:	4b74      	ldr	r3, [pc, #464]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004fa2:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa6:	e010      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa8:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fbe:	4b6b      	ldr	r3, [pc, #428]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	e002      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fc8:	e12a      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004fca:	e129      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd0:	e126      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd8:	d133      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004fda:	4b61      	ldr	r3, [pc, #388]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d012      	beq.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004ff2:	e023      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ff4:	4b5a      	ldr	r3, [pc, #360]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005000:	d107      	bne.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fbd4 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005010:	e106      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005016:	e103      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005018:	4b51      	ldr	r3, [pc, #324]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005024:	d107      	bne.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005026:	f107 0318 	add.w	r3, r7, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f91a 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005034:	e0f4      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800503a:	e0f1      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005040:	e0ee      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005048:	f040 809b 	bne.w	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800504c:	4b44      	ldr	r3, [pc, #272]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800505c:	f000 808b 	beq.w	8005176 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005066:	f200 8089 	bhi.w	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005070:	d06c      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005078:	f200 8080 	bhi.w	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d056      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d877      	bhi.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005092:	d03b      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800509a:	d86f      	bhi.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a2:	d021      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050aa:	d867      	bhi.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80050ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b8:	d004      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80050ba:	e05f      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80050bc:	f000 f8bc 	bl	8005238 <HAL_RCCEx_GetD3PCLK1Freq>
 80050c0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80050c2:	e0ad      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050c4:	4b26      	ldr	r3, [pc, #152]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d0:	d107      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f8c4 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80050e0:	e09e      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e6:	e09b      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d107      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fa06 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005104:	e08c      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800510a:	e089      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d109      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800512a:	e079      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005130:	e076      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513e:	d102      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005144:	e06c      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800514a:	e069      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005158:	d10a      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800515a:	4b04      	ldr	r3, [pc, #16]	; (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800515e:	e05f      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005160:	58024400 	.word	0x58024400
 8005164:	03d09000 	.word	0x03d09000
 8005168:	003d0900 	.word	0x003d0900
 800516c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005174:	e054      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005176:	4b2d      	ldr	r3, [pc, #180]	; (800522c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800517a:	e051      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005180:	e04e      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005188:	d148      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800518a:	4b29      	ldr	r3, [pc, #164]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005192:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519a:	d02a      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a2:	d838      	bhi.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b0:	d00d      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80051b2:	e030      	b.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051b4:	4b1e      	ldr	r3, [pc, #120]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c0:	d102      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051c6:	e02b      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051cc:	e028      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051da:	d107      	bne.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fae7 	bl	80057b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051ea:	e019      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f0:	e016      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051f2:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fe:	d107      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005200:	f107 0318 	add.w	r3, r7, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f82d 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800520e:	e007      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005222:	4618      	mov	r0, r3
 8005224:	3740      	adds	r7, #64	; 0x40
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	00bb8000 	.word	0x00bb8000
 8005230:	58024400 	.word	0x58024400
 8005234:	007a1200 	.word	0x007a1200

08005238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800523c:	f7fe fc66 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4904      	ldr	r1, [pc, #16]	; (8005260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	58024400 	.word	0x58024400
 8005260:	0800926c 	.word	0x0800926c

08005264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005264:	b480      	push	{r7}
 8005266:	b089      	sub	sp, #36	; 0x24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800526c:	4ba1      	ldr	r3, [pc, #644]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005276:	4b9f      	ldr	r3, [pc, #636]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	0b1b      	lsrs	r3, r3, #12
 800527c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005282:	4b9c      	ldr	r3, [pc, #624]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800528e:	4b99      	ldr	r3, [pc, #612]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8111 	beq.w	80054d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	f000 8083 	beq.w	80053c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f200 80a1 	bhi.w	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d056      	beq.n	800537c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052ce:	e099      	b.n	8005404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02d      	beq.n	8005338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052dc:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	4a84      	ldr	r2, [pc, #528]	; (80054f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b7b      	ldr	r3, [pc, #492]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005336:	e087      	b.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800537a:	e065      	b.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053be:	e043      	b.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b48      	ldr	r3, [pc, #288]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005402:	e021      	b.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	0a5b      	lsrs	r3, r3, #9
 800544e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800545e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005462:	edd7 6a07 	vldr	s13, [r7, #28]
 8005466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546e:	ee17 2a90 	vmov	r2, s15
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005476:	4b1f      	ldr	r3, [pc, #124]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005490:	edd7 6a07 	vldr	s13, [r7, #28]
 8005494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549c:	ee17 2a90 	vmov	r2, s15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054be:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 2a90 	vmov	r2, s15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054d2:	e008      	b.n	80054e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	bf00      	nop
 80054e8:	3724      	adds	r7, #36	; 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	58024400 	.word	0x58024400
 80054f8:	03d09000 	.word	0x03d09000
 80054fc:	46000000 	.word	0x46000000
 8005500:	4c742400 	.word	0x4c742400
 8005504:	4a742400 	.word	0x4a742400
 8005508:	4af42400 	.word	0x4af42400

0800550c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005514:	4ba1      	ldr	r3, [pc, #644]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800551e:	4b9f      	ldr	r3, [pc, #636]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	0d1b      	lsrs	r3, r3, #20
 8005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800552a:	4b9c      	ldr	r3, [pc, #624]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005536:	4b99      	ldr	r3, [pc, #612]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	08db      	lsrs	r3, r3, #3
 800553c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8111 	beq.w	800577c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b02      	cmp	r3, #2
 800555e:	f000 8083 	beq.w	8005668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b02      	cmp	r3, #2
 8005566:	f200 80a1 	bhi.w	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d056      	beq.n	8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005576:	e099      	b.n	80056ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005578:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02d      	beq.n	80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005584:	4b85      	ldr	r3, [pc, #532]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	4a84      	ldr	r2, [pc, #528]	; (80057a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
 8005594:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	ee07 3a90 	vmov	s15, r3
 800559c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ae:	4b7b      	ldr	r3, [pc, #492]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055be:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055de:	e087      	b.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80055ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f2:	4b6a      	ldr	r3, [pc, #424]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	ed97 6a03 	vldr	s12, [r7, #12]
 8005606:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005622:	e065      	b.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005636:	4b59      	ldr	r3, [pc, #356]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005646:	ed97 6a03 	vldr	s12, [r7, #12]
 800564a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800564e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005666:	e043      	b.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567a:	4b48      	ldr	r3, [pc, #288]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568a:	ed97 6a03 	vldr	s12, [r7, #12]
 800568e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056aa:	e021      	b.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	0a5b      	lsrs	r3, r3, #9
 80056f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800570a:	edd7 6a07 	vldr	s13, [r7, #28]
 800570e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005716:	ee17 2a90 	vmov	r2, s15
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800571e:	4b1f      	ldr	r3, [pc, #124]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005738:	edd7 6a07 	vldr	s13, [r7, #28]
 800573c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005744:	ee17 2a90 	vmov	r2, s15
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800574c:	4b13      	ldr	r3, [pc, #76]	; (800579c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	0e1b      	lsrs	r3, r3, #24
 8005752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005766:	edd7 6a07 	vldr	s13, [r7, #28]
 800576a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800577a:	e008      	b.n	800578e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	609a      	str	r2, [r3, #8]
}
 800578e:	bf00      	nop
 8005790:	3724      	adds	r7, #36	; 0x24
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
 80057a0:	03d09000 	.word	0x03d09000
 80057a4:	46000000 	.word	0x46000000
 80057a8:	4c742400 	.word	0x4c742400
 80057ac:	4a742400 	.word	0x4a742400
 80057b0:	4af42400 	.word	0x4af42400

080057b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057bc:	4ba0      	ldr	r3, [pc, #640]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80057c6:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80057d2:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80057dc:	4b98      	ldr	r3, [pc, #608]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8111 	beq.w	8005a22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b02      	cmp	r3, #2
 8005804:	f000 8083 	beq.w	800590e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b02      	cmp	r3, #2
 800580c:	f200 80a1 	bhi.w	8005952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d056      	beq.n	80058ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800581c:	e099      	b.n	8005952 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800581e:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b00      	cmp	r3, #0
 8005828:	d02d      	beq.n	8005886 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800582a:	4b85      	ldr	r3, [pc, #532]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	08db      	lsrs	r3, r3, #3
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	4a83      	ldr	r2, [pc, #524]	; (8005a44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005854:	4b7a      	ldr	r3, [pc, #488]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005864:	ed97 6a03 	vldr	s12, [r7, #12]
 8005868:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800586c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005880:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005884:	e087      	b.n	8005996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005890:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005898:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c8:	e065      	b.n	8005996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005a50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80058d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058dc:	4b58      	ldr	r3, [pc, #352]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80058f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590c:	e043      	b.n	8005996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005918:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005a54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800591c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005920:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005930:	ed97 6a03 	vldr	s12, [r7, #12]
 8005934:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005950:	e021      	b.n	8005996 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005a4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005964:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	ed97 6a03 	vldr	s12, [r7, #12]
 8005978:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005a48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800597c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005994:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	0a5b      	lsrs	r3, r3, #9
 800599c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a0:	ee07 3a90 	vmov	s15, r3
 80059a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059bc:	ee17 2a90 	vmov	r2, s15
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059de:	edd7 6a07 	vldr	s13, [r7, #28]
 80059e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ea:	ee17 2a90 	vmov	r2, s15
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	0e1b      	lsrs	r3, r3, #24
 80059f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a18:	ee17 2a90 	vmov	r2, s15
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005a20:	e008      	b.n	8005a34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3724      	adds	r7, #36	; 0x24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	58024400 	.word	0x58024400
 8005a44:	03d09000 	.word	0x03d09000
 8005a48:	46000000 	.word	0x46000000
 8005a4c:	4c742400 	.word	0x4c742400
 8005a50:	4a742400 	.word	0x4a742400
 8005a54:	4af42400 	.word	0x4af42400

08005a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a66:	4b53      	ldr	r3, [pc, #332]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d101      	bne.n	8005a76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e099      	b.n	8005baa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a76:	4b4f      	ldr	r3, [pc, #316]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a4e      	ldr	r2, [pc, #312]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a82:	f7fb fc03 	bl	800128c <HAL_GetTick>
 8005a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a88:	e008      	b.n	8005a9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a8a:	f7fb fbff 	bl	800128c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e086      	b.n	8005baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a9c:	4b45      	ldr	r3, [pc, #276]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	493f      	ldr	r1, [pc, #252]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	628b      	str	r3, [r1, #40]	; 0x28
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	025b      	lsls	r3, r3, #9
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aec:	4931      	ldr	r1, [pc, #196]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	492d      	ldr	r1, [pc, #180]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b04:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	f023 0220 	bic.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	4928      	ldr	r1, [pc, #160]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	f023 0310 	bic.w	r3, r3, #16
 8005b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <RCCEx_PLL2_Config+0x160>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	69d2      	ldr	r2, [r2, #28]
 8005b2e:	00d2      	lsls	r2, r2, #3
 8005b30:	4920      	ldr	r1, [pc, #128]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	f043 0310 	orr.w	r3, r3, #16
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b54:	e00f      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d106      	bne.n	8005b6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b68:	e005      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b82:	f7fb fb83 	bl	800128c <HAL_GetTick>
 8005b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b88:	e008      	b.n	8005b9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b8a:	f7fb fb7f 	bl	800128c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	ffff0007 	.word	0xffff0007

08005bbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d101      	bne.n	8005bda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e099      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bda:	4b4f      	ldr	r3, [pc, #316]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a4e      	ldr	r2, [pc, #312]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fb fb51 	bl	800128c <HAL_GetTick>
 8005bea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bee:	f7fb fb4d 	bl	800128c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e086      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c00:	4b45      	ldr	r3, [pc, #276]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c0c:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	493f      	ldr	r1, [pc, #252]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	025b      	lsls	r3, r3, #9
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c50:	4931      	ldr	r1, [pc, #196]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	492d      	ldr	r1, [pc, #180]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4928      	ldr	r1, [pc, #160]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c7a:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <RCCEx_PLL3_Config+0x160>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	69d2      	ldr	r2, [r2, #28]
 8005c92:	00d2      	lsls	r2, r2, #3
 8005c94:	4920      	ldr	r1, [pc, #128]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c9a:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb8:	e00f      	b.n	8005cda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d106      	bne.n	8005cce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cc0:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ccc:	e005      	b.n	8005cda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fb fad1 	bl	800128c <HAL_GetTick>
 8005cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cee:	f7fb facd 	bl	800128c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e006      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	58024400 	.word	0x58024400
 8005d1c:	ffff0007 	.word	0xffff0007

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e049      	b.n	8005dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fb f862 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fb8c 	bl	800647c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e04c      	b.n	8005e82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <HAL_TIM_Base_Start+0xc0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d022      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d01d      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <HAL_TIM_Base_Start+0xc4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_TIM_Base_Start+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d013      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <HAL_TIM_Base_Start+0xcc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_TIM_Base_Start+0xd0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1c      	ldr	r2, [pc, #112]	; (8005ea4 <HAL_TIM_Base_Start+0xd4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_Base_Start+0x70>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <HAL_TIM_Base_Start+0xd8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d115      	bne.n	8005e6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_TIM_Base_Start+0xdc>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	d015      	beq.n	8005e7e <HAL_TIM_Base_Start+0xae>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e58:	d011      	beq.n	8005e7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	e008      	b.n	8005e7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	e000      	b.n	8005e80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40001800 	.word	0x40001800
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	00010007 	.word	0x00010007

08005eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e054      	b.n	8005f72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a26      	ldr	r2, [pc, #152]	; (8005f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d022      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d01d      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a21      	ldr	r2, [pc, #132]	; (8005f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x80>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	; (8005f98 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d115      	bne.n	8005f5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_TIM_Base_Start_IT+0xec>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d015      	beq.n	8005f6e <HAL_TIM_Base_Start_IT+0xbe>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d011      	beq.n	8005f6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0201 	orr.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5a:	e008      	b.n	8005f6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	e000      	b.n	8005f70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	40010400 	.word	0x40010400
 8005f94:	40001800 	.word	0x40001800
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	00010007 	.word	0x00010007

08005fa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	f240 4344 	movw	r3, #1092	; 0x444
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_Base_Stop_IT+0x48>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d122      	bne.n	800605a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d11b      	bne.n	800605a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0202 	mvn.w	r2, #2
 800602a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f9fd 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9ef 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa00 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d122      	bne.n	80060ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b04      	cmp	r3, #4
 8006074:	d11b      	bne.n	80060ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0204 	mvn.w	r2, #4
 800607e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9d3 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 800609a:	e005      	b.n	80060a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9c5 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9d6 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d122      	bne.n	8006102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d11b      	bne.n	8006102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0208 	mvn.w	r2, #8
 80060d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f9a9 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 80060ee:	e005      	b.n	80060fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f99b 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9ac 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d122      	bne.n	8006156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b10      	cmp	r3, #16
 800611c:	d11b      	bne.n	8006156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0210 	mvn.w	r2, #16
 8006126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2208      	movs	r2, #8
 800612c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f97f 	bl	8006440 <HAL_TIM_IC_CaptureCallback>
 8006142:	e005      	b.n	8006150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f971 	bl	800642c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f982 	bl	8006454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10e      	bne.n	8006182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b01      	cmp	r3, #1
 8006170:	d107      	bne.n	8006182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0201 	mvn.w	r2, #1
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7fa fc69 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d10e      	bne.n	80061ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b80      	cmp	r3, #128	; 0x80
 800619c:	d107      	bne.n	80061ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb37 	bl	800681c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb2a 	bl	8006830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d10e      	bne.n	8006208 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d107      	bne.n	8006208 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f930 	bl	8006468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d10e      	bne.n	8006234 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b20      	cmp	r3, #32
 8006222:	d107      	bne.n	8006234 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0220 	mvn.w	r2, #32
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 faea 	bl	8006808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIM_ConfigClockSource+0x1c>
 8006254:	2302      	movs	r3, #2
 8006256:	e0dc      	b.n	8006412 <HAL_TIM_ConfigClockSource+0x1d6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006274:	4013      	ands	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800627e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a64      	ldr	r2, [pc, #400]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f000 80a9 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006294:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f200 80ae 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800629c:	4a61      	ldr	r2, [pc, #388]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f000 80a1 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062a4:	4a5f      	ldr	r2, [pc, #380]	; (8006424 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f200 80a6 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ac:	4a5e      	ldr	r2, [pc, #376]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f000 8099 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062b4:	4a5c      	ldr	r2, [pc, #368]	; (8006428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f200 809e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c0:	f000 8091 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062c8:	f200 8096 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	f000 8089 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80062d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d8:	f200 808e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d03e      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0x124>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e6:	f200 8087 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	f000 8086 	beq.w	80063fe <HAL_TIM_ConfigClockSource+0x1c2>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d87f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80062f8:	2b70      	cmp	r3, #112	; 0x70
 80062fa:	d01a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0xf6>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d87b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d050      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x16a>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d877      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006308:	2b50      	cmp	r3, #80	; 0x50
 800630a:	d03c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x14a>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d873      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d058      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x18a>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d86f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d86b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d060      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d867      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800632c:	2b10      	cmp	r3, #16
 800632e:	d05a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006330:	e062      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f000 f9b3 	bl	80066ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e04f      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f000 f99c 	bl	80066ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e03c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	461a      	mov	r2, r3
 8006394:	f000 f90c 	bl	80065b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2150      	movs	r1, #80	; 0x50
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f966 	bl	8006670 <TIM_ITRx_SetConfig>
      break;
 80063a4:	e02c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 f92b 	bl	800660e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2160      	movs	r1, #96	; 0x60
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f956 	bl	8006670 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e01c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 f8ec 	bl	80065b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f946 	bl	8006670 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 f93d 	bl	8006670 <TIM_ITRx_SetConfig>
      break;
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80063fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	ffceff88 	.word	0xffceff88
 8006420:	00100040 	.word	0x00100040
 8006424:	00100030 	.word	0x00100030
 8006428:	00100020 	.word	0x00100020

0800642c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a40      	ldr	r2, [pc, #256]	; (8006590 <TIM_Base_SetConfig+0x114>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649a:	d00f      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3d      	ldr	r2, [pc, #244]	; (8006594 <TIM_Base_SetConfig+0x118>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3c      	ldr	r2, [pc, #240]	; (8006598 <TIM_Base_SetConfig+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3b      	ldr	r2, [pc, #236]	; (800659c <TIM_Base_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3a      	ldr	r2, [pc, #232]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d108      	bne.n	80064ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2f      	ldr	r2, [pc, #188]	; (8006590 <TIM_Base_SetConfig+0x114>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01f      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d01b      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_Base_SetConfig+0x118>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d017      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_Base_SetConfig+0x11c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_Base_SetConfig+0x120>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a28      	ldr	r2, [pc, #160]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <TIM_Base_SetConfig+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <TIM_Base_SetConfig+0x114>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00f      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <TIM_Base_SetConfig+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a11      	ldr	r2, [pc, #68]	; (80065a4 <TIM_Base_SetConfig+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <TIM_Base_SetConfig+0x12c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_Base_SetConfig+0xf8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <TIM_Base_SetConfig+0x130>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d103      	bne.n	800657c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	615a      	str	r2, [r3, #20]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40010000 	.word	0x40010000
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800
 800659c:	40000c00 	.word	0x40000c00
 80065a0:	40010400 	.word	0x40010400
 80065a4:	40014000 	.word	0x40014000
 80065a8:	40014400 	.word	0x40014400
 80065ac:	40014800 	.word	0x40014800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0210 	bic.w	r2, r3, #16
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800664a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
	...

08006670 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <TIM_ITRx_SetConfig+0x38>)
 8006684:	4013      	ands	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	f043 0307 	orr.w	r3, r3, #7
 8006692:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	609a      	str	r2, [r3, #8]
}
 800669a:	bf00      	nop
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	ffcfff8f 	.word	0xffcfff8f

080066ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	021a      	lsls	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006700:	2302      	movs	r3, #2
 8006702:	e06d      	b.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a30      	ldr	r2, [pc, #192]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800673e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006776:	d01d      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a16      	ldr	r2, [pc, #88]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a15      	ldr	r2, [pc, #84]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10c      	bne.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40000400 	.word	0x40000400
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40001800 	.word	0x40001800
 8006804:	40014000 	.word	0x40014000

08006808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e042      	b.n	80068dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fa fb11 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2224      	movs	r2, #36	; 0x24
 8006872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f8c2 	bl	8006a10 <UART_SetConfig>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e022      	b.n	80068dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 ff22 	bl	80076e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 ffa9 	bl	800782c <UART_CheckIdleState>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08a      	sub	sp, #40	; 0x28
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	f040 8083 	bne.w	8006a06 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_UART_Transmit+0x28>
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e07b      	b.n	8006a08 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_UART_Transmit+0x3a>
 800691a:	2302      	movs	r3, #2
 800691c:	e074      	b.n	8006a08 <HAL_UART_Transmit+0x124>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2221      	movs	r2, #33	; 0x21
 8006932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006936:	f7fa fca9 	bl	800128c <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d108      	bne.n	8006968 <HAL_UART_Transmit+0x84>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e003      	b.n	8006970 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006978:	e02c      	b.n	80069d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2200      	movs	r2, #0
 8006982:	2180      	movs	r1, #128	; 0x80
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 ff9c 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e039      	b.n	8006a08 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	3302      	adds	r3, #2
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e007      	b.n	80069c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3301      	adds	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1cc      	bne.n	800697a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	2140      	movs	r1, #64	; 0x40
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 ff69 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e006      	b.n	8006a08 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a14:	b092      	sub	sp, #72	; 0x48
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4bbe      	ldr	r3, [pc, #760]	; (8006d38 <UART_SetConfig+0x328>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4ab3      	ldr	r2, [pc, #716]	; (8006d3c <UART_SetConfig+0x32c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	4baf      	ldr	r3, [pc, #700]	; (8006d40 <UART_SetConfig+0x330>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	f023 010f 	bic.w	r1, r3, #15
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4aa6      	ldr	r2, [pc, #664]	; (8006d44 <UART_SetConfig+0x334>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d177      	bne.n	8006ba0 <UART_SetConfig+0x190>
 8006ab0:	4ba5      	ldr	r3, [pc, #660]	; (8006d48 <UART_SetConfig+0x338>)
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ab8:	2b28      	cmp	r3, #40	; 0x28
 8006aba:	d86d      	bhi.n	8006b98 <UART_SetConfig+0x188>
 8006abc:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0xb4>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006b69 	.word	0x08006b69
 8006ac8:	08006b99 	.word	0x08006b99
 8006acc:	08006b99 	.word	0x08006b99
 8006ad0:	08006b99 	.word	0x08006b99
 8006ad4:	08006b99 	.word	0x08006b99
 8006ad8:	08006b99 	.word	0x08006b99
 8006adc:	08006b99 	.word	0x08006b99
 8006ae0:	08006b99 	.word	0x08006b99
 8006ae4:	08006b71 	.word	0x08006b71
 8006ae8:	08006b99 	.word	0x08006b99
 8006aec:	08006b99 	.word	0x08006b99
 8006af0:	08006b99 	.word	0x08006b99
 8006af4:	08006b99 	.word	0x08006b99
 8006af8:	08006b99 	.word	0x08006b99
 8006afc:	08006b99 	.word	0x08006b99
 8006b00:	08006b99 	.word	0x08006b99
 8006b04:	08006b79 	.word	0x08006b79
 8006b08:	08006b99 	.word	0x08006b99
 8006b0c:	08006b99 	.word	0x08006b99
 8006b10:	08006b99 	.word	0x08006b99
 8006b14:	08006b99 	.word	0x08006b99
 8006b18:	08006b99 	.word	0x08006b99
 8006b1c:	08006b99 	.word	0x08006b99
 8006b20:	08006b99 	.word	0x08006b99
 8006b24:	08006b81 	.word	0x08006b81
 8006b28:	08006b99 	.word	0x08006b99
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006b99 	.word	0x08006b99
 8006b34:	08006b99 	.word	0x08006b99
 8006b38:	08006b99 	.word	0x08006b99
 8006b3c:	08006b99 	.word	0x08006b99
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006b89 	.word	0x08006b89
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006b99 	.word	0x08006b99
 8006b54:	08006b99 	.word	0x08006b99
 8006b58:	08006b99 	.word	0x08006b99
 8006b5c:	08006b99 	.word	0x08006b99
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e326      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b70:	2304      	movs	r3, #4
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e322      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e31e      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b80:	2310      	movs	r3, #16
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e31a      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b88:	2320      	movs	r3, #32
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e316      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e312      	b.n	80071be <UART_SetConfig+0x7ae>
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e30e      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a69      	ldr	r2, [pc, #420]	; (8006d4c <UART_SetConfig+0x33c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d130      	bne.n	8006c0c <UART_SetConfig+0x1fc>
 8006baa:	4b67      	ldr	r3, [pc, #412]	; (8006d48 <UART_SetConfig+0x338>)
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b05      	cmp	r3, #5
 8006bb4:	d826      	bhi.n	8006c04 <UART_SetConfig+0x1f4>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x1ac>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bd5 	.word	0x08006bd5
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	08006be5 	.word	0x08006be5
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006bf5 	.word	0x08006bf5
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e2f0      	b.n	80071be <UART_SetConfig+0x7ae>
 8006bdc:	2304      	movs	r3, #4
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e2ec      	b.n	80071be <UART_SetConfig+0x7ae>
 8006be4:	2308      	movs	r3, #8
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e2e8      	b.n	80071be <UART_SetConfig+0x7ae>
 8006bec:	2310      	movs	r3, #16
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e2e4      	b.n	80071be <UART_SetConfig+0x7ae>
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e2e0      	b.n	80071be <UART_SetConfig+0x7ae>
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e2dc      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e2d8      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a4f      	ldr	r2, [pc, #316]	; (8006d50 <UART_SetConfig+0x340>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d130      	bne.n	8006c78 <UART_SetConfig+0x268>
 8006c16:	4b4c      	ldr	r3, [pc, #304]	; (8006d48 <UART_SetConfig+0x338>)
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d826      	bhi.n	8006c70 <UART_SetConfig+0x260>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <UART_SetConfig+0x218>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c41 	.word	0x08006c41
 8006c2c:	08006c49 	.word	0x08006c49
 8006c30:	08006c51 	.word	0x08006c51
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e2ba      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4e:	e2b6      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e2b2      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5e:	e2ae      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c60:	2320      	movs	r3, #32
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e2aa      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e2a6      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e2a2      	b.n	80071be <UART_SetConfig+0x7ae>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a35      	ldr	r2, [pc, #212]	; (8006d54 <UART_SetConfig+0x344>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d130      	bne.n	8006ce4 <UART_SetConfig+0x2d4>
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <UART_SetConfig+0x338>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b05      	cmp	r3, #5
 8006c8c:	d826      	bhi.n	8006cdc <UART_SetConfig+0x2cc>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <UART_SetConfig+0x284>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cad 	.word	0x08006cad
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006cbd 	.word	0x08006cbd
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb2:	e284      	b.n	80071be <UART_SetConfig+0x7ae>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cba:	e280      	b.n	80071be <UART_SetConfig+0x7ae>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cc2:	e27c      	b.n	80071be <UART_SetConfig+0x7ae>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cca:	e278      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ccc:	2320      	movs	r3, #32
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e274      	b.n	80071be <UART_SetConfig+0x7ae>
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e270      	b.n	80071be <UART_SetConfig+0x7ae>
 8006cdc:	2380      	movs	r3, #128	; 0x80
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e26c      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <UART_SetConfig+0x348>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d142      	bne.n	8006d74 <UART_SetConfig+0x364>
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <UART_SetConfig+0x338>)
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d838      	bhi.n	8006d6c <UART_SetConfig+0x35c>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x2f0>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d5d 	.word	0x08006d5d
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e24e      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e24a      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d2e:	e246      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d36:	e242      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d38:	cfff69f3 	.word	0xcfff69f3
 8006d3c:	58000c00 	.word	0x58000c00
 8006d40:	11fff4ff 	.word	0x11fff4ff
 8006d44:	40011000 	.word	0x40011000
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	40004400 	.word	0x40004400
 8006d50:	40004800 	.word	0x40004800
 8006d54:	40004c00 	.word	0x40004c00
 8006d58:	40005000 	.word	0x40005000
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e22c      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e228      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e224      	b.n	80071be <UART_SetConfig+0x7ae>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4ab1      	ldr	r2, [pc, #708]	; (8007040 <UART_SetConfig+0x630>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d176      	bne.n	8006e6c <UART_SetConfig+0x45c>
 8006d7e:	4bb1      	ldr	r3, [pc, #708]	; (8007044 <UART_SetConfig+0x634>)
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d86:	2b28      	cmp	r3, #40	; 0x28
 8006d88:	d86c      	bhi.n	8006e64 <UART_SetConfig+0x454>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0x380>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006e35 	.word	0x08006e35
 8006d94:	08006e65 	.word	0x08006e65
 8006d98:	08006e65 	.word	0x08006e65
 8006d9c:	08006e65 	.word	0x08006e65
 8006da0:	08006e65 	.word	0x08006e65
 8006da4:	08006e65 	.word	0x08006e65
 8006da8:	08006e65 	.word	0x08006e65
 8006dac:	08006e65 	.word	0x08006e65
 8006db0:	08006e3d 	.word	0x08006e3d
 8006db4:	08006e65 	.word	0x08006e65
 8006db8:	08006e65 	.word	0x08006e65
 8006dbc:	08006e65 	.word	0x08006e65
 8006dc0:	08006e65 	.word	0x08006e65
 8006dc4:	08006e65 	.word	0x08006e65
 8006dc8:	08006e65 	.word	0x08006e65
 8006dcc:	08006e65 	.word	0x08006e65
 8006dd0:	08006e45 	.word	0x08006e45
 8006dd4:	08006e65 	.word	0x08006e65
 8006dd8:	08006e65 	.word	0x08006e65
 8006ddc:	08006e65 	.word	0x08006e65
 8006de0:	08006e65 	.word	0x08006e65
 8006de4:	08006e65 	.word	0x08006e65
 8006de8:	08006e65 	.word	0x08006e65
 8006dec:	08006e65 	.word	0x08006e65
 8006df0:	08006e4d 	.word	0x08006e4d
 8006df4:	08006e65 	.word	0x08006e65
 8006df8:	08006e65 	.word	0x08006e65
 8006dfc:	08006e65 	.word	0x08006e65
 8006e00:	08006e65 	.word	0x08006e65
 8006e04:	08006e65 	.word	0x08006e65
 8006e08:	08006e65 	.word	0x08006e65
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e55 	.word	0x08006e55
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e65 	.word	0x08006e65
 8006e1c:	08006e65 	.word	0x08006e65
 8006e20:	08006e65 	.word	0x08006e65
 8006e24:	08006e65 	.word	0x08006e65
 8006e28:	08006e65 	.word	0x08006e65
 8006e2c:	08006e65 	.word	0x08006e65
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e1c0      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e1bc      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e1b8      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e1b4      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e54:	2320      	movs	r3, #32
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e1b0      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e1ac      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e1a8      	b.n	80071be <UART_SetConfig+0x7ae>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a75      	ldr	r2, [pc, #468]	; (8007048 <UART_SetConfig+0x638>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d130      	bne.n	8006ed8 <UART_SetConfig+0x4c8>
 8006e76:	4b73      	ldr	r3, [pc, #460]	; (8007044 <UART_SetConfig+0x634>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d826      	bhi.n	8006ed0 <UART_SetConfig+0x4c0>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x478>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e18a      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e186      	b.n	80071be <UART_SetConfig+0x7ae>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e182      	b.n	80071be <UART_SetConfig+0x7ae>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e17e      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e17a      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e176      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e172      	b.n	80071be <UART_SetConfig+0x7ae>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a5b      	ldr	r2, [pc, #364]	; (800704c <UART_SetConfig+0x63c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d130      	bne.n	8006f44 <UART_SetConfig+0x534>
 8006ee2:	4b58      	ldr	r3, [pc, #352]	; (8007044 <UART_SetConfig+0x634>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	d826      	bhi.n	8006f3c <UART_SetConfig+0x52c>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x4e4>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	08006f1d 	.word	0x08006f1d
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e154      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e150      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e14c      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f24:	2310      	movs	r3, #16
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e148      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e144      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e140      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e13c      	b.n	80071be <UART_SetConfig+0x7ae>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a41      	ldr	r2, [pc, #260]	; (8007050 <UART_SetConfig+0x640>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f040 8082 	bne.w	8007054 <UART_SetConfig+0x644>
 8006f50:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <UART_SetConfig+0x634>)
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f58:	2b28      	cmp	r3, #40	; 0x28
 8006f5a:	d86d      	bhi.n	8007038 <UART_SetConfig+0x628>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x554>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08007009 	.word	0x08007009
 8006f68:	08007039 	.word	0x08007039
 8006f6c:	08007039 	.word	0x08007039
 8006f70:	08007039 	.word	0x08007039
 8006f74:	08007039 	.word	0x08007039
 8006f78:	08007039 	.word	0x08007039
 8006f7c:	08007039 	.word	0x08007039
 8006f80:	08007039 	.word	0x08007039
 8006f84:	08007011 	.word	0x08007011
 8006f88:	08007039 	.word	0x08007039
 8006f8c:	08007039 	.word	0x08007039
 8006f90:	08007039 	.word	0x08007039
 8006f94:	08007039 	.word	0x08007039
 8006f98:	08007039 	.word	0x08007039
 8006f9c:	08007039 	.word	0x08007039
 8006fa0:	08007039 	.word	0x08007039
 8006fa4:	08007019 	.word	0x08007019
 8006fa8:	08007039 	.word	0x08007039
 8006fac:	08007039 	.word	0x08007039
 8006fb0:	08007039 	.word	0x08007039
 8006fb4:	08007039 	.word	0x08007039
 8006fb8:	08007039 	.word	0x08007039
 8006fbc:	08007039 	.word	0x08007039
 8006fc0:	08007039 	.word	0x08007039
 8006fc4:	08007021 	.word	0x08007021
 8006fc8:	08007039 	.word	0x08007039
 8006fcc:	08007039 	.word	0x08007039
 8006fd0:	08007039 	.word	0x08007039
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007039 	.word	0x08007039
 8006fdc:	08007039 	.word	0x08007039
 8006fe0:	08007039 	.word	0x08007039
 8006fe4:	08007029 	.word	0x08007029
 8006fe8:	08007039 	.word	0x08007039
 8006fec:	08007039 	.word	0x08007039
 8006ff0:	08007039 	.word	0x08007039
 8006ff4:	08007039 	.word	0x08007039
 8006ff8:	08007039 	.word	0x08007039
 8006ffc:	08007039 	.word	0x08007039
 8007000:	08007039 	.word	0x08007039
 8007004:	08007031 	.word	0x08007031
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700e:	e0d6      	b.n	80071be <UART_SetConfig+0x7ae>
 8007010:	2304      	movs	r3, #4
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007016:	e0d2      	b.n	80071be <UART_SetConfig+0x7ae>
 8007018:	2308      	movs	r3, #8
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701e:	e0ce      	b.n	80071be <UART_SetConfig+0x7ae>
 8007020:	2310      	movs	r3, #16
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007026:	e0ca      	b.n	80071be <UART_SetConfig+0x7ae>
 8007028:	2320      	movs	r3, #32
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e0c6      	b.n	80071be <UART_SetConfig+0x7ae>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e0c2      	b.n	80071be <UART_SetConfig+0x7ae>
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e0be      	b.n	80071be <UART_SetConfig+0x7ae>
 8007040:	40011400 	.word	0x40011400
 8007044:	58024400 	.word	0x58024400
 8007048:	40007800 	.word	0x40007800
 800704c:	40007c00 	.word	0x40007c00
 8007050:	40011800 	.word	0x40011800
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4aad      	ldr	r2, [pc, #692]	; (8007310 <UART_SetConfig+0x900>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d176      	bne.n	800714c <UART_SetConfig+0x73c>
 800705e:	4bad      	ldr	r3, [pc, #692]	; (8007314 <UART_SetConfig+0x904>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007066:	2b28      	cmp	r3, #40	; 0x28
 8007068:	d86c      	bhi.n	8007144 <UART_SetConfig+0x734>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0x660>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007115 	.word	0x08007115
 8007074:	08007145 	.word	0x08007145
 8007078:	08007145 	.word	0x08007145
 800707c:	08007145 	.word	0x08007145
 8007080:	08007145 	.word	0x08007145
 8007084:	08007145 	.word	0x08007145
 8007088:	08007145 	.word	0x08007145
 800708c:	08007145 	.word	0x08007145
 8007090:	0800711d 	.word	0x0800711d
 8007094:	08007145 	.word	0x08007145
 8007098:	08007145 	.word	0x08007145
 800709c:	08007145 	.word	0x08007145
 80070a0:	08007145 	.word	0x08007145
 80070a4:	08007145 	.word	0x08007145
 80070a8:	08007145 	.word	0x08007145
 80070ac:	08007145 	.word	0x08007145
 80070b0:	08007125 	.word	0x08007125
 80070b4:	08007145 	.word	0x08007145
 80070b8:	08007145 	.word	0x08007145
 80070bc:	08007145 	.word	0x08007145
 80070c0:	08007145 	.word	0x08007145
 80070c4:	08007145 	.word	0x08007145
 80070c8:	08007145 	.word	0x08007145
 80070cc:	08007145 	.word	0x08007145
 80070d0:	0800712d 	.word	0x0800712d
 80070d4:	08007145 	.word	0x08007145
 80070d8:	08007145 	.word	0x08007145
 80070dc:	08007145 	.word	0x08007145
 80070e0:	08007145 	.word	0x08007145
 80070e4:	08007145 	.word	0x08007145
 80070e8:	08007145 	.word	0x08007145
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007135 	.word	0x08007135
 80070f4:	08007145 	.word	0x08007145
 80070f8:	08007145 	.word	0x08007145
 80070fc:	08007145 	.word	0x08007145
 8007100:	08007145 	.word	0x08007145
 8007104:	08007145 	.word	0x08007145
 8007108:	08007145 	.word	0x08007145
 800710c:	08007145 	.word	0x08007145
 8007110:	0800713d 	.word	0x0800713d
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e050      	b.n	80071be <UART_SetConfig+0x7ae>
 800711c:	2304      	movs	r3, #4
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007122:	e04c      	b.n	80071be <UART_SetConfig+0x7ae>
 8007124:	2308      	movs	r3, #8
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e048      	b.n	80071be <UART_SetConfig+0x7ae>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e044      	b.n	80071be <UART_SetConfig+0x7ae>
 8007134:	2320      	movs	r3, #32
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e040      	b.n	80071be <UART_SetConfig+0x7ae>
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e03c      	b.n	80071be <UART_SetConfig+0x7ae>
 8007144:	2380      	movs	r3, #128	; 0x80
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e038      	b.n	80071be <UART_SetConfig+0x7ae>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a71      	ldr	r2, [pc, #452]	; (8007318 <UART_SetConfig+0x908>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d130      	bne.n	80071b8 <UART_SetConfig+0x7a8>
 8007156:	4b6f      	ldr	r3, [pc, #444]	; (8007314 <UART_SetConfig+0x904>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	2b05      	cmp	r3, #5
 8007160:	d826      	bhi.n	80071b0 <UART_SetConfig+0x7a0>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0x758>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007181 	.word	0x08007181
 800716c:	08007189 	.word	0x08007189
 8007170:	08007191 	.word	0x08007191
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	2302      	movs	r3, #2
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e01a      	b.n	80071be <UART_SetConfig+0x7ae>
 8007188:	2304      	movs	r3, #4
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718e:	e016      	b.n	80071be <UART_SetConfig+0x7ae>
 8007190:	2308      	movs	r3, #8
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e012      	b.n	80071be <UART_SetConfig+0x7ae>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e00e      	b.n	80071be <UART_SetConfig+0x7ae>
 80071a0:	2320      	movs	r3, #32
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e00a      	b.n	80071be <UART_SetConfig+0x7ae>
 80071a8:	2340      	movs	r3, #64	; 0x40
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e006      	b.n	80071be <UART_SetConfig+0x7ae>
 80071b0:	2380      	movs	r3, #128	; 0x80
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e002      	b.n	80071be <UART_SetConfig+0x7ae>
 80071b8:	2380      	movs	r3, #128	; 0x80
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a55      	ldr	r2, [pc, #340]	; (8007318 <UART_SetConfig+0x908>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	f040 80f8 	bne.w	80073ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	dc46      	bgt.n	8007260 <UART_SetConfig+0x850>
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	db75      	blt.n	80072c2 <UART_SetConfig+0x8b2>
 80071d6:	3b02      	subs	r3, #2
 80071d8:	2b1e      	cmp	r3, #30
 80071da:	d872      	bhi.n	80072c2 <UART_SetConfig+0x8b2>
 80071dc:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <UART_SetConfig+0x7d4>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	08007267 	.word	0x08007267
 80071e8:	080072c3 	.word	0x080072c3
 80071ec:	0800726f 	.word	0x0800726f
 80071f0:	080072c3 	.word	0x080072c3
 80071f4:	080072c3 	.word	0x080072c3
 80071f8:	080072c3 	.word	0x080072c3
 80071fc:	0800727f 	.word	0x0800727f
 8007200:	080072c3 	.word	0x080072c3
 8007204:	080072c3 	.word	0x080072c3
 8007208:	080072c3 	.word	0x080072c3
 800720c:	080072c3 	.word	0x080072c3
 8007210:	080072c3 	.word	0x080072c3
 8007214:	080072c3 	.word	0x080072c3
 8007218:	080072c3 	.word	0x080072c3
 800721c:	0800728f 	.word	0x0800728f
 8007220:	080072c3 	.word	0x080072c3
 8007224:	080072c3 	.word	0x080072c3
 8007228:	080072c3 	.word	0x080072c3
 800722c:	080072c3 	.word	0x080072c3
 8007230:	080072c3 	.word	0x080072c3
 8007234:	080072c3 	.word	0x080072c3
 8007238:	080072c3 	.word	0x080072c3
 800723c:	080072c3 	.word	0x080072c3
 8007240:	080072c3 	.word	0x080072c3
 8007244:	080072c3 	.word	0x080072c3
 8007248:	080072c3 	.word	0x080072c3
 800724c:	080072c3 	.word	0x080072c3
 8007250:	080072c3 	.word	0x080072c3
 8007254:	080072c3 	.word	0x080072c3
 8007258:	080072c3 	.word	0x080072c3
 800725c:	080072b5 	.word	0x080072b5
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	d02a      	beq.n	80072ba <UART_SetConfig+0x8aa>
 8007264:	e02d      	b.n	80072c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007266:	f7fd ffe7 	bl	8005238 <HAL_RCCEx_GetD3PCLK1Freq>
 800726a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800726c:	e02f      	b.n	80072ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007272:	4618      	mov	r0, r3
 8007274:	f7fd fff6 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800727c:	e027      	b.n	80072ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800727e:	f107 0318 	add.w	r3, r7, #24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe f942 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800728c:	e01f      	b.n	80072ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800728e:	4b21      	ldr	r3, [pc, #132]	; (8007314 <UART_SetConfig+0x904>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800729a:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <UART_SetConfig+0x904>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	08db      	lsrs	r3, r3, #3
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	4a1d      	ldr	r2, [pc, #116]	; (800731c <UART_SetConfig+0x90c>)
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072ac:	e00f      	b.n	80072ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80072ae:	4b1b      	ldr	r3, [pc, #108]	; (800731c <UART_SetConfig+0x90c>)
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b2:	e00c      	b.n	80072ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <UART_SetConfig+0x910>)
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80072cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 81ee 	beq.w	80076b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <UART_SetConfig+0x914>)
 80072dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	4413      	add	r3, r2
 80072f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d305      	bcc.n	8007306 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007302:	429a      	cmp	r2, r3
 8007304:	d910      	bls.n	8007328 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800730c:	e1d1      	b.n	80076b2 <UART_SetConfig+0xca2>
 800730e:	bf00      	nop
 8007310:	40011c00 	.word	0x40011c00
 8007314:	58024400 	.word	0x58024400
 8007318:	58000c00 	.word	0x58000c00
 800731c:	03d09000 	.word	0x03d09000
 8007320:	003d0900 	.word	0x003d0900
 8007324:	0800927c 	.word	0x0800927c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732a:	2200      	movs	r2, #0
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	60fa      	str	r2, [r7, #12]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	4ac0      	ldr	r2, [pc, #768]	; (8007638 <UART_SetConfig+0xc28>)
 8007336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733a:	b29b      	uxth	r3, r3
 800733c:	2200      	movs	r2, #0
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800734a:	f7f9 f801 	bl	8000350 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	020b      	lsls	r3, r1, #8
 8007360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007364:	0202      	lsls	r2, r0, #8
 8007366:	6979      	ldr	r1, [r7, #20]
 8007368:	6849      	ldr	r1, [r1, #4]
 800736a:	0849      	lsrs	r1, r1, #1
 800736c:	2000      	movs	r0, #0
 800736e:	460c      	mov	r4, r1
 8007370:	4605      	mov	r5, r0
 8007372:	eb12 0804 	adds.w	r8, r2, r4
 8007376:	eb43 0905 	adc.w	r9, r3, r5
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	469a      	mov	sl, r3
 8007382:	4693      	mov	fp, r2
 8007384:	4652      	mov	r2, sl
 8007386:	465b      	mov	r3, fp
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 ffe0 	bl	8000350 <__aeabi_uldivmod>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4613      	mov	r3, r2
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800739e:	d308      	bcc.n	80073b2 <UART_SetConfig+0x9a2>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a6:	d204      	bcs.n	80073b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e17f      	b.n	80076b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073b8:	e17b      	b.n	80076b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c2:	f040 80bd 	bne.w	8007540 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80073c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	dc48      	bgt.n	8007460 <UART_SetConfig+0xa50>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	db7b      	blt.n	80074ca <UART_SetConfig+0xaba>
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d879      	bhi.n	80074ca <UART_SetConfig+0xaba>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x9cc>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	08007467 	.word	0x08007467
 80073e0:	0800746f 	.word	0x0800746f
 80073e4:	080074cb 	.word	0x080074cb
 80073e8:	080074cb 	.word	0x080074cb
 80073ec:	08007477 	.word	0x08007477
 80073f0:	080074cb 	.word	0x080074cb
 80073f4:	080074cb 	.word	0x080074cb
 80073f8:	080074cb 	.word	0x080074cb
 80073fc:	08007487 	.word	0x08007487
 8007400:	080074cb 	.word	0x080074cb
 8007404:	080074cb 	.word	0x080074cb
 8007408:	080074cb 	.word	0x080074cb
 800740c:	080074cb 	.word	0x080074cb
 8007410:	080074cb 	.word	0x080074cb
 8007414:	080074cb 	.word	0x080074cb
 8007418:	080074cb 	.word	0x080074cb
 800741c:	08007497 	.word	0x08007497
 8007420:	080074cb 	.word	0x080074cb
 8007424:	080074cb 	.word	0x080074cb
 8007428:	080074cb 	.word	0x080074cb
 800742c:	080074cb 	.word	0x080074cb
 8007430:	080074cb 	.word	0x080074cb
 8007434:	080074cb 	.word	0x080074cb
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074cb 	.word	0x080074cb
 8007440:	080074cb 	.word	0x080074cb
 8007444:	080074cb 	.word	0x080074cb
 8007448:	080074cb 	.word	0x080074cb
 800744c:	080074cb 	.word	0x080074cb
 8007450:	080074cb 	.word	0x080074cb
 8007454:	080074cb 	.word	0x080074cb
 8007458:	080074cb 	.word	0x080074cb
 800745c:	080074bd 	.word	0x080074bd
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d02e      	beq.n	80074c2 <UART_SetConfig+0xab2>
 8007464:	e031      	b.n	80074ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007466:	f7fc fb81 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 800746a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800746c:	e033      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800746e:	f7fc fb93 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 8007472:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007474:	e02f      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800747a:	4618      	mov	r0, r3
 800747c:	f7fd fef2 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007484:	e027      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007486:	f107 0318 	add.w	r3, r7, #24
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe f83e 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	e01f      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007496:	4b69      	ldr	r3, [pc, #420]	; (800763c <UART_SetConfig+0xc2c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074a2:	4b66      	ldr	r3, [pc, #408]	; (800763c <UART_SetConfig+0xc2c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	08db      	lsrs	r3, r3, #3
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	4a64      	ldr	r2, [pc, #400]	; (8007640 <UART_SetConfig+0xc30>)
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074b4:	e00f      	b.n	80074d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80074b6:	4b62      	ldr	r3, [pc, #392]	; (8007640 <UART_SetConfig+0xc30>)
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ba:	e00c      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074bc:	4b61      	ldr	r3, [pc, #388]	; (8007644 <UART_SetConfig+0xc34>)
 80074be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c0:	e009      	b.n	80074d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074c8:	e005      	b.n	80074d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80ea 	beq.w	80076b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	4a55      	ldr	r2, [pc, #340]	; (8007638 <UART_SetConfig+0xc28>)
 80074e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f0:	005a      	lsls	r2, r3, #1
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d916      	bls.n	8007538 <UART_SetConfig+0xb28>
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d212      	bcs.n	8007538 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	b29b      	uxth	r3, r3
 8007516:	f023 030f 	bic.w	r3, r3, #15
 800751a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	b29a      	uxth	r2, r3
 8007528:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800752a:	4313      	orrs	r3, r2
 800752c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007534:	60da      	str	r2, [r3, #12]
 8007536:	e0bc      	b.n	80076b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800753e:	e0b8      	b.n	80076b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007540:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007544:	2b20      	cmp	r3, #32
 8007546:	dc4b      	bgt.n	80075e0 <UART_SetConfig+0xbd0>
 8007548:	2b00      	cmp	r3, #0
 800754a:	f2c0 8087 	blt.w	800765c <UART_SetConfig+0xc4c>
 800754e:	2b20      	cmp	r3, #32
 8007550:	f200 8084 	bhi.w	800765c <UART_SetConfig+0xc4c>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0xb4c>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	080075e7 	.word	0x080075e7
 8007560:	080075ef 	.word	0x080075ef
 8007564:	0800765d 	.word	0x0800765d
 8007568:	0800765d 	.word	0x0800765d
 800756c:	080075f7 	.word	0x080075f7
 8007570:	0800765d 	.word	0x0800765d
 8007574:	0800765d 	.word	0x0800765d
 8007578:	0800765d 	.word	0x0800765d
 800757c:	08007607 	.word	0x08007607
 8007580:	0800765d 	.word	0x0800765d
 8007584:	0800765d 	.word	0x0800765d
 8007588:	0800765d 	.word	0x0800765d
 800758c:	0800765d 	.word	0x0800765d
 8007590:	0800765d 	.word	0x0800765d
 8007594:	0800765d 	.word	0x0800765d
 8007598:	0800765d 	.word	0x0800765d
 800759c:	08007617 	.word	0x08007617
 80075a0:	0800765d 	.word	0x0800765d
 80075a4:	0800765d 	.word	0x0800765d
 80075a8:	0800765d 	.word	0x0800765d
 80075ac:	0800765d 	.word	0x0800765d
 80075b0:	0800765d 	.word	0x0800765d
 80075b4:	0800765d 	.word	0x0800765d
 80075b8:	0800765d 	.word	0x0800765d
 80075bc:	0800765d 	.word	0x0800765d
 80075c0:	0800765d 	.word	0x0800765d
 80075c4:	0800765d 	.word	0x0800765d
 80075c8:	0800765d 	.word	0x0800765d
 80075cc:	0800765d 	.word	0x0800765d
 80075d0:	0800765d 	.word	0x0800765d
 80075d4:	0800765d 	.word	0x0800765d
 80075d8:	0800765d 	.word	0x0800765d
 80075dc:	0800764f 	.word	0x0800764f
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d037      	beq.n	8007654 <UART_SetConfig+0xc44>
 80075e4:	e03a      	b.n	800765c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7fc fac1 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 80075ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075ec:	e03c      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ee:	f7fc fad3 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 80075f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075f4:	e038      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fd fe32 	bl	8005264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007604:	e030      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007606:	f107 0318 	add.w	r3, r7, #24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd ff7e 	bl	800550c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007614:	e028      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007616:	4b09      	ldr	r3, [pc, #36]	; (800763c <UART_SetConfig+0xc2c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <UART_SetConfig+0xc2c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	08db      	lsrs	r3, r3, #3
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	4a04      	ldr	r2, [pc, #16]	; (8007640 <UART_SetConfig+0xc30>)
 800762e:	fa22 f303 	lsr.w	r3, r2, r3
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007634:	e018      	b.n	8007668 <UART_SetConfig+0xc58>
 8007636:	bf00      	nop
 8007638:	0800927c 	.word	0x0800927c
 800763c:	58024400 	.word	0x58024400
 8007640:	03d09000 	.word	0x03d09000
 8007644:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <UART_SetConfig+0xccc>)
 800764a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800764c:	e00c      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <UART_SetConfig+0xcd0>)
 8007650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007652:	e009      	b.n	8007668 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765a:	e005      	b.n	8007668 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007666:	bf00      	nop
    }

    if (pclk != 0U)
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d021      	beq.n	80076b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	4a1c      	ldr	r2, [pc, #112]	; (80076e4 <UART_SetConfig+0xcd4>)
 8007674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007678:	461a      	mov	r2, r3
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	441a      	add	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	2b0f      	cmp	r3, #15
 8007696:	d909      	bls.n	80076ac <UART_SetConfig+0xc9c>
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769e:	d205      	bcs.n	80076ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60da      	str	r2, [r3, #12]
 80076aa:	e002      	b.n	80076b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2201      	movs	r2, #1
 80076be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2200      	movs	r2, #0
 80076c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3748      	adds	r7, #72	; 0x48
 80076d6:	46bd      	mov	sp, r7
 80076d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076dc:	03d09000 	.word	0x03d09000
 80076e0:	003d0900 	.word	0x003d0900
 80076e4:	0800927c 	.word	0x0800927c

080076e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e6:	d10a      	bne.n	80077fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af02      	add	r7, sp, #8
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800783c:	f7f9 fd26 	bl	800128c <HAL_GetTick>
 8007840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d10e      	bne.n	800786e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f82f 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e025      	b.n	80078ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b04      	cmp	r3, #4
 800787a:	d10e      	bne.n	800789a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800787c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f819 	bl	80078c2 <UART_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e00f      	b.n	80078ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b09c      	sub	sp, #112	; 0x70
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d2:	e0a9      	b.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078da:	f000 80a5 	beq.w	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7f9 fcd5 	bl	800128c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80078ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d140      	bne.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007908:	667b      	str	r3, [r7, #100]	; 0x64
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007914:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e6      	bne.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f023 0301 	bic.w	r3, r3, #1
 800793c:	663b      	str	r3, [r7, #96]	; 0x60
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007946:	64ba      	str	r2, [r7, #72]	; 0x48
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800794c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e069      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d051      	beq.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007992:	d149      	bne.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800799c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079f0:	623a      	str	r2, [r7, #32]
 80079f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e5      	bne.n	80079d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e010      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	4013      	ands	r3, r2
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	f43f af46 	beq.w	80078d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3770      	adds	r7, #112	; 0x70
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e027      	b.n	8007ab8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2224      	movs	r2, #36	; 0x24
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e02d      	b.n	8007b38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2224      	movs	r2, #36	; 0x24
 8007ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f84f 	bl	8007bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e02d      	b.n	8007bb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2224      	movs	r2, #36	; 0x24
 8007b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f811 	bl	8007bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d108      	bne.n	8007bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bdc:	e031      	b.n	8007c42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bde:	2310      	movs	r3, #16
 8007be0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007be2:	2310      	movs	r3, #16
 8007be4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	0e5b      	lsrs	r3, r3, #25
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	0f5b      	lsrs	r3, r3, #29
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	7b3a      	ldrb	r2, [r7, #12]
 8007c0a:	4911      	ldr	r1, [pc, #68]	; (8007c50 <UARTEx_SetNbDataToProcess+0x94>)
 8007c0c:	5c8a      	ldrb	r2, [r1, r2]
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c12:	7b3a      	ldrb	r2, [r7, #12]
 8007c14:	490f      	ldr	r1, [pc, #60]	; (8007c54 <UARTEx_SetNbDataToProcess+0x98>)
 8007c16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	7b7a      	ldrb	r2, [r7, #13]
 8007c28:	4909      	ldr	r1, [pc, #36]	; (8007c50 <UARTEx_SetNbDataToProcess+0x94>)
 8007c2a:	5c8a      	ldrb	r2, [r1, r2]
 8007c2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c30:	7b7a      	ldrb	r2, [r7, #13]
 8007c32:	4908      	ldr	r1, [pc, #32]	; (8007c54 <UARTEx_SetNbDataToProcess+0x98>)
 8007c34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	08009294 	.word	0x08009294
 8007c54:	0800929c 	.word	0x0800929c

08007c58 <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c5e:	f107 0310 	add.w	r3, r7, #16
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	605a      	str	r2, [r3, #4]
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    DWT_Delay_Init();
 8007c7a:	f000 fc9d 	bl	80085b8 <DWT_Delay_Init>

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c84:	e10c      	b.n	8007ea0 <STEPPERS_Init+0x248>
    {
    	for(j=0; j<4; j++)
 8007c86:	2300      	movs	r3, #0
 8007c88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007c8c:	e082      	b.n	8007d94 <STEPPERS_Init+0x13c>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8007c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c92:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007c96:	4887      	ldr	r0, [pc, #540]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ca4:	4a84      	ldr	r2, [pc, #528]	; (8007eb8 <STEPPERS_Init+0x260>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d10f      	bne.n	8007cca <STEPPERS_Init+0x72>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007caa:	4b84      	ldr	r3, [pc, #528]	; (8007ebc <STEPPERS_Init+0x264>)
 8007cac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cb0:	4a82      	ldr	r2, [pc, #520]	; (8007ebc <STEPPERS_Init+0x264>)
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007cba:	4b80      	ldr	r3, [pc, #512]	; (8007ebc <STEPPERS_Init+0x264>)
 8007cbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	e03a      	b.n	8007d40 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8007cca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cce:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007cd2:	4878      	ldr	r0, [pc, #480]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	440b      	add	r3, r1
 8007cdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ce0:	4a77      	ldr	r2, [pc, #476]	; (8007ec0 <STEPPERS_Init+0x268>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d10f      	bne.n	8007d06 <STEPPERS_Init+0xae>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ce6:	4b75      	ldr	r3, [pc, #468]	; (8007ebc <STEPPERS_Init+0x264>)
 8007ce8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cec:	4a73      	ldr	r2, [pc, #460]	; (8007ebc <STEPPERS_Init+0x264>)
 8007cee:	f043 0302 	orr.w	r3, r3, #2
 8007cf2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007cf6:	4b71      	ldr	r3, [pc, #452]	; (8007ebc <STEPPERS_Init+0x264>)
 8007cf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	e01c      	b.n	8007d40 <STEPPERS_Init+0xe8>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8007d06:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d0a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007d0e:	4869      	ldr	r0, [pc, #420]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	1a9b      	subs	r3, r3, r2
 8007d16:	440b      	add	r3, r1
 8007d18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d1c:	4a69      	ldr	r2, [pc, #420]	; (8007ec4 <STEPPERS_Init+0x26c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d10e      	bne.n	8007d40 <STEPPERS_Init+0xe8>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d22:	4b66      	ldr	r3, [pc, #408]	; (8007ebc <STEPPERS_Init+0x264>)
 8007d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d28:	4a64      	ldr	r2, [pc, #400]	; (8007ebc <STEPPERS_Init+0x264>)
 8007d2a:	f043 0304 	orr.w	r3, r3, #4
 8007d2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8007d32:	4b62      	ldr	r3, [pc, #392]	; (8007ebc <STEPPERS_Init+0x264>)
 8007d34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	607b      	str	r3, [r7, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8007d40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d44:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007d48:	485a      	ldr	r0, [pc, #360]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	440b      	add	r3, r1
 8007d54:	3308      	adds	r3, #8
 8007d56:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007d5a:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61fb      	str	r3, [r7, #28]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8007d68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d6c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8007d70:	4850      	ldr	r0, [pc, #320]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007d72:	4613      	mov	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	1a9b      	subs	r3, r3, r2
 8007d78:	440b      	add	r3, r1
 8007d7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d7e:	f107 0210 	add.w	r2, r7, #16
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fa fd69 	bl	800285c <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8007d8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	f67f af78 	bls.w	8007c8e <STEPPERS_Init+0x36>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8007d9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007da2:	4949      	ldr	r1, [pc, #292]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	3311      	adds	r3, #17
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8007db4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007db8:	4943      	ldr	r1, [pc, #268]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	330f      	adds	r3, #15
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8007dca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007dce:	493e      	ldr	r1, [pc, #248]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8007dde:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007de2:	4939      	ldr	r1, [pc, #228]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	3304      	adds	r3, #4
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8007df4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007df8:	4933      	ldr	r1, [pc, #204]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3308      	adds	r3, #8
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8007e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e0e:	492e      	ldr	r1, [pc, #184]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	330e      	adds	r3, #14
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8007e20:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e24:	4923      	ldr	r1, [pc, #140]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007e26:	4613      	mov	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	1a9b      	subs	r3, r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	331b      	adds	r3, #27
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d00b      	beq.n	8007e50 <STEPPERS_Init+0x1f8>
 8007e38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e3c:	491d      	ldr	r1, [pc, #116]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007e3e:	4613      	mov	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	440b      	add	r3, r1
 8007e48:	331b      	adds	r3, #27
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <STEPPERS_Init+0x210>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8007e50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e54:	491c      	ldr	r1, [pc, #112]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	3310      	adds	r3, #16
 8007e62:	2204      	movs	r2, #4
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	e016      	b.n	8007e96 <STEPPERS_Init+0x23e>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8007e68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e6c:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <STEPPERS_Init+0x25c>)
 8007e6e:	4613      	mov	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	331b      	adds	r3, #27
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d10a      	bne.n	8007e96 <STEPPERS_Init+0x23e>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8007e80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e84:	4910      	ldr	r1, [pc, #64]	; (8007ec8 <STEPPERS_Init+0x270>)
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	3310      	adds	r3, #16
 8007e92:	2208      	movs	r2, #8
 8007e94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8007e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f43f aeee 	beq.w	8007c86 <STEPPERS_Init+0x2e>
    	}
    }
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	3728      	adds	r7, #40	; 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	080092a4 	.word	0x080092a4
 8007eb8:	58020000 	.word	0x58020000
 8007ebc:	58024400 	.word	0x58024400
 8007ec0:	58020400 	.word	0x58020400
 8007ec4:	58020800 	.word	0x58020800
 8007ec8:	24030fec 	.word	0x24030fec

08007ecc <STEPPERS_Init_TMR>:

void STEPPERS_Init_TMR(TIM_HandleTypeDef* TMR_Handle)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	609a      	str	r2, [r3, #8]
 8007ee0:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ee2:	f107 0308 	add.w	r3, r7, #8
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24

	STEPPERS_Init();
 8007ef2:	f7ff feb1 	bl	8007c58 <STEPPERS_Init>

	/*--------[ Configure The Stepper Timer Base If Enabled ]-------*/
    if(STEPPER_TIMER_EN == 1)
    {
    	ARR_Value = (STEPPER_TIMER_CLK * 10.0 * STEPPER_TIME_BASE);
 8007ef6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = STEPPER_TIMER;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a17      	ldr	r2, [pc, #92]	; (8007f5c <STEPPERS_Init_TMR+0x90>)
 8007f00:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2263      	movs	r2, #99	; 0x63
 8007f06:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2280      	movs	r2, #128	; 0x80
 8007f20:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fd fefc 	bl	8005d20 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f2c:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8007f2e:	f107 0314 	add.w	r3, r7, #20
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe f981 	bl	800623c <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7fe fbcf 	bl	80066ec <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7fd ffae 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
    }
}
 8007f54:	bf00      	nop
 8007f56:	3728      	adds	r7, #40	; 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	40014800 	.word	0x40014800

08007f60 <STEPPER_SetSpeed>:

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	460a      	mov	r2, r1
 8007f6a:	71fb      	strb	r3, [r7, #7]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8007f74:	79fa      	ldrb	r2, [r7, #7]
 8007f76:	4926      	ldr	r1, [pc, #152]	; (8008010 <STEPPER_SetSpeed+0xb0>)
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	330c      	adds	r3, #12
 8007f84:	88ba      	ldrh	r2, [r7, #4]
 8007f86:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8007f88:	79fa      	ldrb	r2, [r7, #7]
 8007f8a:	4922      	ldr	r1, [pc, #136]	; (8008014 <STEPPER_SetSpeed+0xb4>)
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	331b      	adds	r3, #27
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d10b      	bne.n	8007fb6 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8007f9e:	79fa      	ldrb	r2, [r7, #7]
 8007fa0:	491c      	ldr	r1, [pc, #112]	; (8008014 <STEPPER_SetSpeed+0xb4>)
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	3318      	adds	r3, #24
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e009      	b.n	8007fca <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8007fb6:	79fa      	ldrb	r2, [r7, #7]
 8007fb8:	4916      	ldr	r1, [pc, #88]	; (8008014 <STEPPER_SetSpeed+0xb4>)
 8007fba:	4613      	mov	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8007fca:	88bb      	ldrh	r3, [r7, #4]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8007fda:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8008008 <STEPPER_SetSpeed+0xa8>
 8007fde:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007fe8:	ee17 0a90 	vmov	r0, s15
 8007fec:	4908      	ldr	r1, [pc, #32]	; (8008010 <STEPPER_SetSpeed+0xb0>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	6018      	str	r0, [r3, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	00000000 	.word	0x00000000
 800800c:	40ed4c00 	.word	0x40ed4c00
 8008010:	24030fec 	.word	0x24030fec
 8008014:	080092a4 	.word	0x080092a4

08008018 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8008018:	b590      	push	{r4, r7, lr}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8008022:	79fa      	ldrb	r2, [r7, #7]
 8008024:	4999      	ldr	r1, [pc, #612]	; (800828c <STEPPER_One_Step+0x274>)
 8008026:	4613      	mov	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	331a      	adds	r3, #26
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 81c4 	bne.w	80083c2 <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 800803a:	79fa      	ldrb	r2, [r7, #7]
 800803c:	4993      	ldr	r1, [pc, #588]	; (800828c <STEPPER_One_Step+0x274>)
 800803e:	4613      	mov	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	1a9b      	subs	r3, r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	331b      	adds	r3, #27
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f040 8088 	bne.w	8008162 <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8008052:	79fa      	ldrb	r2, [r7, #7]
 8008054:	498d      	ldr	r1, [pc, #564]	; (800828c <STEPPER_One_Step+0x274>)
 8008056:	4613      	mov	r3, r2
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	79fa      	ldrb	r2, [r7, #7]
 8008064:	4989      	ldr	r1, [pc, #548]	; (800828c <STEPPER_One_Step+0x274>)
 8008066:	4613      	mov	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	3310      	adds	r3, #16
 8008072:	8819      	ldrh	r1, [r3, #0]
 8008074:	79fa      	ldrb	r2, [r7, #7]
 8008076:	4c86      	ldr	r4, [pc, #536]	; (8008290 <STEPPER_One_Step+0x278>)
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4423      	add	r3, r4
 8008082:	330f      	adds	r3, #15
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	4b82      	ldr	r3, [pc, #520]	; (8008294 <STEPPER_One_Step+0x27c>)
 800808a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800808e:	461a      	mov	r2, r3
 8008090:	f7fa fd94 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8008094:	79fa      	ldrb	r2, [r7, #7]
 8008096:	497d      	ldr	r1, [pc, #500]	; (800828c <STEPPER_One_Step+0x274>)
 8008098:	4613      	mov	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	3304      	adds	r3, #4
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	79fa      	ldrb	r2, [r7, #7]
 80080a8:	4978      	ldr	r1, [pc, #480]	; (800828c <STEPPER_One_Step+0x274>)
 80080aa:	4613      	mov	r3, r2
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	3312      	adds	r3, #18
 80080b6:	8819      	ldrh	r1, [r3, #0]
 80080b8:	79fa      	ldrb	r2, [r7, #7]
 80080ba:	4c75      	ldr	r4, [pc, #468]	; (8008290 <STEPPER_One_Step+0x278>)
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4423      	add	r3, r4
 80080c6:	330f      	adds	r3, #15
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	4a72      	ldr	r2, [pc, #456]	; (8008294 <STEPPER_One_Step+0x27c>)
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7fa fd72 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80080d8:	79fa      	ldrb	r2, [r7, #7]
 80080da:	496c      	ldr	r1, [pc, #432]	; (800828c <STEPPER_One_Step+0x274>)
 80080dc:	4613      	mov	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	3308      	adds	r3, #8
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	79fa      	ldrb	r2, [r7, #7]
 80080ec:	4967      	ldr	r1, [pc, #412]	; (800828c <STEPPER_One_Step+0x274>)
 80080ee:	4613      	mov	r3, r2
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	3314      	adds	r3, #20
 80080fa:	8819      	ldrh	r1, [r3, #0]
 80080fc:	79fa      	ldrb	r2, [r7, #7]
 80080fe:	4c64      	ldr	r4, [pc, #400]	; (8008290 <STEPPER_One_Step+0x278>)
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4423      	add	r3, r4
 800810a:	330f      	adds	r3, #15
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	4a61      	ldr	r2, [pc, #388]	; (8008294 <STEPPER_One_Step+0x27c>)
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	789b      	ldrb	r3, [r3, #2]
 8008116:	461a      	mov	r2, r3
 8008118:	f7fa fd50 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	495b      	ldr	r1, [pc, #364]	; (800828c <STEPPER_One_Step+0x274>)
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	330c      	adds	r3, #12
 800812c:	6818      	ldr	r0, [r3, #0]
 800812e:	79fa      	ldrb	r2, [r7, #7]
 8008130:	4956      	ldr	r1, [pc, #344]	; (800828c <STEPPER_One_Step+0x274>)
 8008132:	4613      	mov	r3, r2
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	1a9b      	subs	r3, r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	440b      	add	r3, r1
 800813c:	3316      	adds	r3, #22
 800813e:	8819      	ldrh	r1, [r3, #0]
 8008140:	79fa      	ldrb	r2, [r7, #7]
 8008142:	4c53      	ldr	r4, [pc, #332]	; (8008290 <STEPPER_One_Step+0x278>)
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4423      	add	r3, r4
 800814e:	330f      	adds	r3, #15
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	4a50      	ldr	r2, [pc, #320]	; (8008294 <STEPPER_One_Step+0x27c>)
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	461a      	mov	r2, r3
 800815c:	f7fa fd2e 	bl	8002bbc <HAL_GPIO_WritePin>
 8008160:	e12f      	b.n	80083c2 <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 8008162:	79fa      	ldrb	r2, [r7, #7]
 8008164:	4949      	ldr	r1, [pc, #292]	; (800828c <STEPPER_One_Step+0x274>)
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	331b      	adds	r3, #27
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	f040 8091 	bne.w	800829c <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800817a:	79fa      	ldrb	r2, [r7, #7]
 800817c:	4943      	ldr	r1, [pc, #268]	; (800828c <STEPPER_One_Step+0x274>)
 800817e:	4613      	mov	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	79fa      	ldrb	r2, [r7, #7]
 800818c:	493f      	ldr	r1, [pc, #252]	; (800828c <STEPPER_One_Step+0x274>)
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3310      	adds	r3, #16
 800819a:	8819      	ldrh	r1, [r3, #0]
 800819c:	79fa      	ldrb	r2, [r7, #7]
 800819e:	4c3c      	ldr	r4, [pc, #240]	; (8008290 <STEPPER_One_Step+0x278>)
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4423      	add	r3, r4
 80081aa:	330f      	adds	r3, #15
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	4b39      	ldr	r3, [pc, #228]	; (8008298 <STEPPER_One_Step+0x280>)
 80081b2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7fa fd00 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80081bc:	79fa      	ldrb	r2, [r7, #7]
 80081be:	4933      	ldr	r1, [pc, #204]	; (800828c <STEPPER_One_Step+0x274>)
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	3304      	adds	r3, #4
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	79fa      	ldrb	r2, [r7, #7]
 80081d0:	492e      	ldr	r1, [pc, #184]	; (800828c <STEPPER_One_Step+0x274>)
 80081d2:	4613      	mov	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3312      	adds	r3, #18
 80081de:	8819      	ldrh	r1, [r3, #0]
 80081e0:	79fa      	ldrb	r2, [r7, #7]
 80081e2:	4c2b      	ldr	r4, [pc, #172]	; (8008290 <STEPPER_One_Step+0x278>)
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4423      	add	r3, r4
 80081ee:	330f      	adds	r3, #15
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4a29      	ldr	r2, [pc, #164]	; (8008298 <STEPPER_One_Step+0x280>)
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	461a      	mov	r2, r3
 80081fc:	f7fa fcde 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	4922      	ldr	r1, [pc, #136]	; (800828c <STEPPER_One_Step+0x274>)
 8008204:	4613      	mov	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	3308      	adds	r3, #8
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	79fa      	ldrb	r2, [r7, #7]
 8008214:	491d      	ldr	r1, [pc, #116]	; (800828c <STEPPER_One_Step+0x274>)
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	3314      	adds	r3, #20
 8008222:	8819      	ldrh	r1, [r3, #0]
 8008224:	79fa      	ldrb	r2, [r7, #7]
 8008226:	4c1a      	ldr	r4, [pc, #104]	; (8008290 <STEPPER_One_Step+0x278>)
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4423      	add	r3, r4
 8008232:	330f      	adds	r3, #15
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	4a18      	ldr	r2, [pc, #96]	; (8008298 <STEPPER_One_Step+0x280>)
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	789b      	ldrb	r3, [r3, #2]
 800823e:	461a      	mov	r2, r3
 8008240:	f7fa fcbc 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8008244:	79fa      	ldrb	r2, [r7, #7]
 8008246:	4911      	ldr	r1, [pc, #68]	; (800828c <STEPPER_One_Step+0x274>)
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	330c      	adds	r3, #12
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	79fa      	ldrb	r2, [r7, #7]
 8008258:	490c      	ldr	r1, [pc, #48]	; (800828c <STEPPER_One_Step+0x274>)
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3316      	adds	r3, #22
 8008266:	8819      	ldrh	r1, [r3, #0]
 8008268:	79fa      	ldrb	r2, [r7, #7]
 800826a:	4c09      	ldr	r4, [pc, #36]	; (8008290 <STEPPER_One_Step+0x278>)
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4423      	add	r3, r4
 8008276:	330f      	adds	r3, #15
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4a07      	ldr	r2, [pc, #28]	; (8008298 <STEPPER_One_Step+0x280>)
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	461a      	mov	r2, r3
 8008284:	f7fa fc9a 	bl	8002bbc <HAL_GPIO_WritePin>
 8008288:	e09b      	b.n	80083c2 <STEPPER_One_Step+0x3aa>
 800828a:	bf00      	nop
 800828c:	080092a4 	.word	0x080092a4
 8008290:	24030fec 	.word	0x24030fec
 8008294:	24000010 	.word	0x24000010
 8008298:	24000020 	.word	0x24000020
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	4988      	ldr	r1, [pc, #544]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 80082a0:	4613      	mov	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	331b      	adds	r3, #27
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	f040 8087 	bne.w	80083c2 <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 80082b4:	79fa      	ldrb	r2, [r7, #7]
 80082b6:	4982      	ldr	r1, [pc, #520]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	497e      	ldr	r1, [pc, #504]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3310      	adds	r3, #16
 80082d4:	8819      	ldrh	r1, [r3, #0]
 80082d6:	79fa      	ldrb	r2, [r7, #7]
 80082d8:	4c7a      	ldr	r4, [pc, #488]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4423      	add	r3, r4
 80082e4:	330f      	adds	r3, #15
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	4b77      	ldr	r3, [pc, #476]	; (80084c8 <STEPPER_One_Step+0x4b0>)
 80082ec:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80082f0:	461a      	mov	r2, r3
 80082f2:	f7fa fc63 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80082f6:	79fa      	ldrb	r2, [r7, #7]
 80082f8:	4971      	ldr	r1, [pc, #452]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 80082fa:	4613      	mov	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	3304      	adds	r3, #4
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	79fa      	ldrb	r2, [r7, #7]
 800830a:	496d      	ldr	r1, [pc, #436]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 800830c:	4613      	mov	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	440b      	add	r3, r1
 8008316:	3312      	adds	r3, #18
 8008318:	8819      	ldrh	r1, [r3, #0]
 800831a:	79fa      	ldrb	r2, [r7, #7]
 800831c:	4c69      	ldr	r4, [pc, #420]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4423      	add	r3, r4
 8008328:	330f      	adds	r3, #15
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	4a66      	ldr	r2, [pc, #408]	; (80084c8 <STEPPER_One_Step+0x4b0>)
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	461a      	mov	r2, r3
 8008336:	f7fa fc41 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 800833a:	79fa      	ldrb	r2, [r7, #7]
 800833c:	4960      	ldr	r1, [pc, #384]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	3308      	adds	r3, #8
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	79fa      	ldrb	r2, [r7, #7]
 800834e:	495c      	ldr	r1, [pc, #368]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3314      	adds	r3, #20
 800835c:	8819      	ldrh	r1, [r3, #0]
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	4c58      	ldr	r4, [pc, #352]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4423      	add	r3, r4
 800836c:	330f      	adds	r3, #15
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	4a55      	ldr	r2, [pc, #340]	; (80084c8 <STEPPER_One_Step+0x4b0>)
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	789b      	ldrb	r3, [r3, #2]
 8008378:	461a      	mov	r2, r3
 800837a:	f7fa fc1f 	bl	8002bbc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 800837e:	79fa      	ldrb	r2, [r7, #7]
 8008380:	494f      	ldr	r1, [pc, #316]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	330c      	adds	r3, #12
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	79fa      	ldrb	r2, [r7, #7]
 8008392:	494b      	ldr	r1, [pc, #300]	; (80084c0 <STEPPER_One_Step+0x4a8>)
 8008394:	4613      	mov	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	3316      	adds	r3, #22
 80083a0:	8819      	ldrh	r1, [r3, #0]
 80083a2:	79fa      	ldrb	r2, [r7, #7]
 80083a4:	4c47      	ldr	r4, [pc, #284]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4423      	add	r3, r4
 80083b0:	330f      	adds	r3, #15
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	4a44      	ldr	r2, [pc, #272]	; (80084c8 <STEPPER_One_Step+0x4b0>)
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	78db      	ldrb	r3, [r3, #3]
 80083bc:	461a      	mov	r2, r3
 80083be:	f7fa fbfd 	bl	8002bbc <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 80083c2:	79fa      	ldrb	r2, [r7, #7]
 80083c4:	493f      	ldr	r1, [pc, #252]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	3311      	adds	r3, #17
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d132      	bne.n	800843e <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 80083d8:	79fa      	ldrb	r2, [r7, #7]
 80083da:	493a      	ldr	r1, [pc, #232]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	330f      	adds	r3, #15
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d112      	bne.n	8008414 <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 80083ee:	79f9      	ldrb	r1, [r7, #7]
 80083f0:	79fa      	ldrb	r2, [r7, #7]
 80083f2:	4834      	ldr	r0, [pc, #208]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80083f4:	460b      	mov	r3, r1
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4403      	add	r3, r0
 80083fe:	3310      	adds	r3, #16
 8008400:	7818      	ldrb	r0, [r3, #0]
 8008402:	4930      	ldr	r1, [pc, #192]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	330f      	adds	r3, #15
 8008410:	4602      	mov	r2, r0
 8008412:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 8008414:	79fa      	ldrb	r2, [r7, #7]
 8008416:	492b      	ldr	r1, [pc, #172]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	440b      	add	r3, r1
 8008422:	330f      	adds	r3, #15
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	3b01      	subs	r3, #1
 8008428:	b2d8      	uxtb	r0, r3
 800842a:	4926      	ldr	r1, [pc, #152]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	330f      	adds	r3, #15
 8008438:	4602      	mov	r2, r0
 800843a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 800843c:	e03c      	b.n	80084b8 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 800843e:	79fa      	ldrb	r2, [r7, #7]
 8008440:	4920      	ldr	r1, [pc, #128]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3311      	adds	r3, #17
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d131      	bne.n	80084b8 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 8008454:	79fa      	ldrb	r2, [r7, #7]
 8008456:	491b      	ldr	r1, [pc, #108]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	330f      	adds	r3, #15
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	b2d8      	uxtb	r0, r3
 800846a:	4916      	ldr	r1, [pc, #88]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	330f      	adds	r3, #15
 8008478:	4602      	mov	r2, r0
 800847a:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	4911      	ldr	r1, [pc, #68]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008480:	4613      	mov	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	330f      	adds	r3, #15
 800848c:	7819      	ldrb	r1, [r3, #0]
 800848e:	79fa      	ldrb	r2, [r7, #7]
 8008490:	480c      	ldr	r0, [pc, #48]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4403      	add	r3, r0
 800849c:	3310      	adds	r3, #16
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	4299      	cmp	r1, r3
 80084a2:	d109      	bne.n	80084b8 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 80084a4:	79fa      	ldrb	r2, [r7, #7]
 80084a6:	4907      	ldr	r1, [pc, #28]	; (80084c4 <STEPPER_One_Step+0x4ac>)
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	330f      	adds	r3, #15
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd90      	pop	{r4, r7, pc}
 80084c0:	080092a4 	.word	0x080092a4
 80084c4:	24030fec 	.word	0x24030fec
 80084c8:	24000030 	.word	0x24000030

080084cc <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a34      	ldr	r2, [pc, #208]	; (80085b0 <STEPPER_TMR_OVF_ISR+0xe4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d162      	bne.n	80085a8 <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
 80084e6:	e05c      	b.n	80085a2 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 80084e8:	7bfa      	ldrb	r2, [r7, #15]
 80084ea:	4932      	ldr	r1, [pc, #200]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	3304      	adds	r3, #4
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	7bfa      	ldrb	r2, [r7, #15]
 80084fc:	482d      	ldr	r0, [pc, #180]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4403      	add	r3, r0
 8008508:	3308      	adds	r3, #8
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4299      	cmp	r1, r3
 800850e:	d333      	bcc.n	8008578 <STEPPER_TMR_OVF_ISR+0xac>
 8008510:	7bfa      	ldrb	r2, [r7, #15]
 8008512:	4928      	ldr	r1, [pc, #160]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008514:	4613      	mov	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	440b      	add	r3, r1
 800851e:	330e      	adds	r3, #14
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d028      	beq.n	8008578 <STEPPER_TMR_OVF_ISR+0xac>
 8008526:	7bfa      	ldrb	r2, [r7, #15]
 8008528:	4922      	ldr	r1, [pc, #136]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01e      	beq.n	8008578 <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fd6b 	bl	8008018 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 8008542:	7bfa      	ldrb	r2, [r7, #15]
 8008544:	491b      	ldr	r1, [pc, #108]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	1e59      	subs	r1, r3, #1
 8008554:	4817      	ldr	r0, [pc, #92]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4403      	add	r3, r0
 8008560:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	4913      	ldr	r1, [pc, #76]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	3304      	adds	r3, #4
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	e011      	b.n	800859c <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 8008578:	7bfa      	ldrb	r2, [r7, #15]
 800857a:	490e      	ldr	r1, [pc, #56]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	3304      	adds	r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1c59      	adds	r1, r3, #1
 800858c:	4809      	ldr	r0, [pc, #36]	; (80085b4 <STEPPER_TMR_OVF_ISR+0xe8>)
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4403      	add	r3, r0
 8008598:	3304      	adds	r3, #4
 800859a:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	3301      	adds	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d09f      	beq.n	80084e8 <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 80085a8:	bf00      	nop
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40014800 	.word	0x40014800
 80085b4:	24030fec 	.word	0x24030fec

080085b8 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80085bc:	4b14      	ldr	r3, [pc, #80]	; (8008610 <DWT_Delay_Init+0x58>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	4a13      	ldr	r2, [pc, #76]	; (8008610 <DWT_Delay_Init+0x58>)
 80085c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80085c8:	4b11      	ldr	r3, [pc, #68]	; (8008610 <DWT_Delay_Init+0x58>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4a10      	ldr	r2, [pc, #64]	; (8008610 <DWT_Delay_Init+0x58>)
 80085ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085d2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80085d4:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a0e      	ldr	r2, [pc, #56]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a0b      	ldr	r2, [pc, #44]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80085f2:	bf00      	nop
    __ASM volatile ("NOP");
 80085f4:	bf00      	nop
    __ASM volatile ("NOP");
 80085f6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80085f8:	4b06      	ldr	r3, [pc, #24]	; (8008614 <DWT_Delay_Init+0x5c>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8008604:	2301      	movs	r3, #1
    }
}
 8008606:	4618      	mov	r0, r3
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	e000edf0 	.word	0xe000edf0
 8008614:	e0001000 	.word	0xe0001000

08008618 <siprintf>:
 8008618:	b40e      	push	{r1, r2, r3}
 800861a:	b500      	push	{lr}
 800861c:	b09c      	sub	sp, #112	; 0x70
 800861e:	ab1d      	add	r3, sp, #116	; 0x74
 8008620:	9002      	str	r0, [sp, #8]
 8008622:	9006      	str	r0, [sp, #24]
 8008624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008628:	4809      	ldr	r0, [pc, #36]	; (8008650 <siprintf+0x38>)
 800862a:	9107      	str	r1, [sp, #28]
 800862c:	9104      	str	r1, [sp, #16]
 800862e:	4909      	ldr	r1, [pc, #36]	; (8008654 <siprintf+0x3c>)
 8008630:	f853 2b04 	ldr.w	r2, [r3], #4
 8008634:	9105      	str	r1, [sp, #20]
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	a902      	add	r1, sp, #8
 800863c:	f000 f98c 	bl	8008958 <_svfiprintf_r>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	b01c      	add	sp, #112	; 0x70
 8008648:	f85d eb04 	ldr.w	lr, [sp], #4
 800864c:	b003      	add	sp, #12
 800864e:	4770      	bx	lr
 8008650:	24000050 	.word	0x24000050
 8008654:	ffff0208 	.word	0xffff0208

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <__errno>:
 8008668:	4b01      	ldr	r3, [pc, #4]	; (8008670 <__errno+0x8>)
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	24000050 	.word	0x24000050

08008674 <__libc_init_array>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	4d0d      	ldr	r5, [pc, #52]	; (80086ac <__libc_init_array+0x38>)
 8008678:	4c0d      	ldr	r4, [pc, #52]	; (80086b0 <__libc_init_array+0x3c>)
 800867a:	1b64      	subs	r4, r4, r5
 800867c:	10a4      	asrs	r4, r4, #2
 800867e:	2600      	movs	r6, #0
 8008680:	42a6      	cmp	r6, r4
 8008682:	d109      	bne.n	8008698 <__libc_init_array+0x24>
 8008684:	4d0b      	ldr	r5, [pc, #44]	; (80086b4 <__libc_init_array+0x40>)
 8008686:	4c0c      	ldr	r4, [pc, #48]	; (80086b8 <__libc_init_array+0x44>)
 8008688:	f000 fdbc 	bl	8009204 <_init>
 800868c:	1b64      	subs	r4, r4, r5
 800868e:	10a4      	asrs	r4, r4, #2
 8008690:	2600      	movs	r6, #0
 8008692:	42a6      	cmp	r6, r4
 8008694:	d105      	bne.n	80086a2 <__libc_init_array+0x2e>
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	f855 3b04 	ldr.w	r3, [r5], #4
 800869c:	4798      	blx	r3
 800869e:	3601      	adds	r6, #1
 80086a0:	e7ee      	b.n	8008680 <__libc_init_array+0xc>
 80086a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a6:	4798      	blx	r3
 80086a8:	3601      	adds	r6, #1
 80086aa:	e7f2      	b.n	8008692 <__libc_init_array+0x1e>
 80086ac:	080092fc 	.word	0x080092fc
 80086b0:	080092fc 	.word	0x080092fc
 80086b4:	080092fc 	.word	0x080092fc
 80086b8:	08009300 	.word	0x08009300

080086bc <__retarget_lock_acquire_recursive>:
 80086bc:	4770      	bx	lr

080086be <__retarget_lock_release_recursive>:
 80086be:	4770      	bx	lr

080086c0 <_free_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d041      	beq.n	800874c <_free_r+0x8c>
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f0c      	subs	r4, r1, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb8      	it	lt
 80086d2:	18e4      	addlt	r4, r4, r3
 80086d4:	f000 f8d8 	bl	8008888 <__malloc_lock>
 80086d8:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <_free_r+0x90>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	b933      	cbnz	r3, 80086ec <_free_r+0x2c>
 80086de:	6063      	str	r3, [r4, #4]
 80086e0:	6014      	str	r4, [r2, #0]
 80086e2:	4628      	mov	r0, r5
 80086e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e8:	f000 b8d4 	b.w	8008894 <__malloc_unlock>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d908      	bls.n	8008702 <_free_r+0x42>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	1821      	adds	r1, r4, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf01      	itttt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	e7ed      	b.n	80086de <_free_r+0x1e>
 8008702:	461a      	mov	r2, r3
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b10b      	cbz	r3, 800870c <_free_r+0x4c>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d9fa      	bls.n	8008702 <_free_r+0x42>
 800870c:	6811      	ldr	r1, [r2, #0]
 800870e:	1850      	adds	r0, r2, r1
 8008710:	42a0      	cmp	r0, r4
 8008712:	d10b      	bne.n	800872c <_free_r+0x6c>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	4401      	add	r1, r0
 8008718:	1850      	adds	r0, r2, r1
 800871a:	4283      	cmp	r3, r0
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	d1e0      	bne.n	80086e2 <_free_r+0x22>
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	6053      	str	r3, [r2, #4]
 8008726:	4408      	add	r0, r1
 8008728:	6010      	str	r0, [r2, #0]
 800872a:	e7da      	b.n	80086e2 <_free_r+0x22>
 800872c:	d902      	bls.n	8008734 <_free_r+0x74>
 800872e:	230c      	movs	r3, #12
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	e7d6      	b.n	80086e2 <_free_r+0x22>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	1821      	adds	r1, r4, r0
 8008738:	428b      	cmp	r3, r1
 800873a:	bf04      	itt	eq
 800873c:	6819      	ldreq	r1, [r3, #0]
 800873e:	685b      	ldreq	r3, [r3, #4]
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	bf04      	itt	eq
 8008744:	1809      	addeq	r1, r1, r0
 8008746:	6021      	streq	r1, [r4, #0]
 8008748:	6054      	str	r4, [r2, #4]
 800874a:	e7ca      	b.n	80086e2 <_free_r+0x22>
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	24031144 	.word	0x24031144

08008754 <sbrk_aligned>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	4e0f      	ldr	r6, [pc, #60]	; (8008794 <sbrk_aligned+0x40>)
 8008758:	460c      	mov	r4, r1
 800875a:	6831      	ldr	r1, [r6, #0]
 800875c:	4605      	mov	r5, r0
 800875e:	b911      	cbnz	r1, 8008766 <sbrk_aligned+0x12>
 8008760:	f000 fbac 	bl	8008ebc <_sbrk_r>
 8008764:	6030      	str	r0, [r6, #0]
 8008766:	4621      	mov	r1, r4
 8008768:	4628      	mov	r0, r5
 800876a:	f000 fba7 	bl	8008ebc <_sbrk_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d103      	bne.n	800877a <sbrk_aligned+0x26>
 8008772:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008776:	4620      	mov	r0, r4
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	1cc4      	adds	r4, r0, #3
 800877c:	f024 0403 	bic.w	r4, r4, #3
 8008780:	42a0      	cmp	r0, r4
 8008782:	d0f8      	beq.n	8008776 <sbrk_aligned+0x22>
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4628      	mov	r0, r5
 8008788:	f000 fb98 	bl	8008ebc <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d1f2      	bne.n	8008776 <sbrk_aligned+0x22>
 8008790:	e7ef      	b.n	8008772 <sbrk_aligned+0x1e>
 8008792:	bf00      	nop
 8008794:	24031140 	.word	0x24031140

08008798 <_malloc_r>:
 8008798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800879c:	1ccd      	adds	r5, r1, #3
 800879e:	f025 0503 	bic.w	r5, r5, #3
 80087a2:	3508      	adds	r5, #8
 80087a4:	2d0c      	cmp	r5, #12
 80087a6:	bf38      	it	cc
 80087a8:	250c      	movcc	r5, #12
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	4606      	mov	r6, r0
 80087ae:	db01      	blt.n	80087b4 <_malloc_r+0x1c>
 80087b0:	42a9      	cmp	r1, r5
 80087b2:	d904      	bls.n	80087be <_malloc_r+0x26>
 80087b4:	230c      	movs	r3, #12
 80087b6:	6033      	str	r3, [r6, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087be:	4f31      	ldr	r7, [pc, #196]	; (8008884 <_malloc_r+0xec>)
 80087c0:	f000 f862 	bl	8008888 <__malloc_lock>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	461c      	mov	r4, r3
 80087c8:	bb44      	cbnz	r4, 800881c <_malloc_r+0x84>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff ffc1 	bl	8008754 <sbrk_aligned>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	4604      	mov	r4, r0
 80087d6:	d150      	bne.n	800887a <_malloc_r+0xe2>
 80087d8:	683c      	ldr	r4, [r7, #0]
 80087da:	4621      	mov	r1, r4
 80087dc:	2900      	cmp	r1, #0
 80087de:	d141      	bne.n	8008864 <_malloc_r+0xcc>
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d044      	beq.n	800886e <_malloc_r+0xd6>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	4630      	mov	r0, r6
 80087e8:	eb04 0803 	add.w	r8, r4, r3
 80087ec:	f000 fb66 	bl	8008ebc <_sbrk_r>
 80087f0:	4580      	cmp	r8, r0
 80087f2:	d13c      	bne.n	800886e <_malloc_r+0xd6>
 80087f4:	6821      	ldr	r1, [r4, #0]
 80087f6:	1a6d      	subs	r5, r5, r1
 80087f8:	4629      	mov	r1, r5
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ffaa 	bl	8008754 <sbrk_aligned>
 8008800:	3001      	adds	r0, #1
 8008802:	d034      	beq.n	800886e <_malloc_r+0xd6>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	442b      	add	r3, r5
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d036      	beq.n	800887e <_malloc_r+0xe6>
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	42a2      	cmp	r2, r4
 8008814:	d129      	bne.n	800886a <_malloc_r+0xd2>
 8008816:	2200      	movs	r2, #0
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	e00e      	b.n	800883a <_malloc_r+0xa2>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	1b52      	subs	r2, r2, r5
 8008820:	d41d      	bmi.n	800885e <_malloc_r+0xc6>
 8008822:	2a0b      	cmp	r2, #11
 8008824:	d916      	bls.n	8008854 <_malloc_r+0xbc>
 8008826:	1961      	adds	r1, r4, r5
 8008828:	42a3      	cmp	r3, r4
 800882a:	6025      	str	r5, [r4, #0]
 800882c:	bf18      	it	ne
 800882e:	6059      	strne	r1, [r3, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	bf08      	it	eq
 8008834:	6039      	streq	r1, [r7, #0]
 8008836:	5162      	str	r2, [r4, r5]
 8008838:	604b      	str	r3, [r1, #4]
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f82a 	bl	8008894 <__malloc_unlock>
 8008840:	f104 000b 	add.w	r0, r4, #11
 8008844:	1d23      	adds	r3, r4, #4
 8008846:	f020 0007 	bic.w	r0, r0, #7
 800884a:	1ac2      	subs	r2, r0, r3
 800884c:	d0b5      	beq.n	80087ba <_malloc_r+0x22>
 800884e:	1a1b      	subs	r3, r3, r0
 8008850:	50a3      	str	r3, [r4, r2]
 8008852:	e7b2      	b.n	80087ba <_malloc_r+0x22>
 8008854:	42a3      	cmp	r3, r4
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	d1de      	bne.n	8008818 <_malloc_r+0x80>
 800885a:	603a      	str	r2, [r7, #0]
 800885c:	e7ed      	b.n	800883a <_malloc_r+0xa2>
 800885e:	4623      	mov	r3, r4
 8008860:	6864      	ldr	r4, [r4, #4]
 8008862:	e7b1      	b.n	80087c8 <_malloc_r+0x30>
 8008864:	460c      	mov	r4, r1
 8008866:	6849      	ldr	r1, [r1, #4]
 8008868:	e7b8      	b.n	80087dc <_malloc_r+0x44>
 800886a:	4613      	mov	r3, r2
 800886c:	e7ce      	b.n	800880c <_malloc_r+0x74>
 800886e:	230c      	movs	r3, #12
 8008870:	6033      	str	r3, [r6, #0]
 8008872:	4630      	mov	r0, r6
 8008874:	f000 f80e 	bl	8008894 <__malloc_unlock>
 8008878:	e79e      	b.n	80087b8 <_malloc_r+0x20>
 800887a:	6005      	str	r5, [r0, #0]
 800887c:	e7dd      	b.n	800883a <_malloc_r+0xa2>
 800887e:	605b      	str	r3, [r3, #4]
 8008880:	deff      	udf	#255	; 0xff
 8008882:	bf00      	nop
 8008884:	24031144 	.word	0x24031144

08008888 <__malloc_lock>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__malloc_lock+0x8>)
 800888a:	f7ff bf17 	b.w	80086bc <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	2403113c 	.word	0x2403113c

08008894 <__malloc_unlock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_unlock+0x8>)
 8008896:	f7ff bf12 	b.w	80086be <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	2403113c 	.word	0x2403113c

080088a0 <__ssputs_r>:
 80088a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	688e      	ldr	r6, [r1, #8]
 80088a6:	461f      	mov	r7, r3
 80088a8:	42be      	cmp	r6, r7
 80088aa:	680b      	ldr	r3, [r1, #0]
 80088ac:	4682      	mov	sl, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4690      	mov	r8, r2
 80088b2:	d82d      	bhi.n	8008910 <__ssputs_r+0x70>
 80088b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088bc:	d026      	beq.n	800890c <__ssputs_r+0x6c>
 80088be:	6965      	ldr	r5, [r4, #20]
 80088c0:	6909      	ldr	r1, [r1, #16]
 80088c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088c6:	eba3 0901 	sub.w	r9, r3, r1
 80088ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088ce:	1c7b      	adds	r3, r7, #1
 80088d0:	444b      	add	r3, r9
 80088d2:	106d      	asrs	r5, r5, #1
 80088d4:	429d      	cmp	r5, r3
 80088d6:	bf38      	it	cc
 80088d8:	461d      	movcc	r5, r3
 80088da:	0553      	lsls	r3, r2, #21
 80088dc:	d527      	bpl.n	800892e <__ssputs_r+0x8e>
 80088de:	4629      	mov	r1, r5
 80088e0:	f7ff ff5a 	bl	8008798 <_malloc_r>
 80088e4:	4606      	mov	r6, r0
 80088e6:	b360      	cbz	r0, 8008942 <__ssputs_r+0xa2>
 80088e8:	6921      	ldr	r1, [r4, #16]
 80088ea:	464a      	mov	r2, r9
 80088ec:	f000 faf6 	bl	8008edc <memcpy>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	6126      	str	r6, [r4, #16]
 80088fe:	6165      	str	r5, [r4, #20]
 8008900:	444e      	add	r6, r9
 8008902:	eba5 0509 	sub.w	r5, r5, r9
 8008906:	6026      	str	r6, [r4, #0]
 8008908:	60a5      	str	r5, [r4, #8]
 800890a:	463e      	mov	r6, r7
 800890c:	42be      	cmp	r6, r7
 800890e:	d900      	bls.n	8008912 <__ssputs_r+0x72>
 8008910:	463e      	mov	r6, r7
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	4632      	mov	r2, r6
 8008916:	4641      	mov	r1, r8
 8008918:	f000 fab6 	bl	8008e88 <memmove>
 800891c:	68a3      	ldr	r3, [r4, #8]
 800891e:	1b9b      	subs	r3, r3, r6
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	4433      	add	r3, r6
 8008926:	6023      	str	r3, [r4, #0]
 8008928:	2000      	movs	r0, #0
 800892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892e:	462a      	mov	r2, r5
 8008930:	f000 fae2 	bl	8008ef8 <_realloc_r>
 8008934:	4606      	mov	r6, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d1e0      	bne.n	80088fc <__ssputs_r+0x5c>
 800893a:	6921      	ldr	r1, [r4, #16]
 800893c:	4650      	mov	r0, sl
 800893e:	f7ff febf 	bl	80086c0 <_free_r>
 8008942:	230c      	movs	r3, #12
 8008944:	f8ca 3000 	str.w	r3, [sl]
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008954:	e7e9      	b.n	800892a <__ssputs_r+0x8a>
	...

08008958 <_svfiprintf_r>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4698      	mov	r8, r3
 800895e:	898b      	ldrh	r3, [r1, #12]
 8008960:	061b      	lsls	r3, r3, #24
 8008962:	b09d      	sub	sp, #116	; 0x74
 8008964:	4607      	mov	r7, r0
 8008966:	460d      	mov	r5, r1
 8008968:	4614      	mov	r4, r2
 800896a:	d510      	bpl.n	800898e <_svfiprintf_r+0x36>
 800896c:	690b      	ldr	r3, [r1, #16]
 800896e:	b973      	cbnz	r3, 800898e <_svfiprintf_r+0x36>
 8008970:	2140      	movs	r1, #64	; 0x40
 8008972:	f7ff ff11 	bl	8008798 <_malloc_r>
 8008976:	6028      	str	r0, [r5, #0]
 8008978:	6128      	str	r0, [r5, #16]
 800897a:	b930      	cbnz	r0, 800898a <_svfiprintf_r+0x32>
 800897c:	230c      	movs	r3, #12
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008984:	b01d      	add	sp, #116	; 0x74
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	2340      	movs	r3, #64	; 0x40
 800898c:	616b      	str	r3, [r5, #20]
 800898e:	2300      	movs	r3, #0
 8008990:	9309      	str	r3, [sp, #36]	; 0x24
 8008992:	2320      	movs	r3, #32
 8008994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008998:	f8cd 800c 	str.w	r8, [sp, #12]
 800899c:	2330      	movs	r3, #48	; 0x30
 800899e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8008b3c <_svfiprintf_r+0x1e4>
 80089a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a6:	f04f 0901 	mov.w	r9, #1
 80089aa:	4623      	mov	r3, r4
 80089ac:	469a      	mov	sl, r3
 80089ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b2:	b10a      	cbz	r2, 80089b8 <_svfiprintf_r+0x60>
 80089b4:	2a25      	cmp	r2, #37	; 0x25
 80089b6:	d1f9      	bne.n	80089ac <_svfiprintf_r+0x54>
 80089b8:	ebba 0b04 	subs.w	fp, sl, r4
 80089bc:	d00b      	beq.n	80089d6 <_svfiprintf_r+0x7e>
 80089be:	465b      	mov	r3, fp
 80089c0:	4622      	mov	r2, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ff6b 	bl	80088a0 <__ssputs_r>
 80089ca:	3001      	adds	r0, #1
 80089cc:	f000 80a7 	beq.w	8008b1e <_svfiprintf_r+0x1c6>
 80089d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d2:	445a      	add	r2, fp
 80089d4:	9209      	str	r2, [sp, #36]	; 0x24
 80089d6:	f89a 3000 	ldrb.w	r3, [sl]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 809f 	beq.w	8008b1e <_svfiprintf_r+0x1c6>
 80089e0:	2300      	movs	r3, #0
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ea:	f10a 0a01 	add.w	sl, sl, #1
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f6:	931a      	str	r3, [sp, #104]	; 0x68
 80089f8:	4654      	mov	r4, sl
 80089fa:	2205      	movs	r2, #5
 80089fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a00:	484e      	ldr	r0, [pc, #312]	; (8008b3c <_svfiprintf_r+0x1e4>)
 8008a02:	f7f7 fc55 	bl	80002b0 <memchr>
 8008a06:	9a04      	ldr	r2, [sp, #16]
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_svfiprintf_r+0xea>
 8008a0a:	06d0      	lsls	r0, r2, #27
 8008a0c:	bf44      	itt	mi
 8008a0e:	2320      	movmi	r3, #32
 8008a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a14:	0711      	lsls	r1, r2, #28
 8008a16:	bf44      	itt	mi
 8008a18:	232b      	movmi	r3, #43	; 0x2b
 8008a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a22:	2b2a      	cmp	r3, #42	; 0x2a
 8008a24:	d015      	beq.n	8008a52 <_svfiprintf_r+0xfa>
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	4654      	mov	r4, sl
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f04f 0c0a 	mov.w	ip, #10
 8008a30:	4621      	mov	r1, r4
 8008a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a36:	3b30      	subs	r3, #48	; 0x30
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	d94b      	bls.n	8008ad4 <_svfiprintf_r+0x17c>
 8008a3c:	b1b0      	cbz	r0, 8008a6c <_svfiprintf_r+0x114>
 8008a3e:	9207      	str	r2, [sp, #28]
 8008a40:	e014      	b.n	8008a6c <_svfiprintf_r+0x114>
 8008a42:	eba0 0308 	sub.w	r3, r0, r8
 8008a46:	fa09 f303 	lsl.w	r3, r9, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	46a2      	mov	sl, r4
 8008a50:	e7d2      	b.n	80089f8 <_svfiprintf_r+0xa0>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	1d19      	adds	r1, r3, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	9103      	str	r1, [sp, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbb      	ittet	lt
 8008a5e:	425b      	neglt	r3, r3
 8008a60:	f042 0202 	orrlt.w	r2, r2, #2
 8008a64:	9307      	strge	r3, [sp, #28]
 8008a66:	9307      	strlt	r3, [sp, #28]
 8008a68:	bfb8      	it	lt
 8008a6a:	9204      	strlt	r2, [sp, #16]
 8008a6c:	7823      	ldrb	r3, [r4, #0]
 8008a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a70:	d10a      	bne.n	8008a88 <_svfiprintf_r+0x130>
 8008a72:	7863      	ldrb	r3, [r4, #1]
 8008a74:	2b2a      	cmp	r3, #42	; 0x2a
 8008a76:	d132      	bne.n	8008ade <_svfiprintf_r+0x186>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	1d1a      	adds	r2, r3, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9203      	str	r2, [sp, #12]
 8008a80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a84:	3402      	adds	r4, #2
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8008b4c <_svfiprintf_r+0x1f4>
 8008a8c:	7821      	ldrb	r1, [r4, #0]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	4650      	mov	r0, sl
 8008a92:	f7f7 fc0d 	bl	80002b0 <memchr>
 8008a96:	b138      	cbz	r0, 8008aa8 <_svfiprintf_r+0x150>
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	eba0 000a 	sub.w	r0, r0, sl
 8008a9e:	2240      	movs	r2, #64	; 0x40
 8008aa0:	4082      	lsls	r2, r0
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	3401      	adds	r4, #1
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aac:	4824      	ldr	r0, [pc, #144]	; (8008b40 <_svfiprintf_r+0x1e8>)
 8008aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab2:	2206      	movs	r2, #6
 8008ab4:	f7f7 fbfc 	bl	80002b0 <memchr>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d036      	beq.n	8008b2a <_svfiprintf_r+0x1d2>
 8008abc:	4b21      	ldr	r3, [pc, #132]	; (8008b44 <_svfiprintf_r+0x1ec>)
 8008abe:	bb1b      	cbnz	r3, 8008b08 <_svfiprintf_r+0x1b0>
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	3307      	adds	r3, #7
 8008ac4:	f023 0307 	bic.w	r3, r3, #7
 8008ac8:	3308      	adds	r3, #8
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ace:	4433      	add	r3, r6
 8008ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad2:	e76a      	b.n	80089aa <_svfiprintf_r+0x52>
 8008ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad8:	460c      	mov	r4, r1
 8008ada:	2001      	movs	r0, #1
 8008adc:	e7a8      	b.n	8008a30 <_svfiprintf_r+0xd8>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	3401      	adds	r4, #1
 8008ae2:	9305      	str	r3, [sp, #20]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f04f 0c0a 	mov.w	ip, #10
 8008aea:	4620      	mov	r0, r4
 8008aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af0:	3a30      	subs	r2, #48	; 0x30
 8008af2:	2a09      	cmp	r2, #9
 8008af4:	d903      	bls.n	8008afe <_svfiprintf_r+0x1a6>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0c6      	beq.n	8008a88 <_svfiprintf_r+0x130>
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	e7c4      	b.n	8008a88 <_svfiprintf_r+0x130>
 8008afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b02:	4604      	mov	r4, r0
 8008b04:	2301      	movs	r3, #1
 8008b06:	e7f0      	b.n	8008aea <_svfiprintf_r+0x192>
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <_svfiprintf_r+0x1f0>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	4638      	mov	r0, r7
 8008b14:	f3af 8000 	nop.w
 8008b18:	1c42      	adds	r2, r0, #1
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	d1d6      	bne.n	8008acc <_svfiprintf_r+0x174>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	065b      	lsls	r3, r3, #25
 8008b22:	f53f af2d 	bmi.w	8008980 <_svfiprintf_r+0x28>
 8008b26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b28:	e72c      	b.n	8008984 <_svfiprintf_r+0x2c>
 8008b2a:	ab03      	add	r3, sp, #12
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <_svfiprintf_r+0x1f0>)
 8008b32:	a904      	add	r1, sp, #16
 8008b34:	4638      	mov	r0, r7
 8008b36:	f000 f879 	bl	8008c2c <_printf_i>
 8008b3a:	e7ed      	b.n	8008b18 <_svfiprintf_r+0x1c0>
 8008b3c:	080092c0 	.word	0x080092c0
 8008b40:	080092ca 	.word	0x080092ca
 8008b44:	00000000 	.word	0x00000000
 8008b48:	080088a1 	.word	0x080088a1
 8008b4c:	080092c6 	.word	0x080092c6

08008b50 <_printf_common>:
 8008b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b54:	4616      	mov	r6, r2
 8008b56:	4698      	mov	r8, r3
 8008b58:	688a      	ldr	r2, [r1, #8]
 8008b5a:	690b      	ldr	r3, [r1, #16]
 8008b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	bfb8      	it	lt
 8008b64:	4613      	movlt	r3, r2
 8008b66:	6033      	str	r3, [r6, #0]
 8008b68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	b10a      	cbz	r2, 8008b76 <_printf_common+0x26>
 8008b72:	3301      	adds	r3, #1
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	0699      	lsls	r1, r3, #26
 8008b7a:	bf42      	ittt	mi
 8008b7c:	6833      	ldrmi	r3, [r6, #0]
 8008b7e:	3302      	addmi	r3, #2
 8008b80:	6033      	strmi	r3, [r6, #0]
 8008b82:	6825      	ldr	r5, [r4, #0]
 8008b84:	f015 0506 	ands.w	r5, r5, #6
 8008b88:	d106      	bne.n	8008b98 <_printf_common+0x48>
 8008b8a:	f104 0a19 	add.w	sl, r4, #25
 8008b8e:	68e3      	ldr	r3, [r4, #12]
 8008b90:	6832      	ldr	r2, [r6, #0]
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	dc26      	bgt.n	8008be6 <_printf_common+0x96>
 8008b98:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b9c:	6822      	ldr	r2, [r4, #0]
 8008b9e:	3b00      	subs	r3, #0
 8008ba0:	bf18      	it	ne
 8008ba2:	2301      	movne	r3, #1
 8008ba4:	0692      	lsls	r2, r2, #26
 8008ba6:	d42b      	bmi.n	8008c00 <_printf_common+0xb0>
 8008ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bac:	4641      	mov	r1, r8
 8008bae:	4638      	mov	r0, r7
 8008bb0:	47c8      	blx	r9
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d01e      	beq.n	8008bf4 <_printf_common+0xa4>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	f003 0306 	and.w	r3, r3, #6
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	bf02      	ittt	eq
 8008bc2:	68e5      	ldreq	r5, [r4, #12]
 8008bc4:	6833      	ldreq	r3, [r6, #0]
 8008bc6:	1aed      	subeq	r5, r5, r3
 8008bc8:	68a3      	ldr	r3, [r4, #8]
 8008bca:	bf0c      	ite	eq
 8008bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd0:	2500      	movne	r5, #0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	bfc4      	itt	gt
 8008bd6:	1a9b      	subgt	r3, r3, r2
 8008bd8:	18ed      	addgt	r5, r5, r3
 8008bda:	2600      	movs	r6, #0
 8008bdc:	341a      	adds	r4, #26
 8008bde:	42b5      	cmp	r5, r6
 8008be0:	d11a      	bne.n	8008c18 <_printf_common+0xc8>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e008      	b.n	8008bf8 <_printf_common+0xa8>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4652      	mov	r2, sl
 8008bea:	4641      	mov	r1, r8
 8008bec:	4638      	mov	r0, r7
 8008bee:	47c8      	blx	r9
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d103      	bne.n	8008bfc <_printf_common+0xac>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	e7c6      	b.n	8008b8e <_printf_common+0x3e>
 8008c00:	18e1      	adds	r1, r4, r3
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	2030      	movs	r0, #48	; 0x30
 8008c06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c0a:	4422      	add	r2, r4
 8008c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c14:	3302      	adds	r3, #2
 8008c16:	e7c7      	b.n	8008ba8 <_printf_common+0x58>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c8      	blx	r9
 8008c22:	3001      	adds	r0, #1
 8008c24:	d0e6      	beq.n	8008bf4 <_printf_common+0xa4>
 8008c26:	3601      	adds	r6, #1
 8008c28:	e7d9      	b.n	8008bde <_printf_common+0x8e>
	...

08008c2c <_printf_i>:
 8008c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	7e0f      	ldrb	r7, [r1, #24]
 8008c32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c34:	2f78      	cmp	r7, #120	; 0x78
 8008c36:	4691      	mov	r9, r2
 8008c38:	4680      	mov	r8, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	469a      	mov	sl, r3
 8008c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c42:	d807      	bhi.n	8008c54 <_printf_i+0x28>
 8008c44:	2f62      	cmp	r7, #98	; 0x62
 8008c46:	d80a      	bhi.n	8008c5e <_printf_i+0x32>
 8008c48:	2f00      	cmp	r7, #0
 8008c4a:	f000 80e0 	beq.w	8008e0e <_printf_i+0x1e2>
 8008c4e:	2f58      	cmp	r7, #88	; 0x58
 8008c50:	f000 80bb 	beq.w	8008dca <_printf_i+0x19e>
 8008c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c5c:	e03a      	b.n	8008cd4 <_printf_i+0xa8>
 8008c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c62:	2b15      	cmp	r3, #21
 8008c64:	d8f6      	bhi.n	8008c54 <_printf_i+0x28>
 8008c66:	a101      	add	r1, pc, #4	; (adr r1, 8008c6c <_printf_i+0x40>)
 8008c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c6c:	08008cc5 	.word	0x08008cc5
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008c55 	.word	0x08008c55
 8008c78:	08008c55 	.word	0x08008c55
 8008c7c:	08008c55 	.word	0x08008c55
 8008c80:	08008c55 	.word	0x08008c55
 8008c84:	08008cd9 	.word	0x08008cd9
 8008c88:	08008c55 	.word	0x08008c55
 8008c8c:	08008c55 	.word	0x08008c55
 8008c90:	08008c55 	.word	0x08008c55
 8008c94:	08008c55 	.word	0x08008c55
 8008c98:	08008df5 	.word	0x08008df5
 8008c9c:	08008d69 	.word	0x08008d69
 8008ca0:	08008dab 	.word	0x08008dab
 8008ca4:	08008c55 	.word	0x08008c55
 8008ca8:	08008c55 	.word	0x08008c55
 8008cac:	08008e17 	.word	0x08008e17
 8008cb0:	08008c55 	.word	0x08008c55
 8008cb4:	08008d69 	.word	0x08008d69
 8008cb8:	08008c55 	.word	0x08008c55
 8008cbc:	08008c55 	.word	0x08008c55
 8008cc0:	08008db3 	.word	0x08008db3
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	1d1a      	adds	r2, r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	602a      	str	r2, [r5, #0]
 8008ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e0ab      	b.n	8008e30 <_printf_i+0x204>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	6829      	ldr	r1, [r5, #0]
 8008cdc:	061f      	lsls	r7, r3, #24
 8008cde:	f101 0004 	add.w	r0, r1, #4
 8008ce2:	6028      	str	r0, [r5, #0]
 8008ce4:	d501      	bpl.n	8008cea <_printf_i+0xbe>
 8008ce6:	680d      	ldr	r5, [r1, #0]
 8008ce8:	e003      	b.n	8008cf2 <_printf_i+0xc6>
 8008cea:	065e      	lsls	r6, r3, #25
 8008cec:	d5fb      	bpl.n	8008ce6 <_printf_i+0xba>
 8008cee:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008cf2:	6861      	ldr	r1, [r4, #4]
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	da7a      	bge.n	8008dee <_printf_i+0x1c2>
 8008cf8:	202d      	movs	r0, #45	; 0x2d
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008d00:	60a1      	str	r1, [r4, #8]
 8008d02:	da2d      	bge.n	8008d60 <_printf_i+0x134>
 8008d04:	485e      	ldr	r0, [pc, #376]	; (8008e80 <_printf_i+0x254>)
 8008d06:	426d      	negs	r5, r5
 8008d08:	230a      	movs	r3, #10
 8008d0a:	4616      	mov	r6, r2
 8008d0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d10:	fb03 5711 	mls	r7, r3, r1, r5
 8008d14:	5dc7      	ldrb	r7, [r0, r7]
 8008d16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d1a:	462f      	mov	r7, r5
 8008d1c:	42bb      	cmp	r3, r7
 8008d1e:	460d      	mov	r5, r1
 8008d20:	d9f4      	bls.n	8008d0c <_printf_i+0xe0>
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d10b      	bne.n	8008d3e <_printf_i+0x112>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	07df      	lsls	r7, r3, #31
 8008d2a:	d508      	bpl.n	8008d3e <_printf_i+0x112>
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6861      	ldr	r1, [r4, #4]
 8008d30:	4299      	cmp	r1, r3
 8008d32:	bfde      	ittt	le
 8008d34:	2330      	movle	r3, #48	; 0x30
 8008d36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d3a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d3e:	1b92      	subs	r2, r2, r6
 8008d40:	6122      	str	r2, [r4, #16]
 8008d42:	f8cd a000 	str.w	sl, [sp]
 8008d46:	464b      	mov	r3, r9
 8008d48:	aa03      	add	r2, sp, #12
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	f7ff feff 	bl	8008b50 <_printf_common>
 8008d52:	3001      	adds	r0, #1
 8008d54:	d171      	bne.n	8008e3a <_printf_i+0x20e>
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5a:	b004      	add	sp, #16
 8008d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d60:	f023 0304 	bic.w	r3, r3, #4
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	e7cd      	b.n	8008d04 <_printf_i+0xd8>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	1d19      	adds	r1, r3, #4
 8008d6e:	6029      	str	r1, [r5, #0]
 8008d70:	0605      	lsls	r5, r0, #24
 8008d72:	d501      	bpl.n	8008d78 <_printf_i+0x14c>
 8008d74:	681d      	ldr	r5, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <_printf_i+0x152>
 8008d78:	0641      	lsls	r1, r0, #25
 8008d7a:	d5fb      	bpl.n	8008d74 <_printf_i+0x148>
 8008d7c:	881d      	ldrh	r5, [r3, #0]
 8008d7e:	4840      	ldr	r0, [pc, #256]	; (8008e80 <_printf_i+0x254>)
 8008d80:	2f6f      	cmp	r7, #111	; 0x6f
 8008d82:	bf14      	ite	ne
 8008d84:	230a      	movne	r3, #10
 8008d86:	2308      	moveq	r3, #8
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d8e:	6866      	ldr	r6, [r4, #4]
 8008d90:	60a6      	str	r6, [r4, #8]
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	dbb9      	blt.n	8008d0a <_printf_i+0xde>
 8008d96:	6821      	ldr	r1, [r4, #0]
 8008d98:	f021 0104 	bic.w	r1, r1, #4
 8008d9c:	6021      	str	r1, [r4, #0]
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	d1b3      	bne.n	8008d0a <_printf_i+0xde>
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d1b1      	bne.n	8008d0a <_printf_i+0xde>
 8008da6:	4616      	mov	r6, r2
 8008da8:	e7bb      	b.n	8008d22 <_printf_i+0xf6>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f043 0320 	orr.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	4834      	ldr	r0, [pc, #208]	; (8008e84 <_printf_i+0x258>)
 8008db4:	2778      	movs	r7, #120	; 0x78
 8008db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dba:	6829      	ldr	r1, [r5, #0]
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	1d0e      	adds	r6, r1, #4
 8008dc0:	602e      	str	r6, [r5, #0]
 8008dc2:	061e      	lsls	r6, r3, #24
 8008dc4:	d503      	bpl.n	8008dce <_printf_i+0x1a2>
 8008dc6:	680d      	ldr	r5, [r1, #0]
 8008dc8:	e004      	b.n	8008dd4 <_printf_i+0x1a8>
 8008dca:	482d      	ldr	r0, [pc, #180]	; (8008e80 <_printf_i+0x254>)
 8008dcc:	e7f3      	b.n	8008db6 <_printf_i+0x18a>
 8008dce:	065d      	lsls	r5, r3, #25
 8008dd0:	d5f9      	bpl.n	8008dc6 <_printf_i+0x19a>
 8008dd2:	880d      	ldrh	r5, [r1, #0]
 8008dd4:	07d9      	lsls	r1, r3, #31
 8008dd6:	bf44      	itt	mi
 8008dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8008ddc:	6023      	strmi	r3, [r4, #0]
 8008dde:	b10d      	cbz	r5, 8008de4 <_printf_i+0x1b8>
 8008de0:	2310      	movs	r3, #16
 8008de2:	e7d1      	b.n	8008d88 <_printf_i+0x15c>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	f023 0320 	bic.w	r3, r3, #32
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	e7f8      	b.n	8008de0 <_printf_i+0x1b4>
 8008dee:	4824      	ldr	r0, [pc, #144]	; (8008e80 <_printf_i+0x254>)
 8008df0:	230a      	movs	r3, #10
 8008df2:	e7cc      	b.n	8008d8e <_printf_i+0x162>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	6826      	ldr	r6, [r4, #0]
 8008df8:	6961      	ldr	r1, [r4, #20]
 8008dfa:	1d18      	adds	r0, r3, #4
 8008dfc:	6028      	str	r0, [r5, #0]
 8008dfe:	0635      	lsls	r5, r6, #24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0x1dc>
 8008e04:	6019      	str	r1, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0x1e2>
 8008e08:	0670      	lsls	r0, r6, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0x1d8>
 8008e0c:	8019      	strh	r1, [r3, #0]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	4616      	mov	r6, r2
 8008e14:	e795      	b.n	8008d42 <_printf_i+0x116>
 8008e16:	682b      	ldr	r3, [r5, #0]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	602a      	str	r2, [r5, #0]
 8008e1c:	681e      	ldr	r6, [r3, #0]
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7f7 fa44 	bl	80002b0 <memchr>
 8008e28:	b108      	cbz	r0, 8008e2e <_printf_i+0x202>
 8008e2a:	1b80      	subs	r0, r0, r6
 8008e2c:	6060      	str	r0, [r4, #4]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	2300      	movs	r3, #0
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e38:	e783      	b.n	8008d42 <_printf_i+0x116>
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d086      	beq.n	8008d56 <_printf_i+0x12a>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	079b      	lsls	r3, r3, #30
 8008e4c:	d414      	bmi.n	8008e78 <_printf_i+0x24c>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	4298      	cmp	r0, r3
 8008e54:	bfb8      	it	lt
 8008e56:	4618      	movlt	r0, r3
 8008e58:	e77f      	b.n	8008d5a <_printf_i+0x12e>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	f43f af76 	beq.w	8008d56 <_printf_i+0x12a>
 8008e6a:	3501      	adds	r5, #1
 8008e6c:	68e3      	ldr	r3, [r4, #12]
 8008e6e:	9903      	ldr	r1, [sp, #12]
 8008e70:	1a5b      	subs	r3, r3, r1
 8008e72:	42ab      	cmp	r3, r5
 8008e74:	dcf1      	bgt.n	8008e5a <_printf_i+0x22e>
 8008e76:	e7ea      	b.n	8008e4e <_printf_i+0x222>
 8008e78:	2500      	movs	r5, #0
 8008e7a:	f104 0619 	add.w	r6, r4, #25
 8008e7e:	e7f5      	b.n	8008e6c <_printf_i+0x240>
 8008e80:	080092d1 	.word	0x080092d1
 8008e84:	080092e2 	.word	0x080092e2

08008e88 <memmove>:
 8008e88:	4288      	cmp	r0, r1
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	eb01 0402 	add.w	r4, r1, r2
 8008e90:	d902      	bls.n	8008e98 <memmove+0x10>
 8008e92:	4284      	cmp	r4, r0
 8008e94:	4623      	mov	r3, r4
 8008e96:	d807      	bhi.n	8008ea8 <memmove+0x20>
 8008e98:	1e43      	subs	r3, r0, #1
 8008e9a:	42a1      	cmp	r1, r4
 8008e9c:	d008      	beq.n	8008eb0 <memmove+0x28>
 8008e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea6:	e7f8      	b.n	8008e9a <memmove+0x12>
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4601      	mov	r1, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	d100      	bne.n	8008eb2 <memmove+0x2a>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eba:	e7f7      	b.n	8008eac <memmove+0x24>

08008ebc <_sbrk_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d06      	ldr	r5, [pc, #24]	; (8008ed8 <_sbrk_r+0x1c>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f8 f882 	bl	8000fd0 <_sbrk>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_sbrk_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_sbrk_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	24031138 	.word	0x24031138

08008edc <memcpy>:
 8008edc:	440a      	add	r2, r1
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ee4:	d100      	bne.n	8008ee8 <memcpy+0xc>
 8008ee6:	4770      	bx	lr
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef2:	4291      	cmp	r1, r2
 8008ef4:	d1f9      	bne.n	8008eea <memcpy+0xe>
 8008ef6:	bd10      	pop	{r4, pc}

08008ef8 <_realloc_r>:
 8008ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efc:	4680      	mov	r8, r0
 8008efe:	4615      	mov	r5, r2
 8008f00:	460c      	mov	r4, r1
 8008f02:	b921      	cbnz	r1, 8008f0e <_realloc_r+0x16>
 8008f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	4611      	mov	r1, r2
 8008f0a:	f7ff bc45 	b.w	8008798 <_malloc_r>
 8008f0e:	b92a      	cbnz	r2, 8008f1c <_realloc_r+0x24>
 8008f10:	f7ff fbd6 	bl	80086c0 <_free_r>
 8008f14:	2400      	movs	r4, #0
 8008f16:	4620      	mov	r0, r4
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	f000 f81a 	bl	8008f54 <_malloc_usable_size_r>
 8008f20:	4285      	cmp	r5, r0
 8008f22:	4606      	mov	r6, r0
 8008f24:	d802      	bhi.n	8008f2c <_realloc_r+0x34>
 8008f26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f2a:	d8f4      	bhi.n	8008f16 <_realloc_r+0x1e>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4640      	mov	r0, r8
 8008f30:	f7ff fc32 	bl	8008798 <_malloc_r>
 8008f34:	4607      	mov	r7, r0
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d0ec      	beq.n	8008f14 <_realloc_r+0x1c>
 8008f3a:	42b5      	cmp	r5, r6
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	4621      	mov	r1, r4
 8008f40:	bf28      	it	cs
 8008f42:	4632      	movcs	r2, r6
 8008f44:	f7ff ffca 	bl	8008edc <memcpy>
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fbb8 	bl	80086c0 <_free_r>
 8008f50:	463c      	mov	r4, r7
 8008f52:	e7e0      	b.n	8008f16 <_realloc_r+0x1e>

08008f54 <_malloc_usable_size_r>:
 8008f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f58:	1f18      	subs	r0, r3, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfbc      	itt	lt
 8008f5e:	580b      	ldrlt	r3, [r1, r0]
 8008f60:	18c0      	addlt	r0, r0, r3
 8008f62:	4770      	bx	lr

08008f64 <__udivmoddi4>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	4686      	mov	lr, r0
 8008f6a:	468c      	mov	ip, r1
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	9e08      	ldr	r6, [sp, #32]
 8008f70:	4615      	mov	r5, r2
 8008f72:	4674      	mov	r4, lr
 8008f74:	4619      	mov	r1, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f040 80c2 	bne.w	8009100 <__udivmoddi4+0x19c>
 8008f7c:	4285      	cmp	r5, r0
 8008f7e:	fab2 f282 	clz	r2, r2
 8008f82:	d945      	bls.n	8009010 <__udivmoddi4+0xac>
 8008f84:	b14a      	cbz	r2, 8008f9a <__udivmoddi4+0x36>
 8008f86:	f1c2 0320 	rsb	r3, r2, #32
 8008f8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8008f8e:	fa2e f303 	lsr.w	r3, lr, r3
 8008f92:	4095      	lsls	r5, r2
 8008f94:	ea43 0c0c 	orr.w	ip, r3, ip
 8008f98:	4094      	lsls	r4, r2
 8008f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008f9e:	b2a8      	uxth	r0, r5
 8008fa0:	fbbc f8fe 	udiv	r8, ip, lr
 8008fa4:	0c23      	lsrs	r3, r4, #16
 8008fa6:	fb0e cc18 	mls	ip, lr, r8, ip
 8008faa:	fb08 f900 	mul.w	r9, r8, r0
 8008fae:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8008fb2:	4599      	cmp	r9, r3
 8008fb4:	d928      	bls.n	8009008 <__udivmoddi4+0xa4>
 8008fb6:	18eb      	adds	r3, r5, r3
 8008fb8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8008fbc:	d204      	bcs.n	8008fc8 <__udivmoddi4+0x64>
 8008fbe:	4599      	cmp	r9, r3
 8008fc0:	d902      	bls.n	8008fc8 <__udivmoddi4+0x64>
 8008fc2:	f1a8 0702 	sub.w	r7, r8, #2
 8008fc6:	442b      	add	r3, r5
 8008fc8:	eba3 0309 	sub.w	r3, r3, r9
 8008fcc:	b2a4      	uxth	r4, r4
 8008fce:	fbb3 fcfe 	udiv	ip, r3, lr
 8008fd2:	fb0e 331c 	mls	r3, lr, ip, r3
 8008fd6:	fb0c f000 	mul.w	r0, ip, r0
 8008fda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008fde:	42a0      	cmp	r0, r4
 8008fe0:	d914      	bls.n	800900c <__udivmoddi4+0xa8>
 8008fe2:	192c      	adds	r4, r5, r4
 8008fe4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8008fe8:	d204      	bcs.n	8008ff4 <__udivmoddi4+0x90>
 8008fea:	42a0      	cmp	r0, r4
 8008fec:	d902      	bls.n	8008ff4 <__udivmoddi4+0x90>
 8008fee:	f1ac 0302 	sub.w	r3, ip, #2
 8008ff2:	442c      	add	r4, r5
 8008ff4:	1a24      	subs	r4, r4, r0
 8008ff6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
 8008ffa:	b11e      	cbz	r6, 8009004 <__udivmoddi4+0xa0>
 8008ffc:	40d4      	lsrs	r4, r2
 8008ffe:	2300      	movs	r3, #0
 8009000:	6034      	str	r4, [r6, #0]
 8009002:	6073      	str	r3, [r6, #4]
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009008:	4647      	mov	r7, r8
 800900a:	e7dd      	b.n	8008fc8 <__udivmoddi4+0x64>
 800900c:	4663      	mov	r3, ip
 800900e:	e7f1      	b.n	8008ff4 <__udivmoddi4+0x90>
 8009010:	bb92      	cbnz	r2, 8009078 <__udivmoddi4+0x114>
 8009012:	1b43      	subs	r3, r0, r5
 8009014:	2101      	movs	r1, #1
 8009016:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800901a:	b2af      	uxth	r7, r5
 800901c:	fbb3 fcfe 	udiv	ip, r3, lr
 8009020:	0c20      	lsrs	r0, r4, #16
 8009022:	fb0e 331c 	mls	r3, lr, ip, r3
 8009026:	fb0c f807 	mul.w	r8, ip, r7
 800902a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800902e:	4598      	cmp	r8, r3
 8009030:	d962      	bls.n	80090f8 <__udivmoddi4+0x194>
 8009032:	18eb      	adds	r3, r5, r3
 8009034:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8009038:	d204      	bcs.n	8009044 <__udivmoddi4+0xe0>
 800903a:	4598      	cmp	r8, r3
 800903c:	d902      	bls.n	8009044 <__udivmoddi4+0xe0>
 800903e:	f1ac 0002 	sub.w	r0, ip, #2
 8009042:	442b      	add	r3, r5
 8009044:	eba3 0308 	sub.w	r3, r3, r8
 8009048:	b2a4      	uxth	r4, r4
 800904a:	fbb3 fcfe 	udiv	ip, r3, lr
 800904e:	fb0e 331c 	mls	r3, lr, ip, r3
 8009052:	fb0c f707 	mul.w	r7, ip, r7
 8009056:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800905a:	42a7      	cmp	r7, r4
 800905c:	d94e      	bls.n	80090fc <__udivmoddi4+0x198>
 800905e:	192c      	adds	r4, r5, r4
 8009060:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8009064:	d204      	bcs.n	8009070 <__udivmoddi4+0x10c>
 8009066:	42a7      	cmp	r7, r4
 8009068:	d902      	bls.n	8009070 <__udivmoddi4+0x10c>
 800906a:	f1ac 0302 	sub.w	r3, ip, #2
 800906e:	442c      	add	r4, r5
 8009070:	1be4      	subs	r4, r4, r7
 8009072:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009076:	e7c0      	b.n	8008ffa <__udivmoddi4+0x96>
 8009078:	f1c2 0320 	rsb	r3, r2, #32
 800907c:	fa20 f103 	lsr.w	r1, r0, r3
 8009080:	4095      	lsls	r5, r2
 8009082:	4090      	lsls	r0, r2
 8009084:	fa2e f303 	lsr.w	r3, lr, r3
 8009088:	4303      	orrs	r3, r0
 800908a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800908e:	b2af      	uxth	r7, r5
 8009090:	fbb1 fcfe 	udiv	ip, r1, lr
 8009094:	fb0e 101c 	mls	r0, lr, ip, r1
 8009098:	0c19      	lsrs	r1, r3, #16
 800909a:	fb0c f807 	mul.w	r8, ip, r7
 800909e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090a2:	4588      	cmp	r8, r1
 80090a4:	fa04 f402 	lsl.w	r4, r4, r2
 80090a8:	d922      	bls.n	80090f0 <__udivmoddi4+0x18c>
 80090aa:	1869      	adds	r1, r5, r1
 80090ac:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80090b0:	d204      	bcs.n	80090bc <__udivmoddi4+0x158>
 80090b2:	4588      	cmp	r8, r1
 80090b4:	d902      	bls.n	80090bc <__udivmoddi4+0x158>
 80090b6:	f1ac 0002 	sub.w	r0, ip, #2
 80090ba:	4429      	add	r1, r5
 80090bc:	eba1 0108 	sub.w	r1, r1, r8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	fbb1 fcfe 	udiv	ip, r1, lr
 80090c6:	fb0e 111c 	mls	r1, lr, ip, r1
 80090ca:	fb0c f707 	mul.w	r7, ip, r7
 80090ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80090d2:	429f      	cmp	r7, r3
 80090d4:	d90e      	bls.n	80090f4 <__udivmoddi4+0x190>
 80090d6:	18eb      	adds	r3, r5, r3
 80090d8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80090dc:	d204      	bcs.n	80090e8 <__udivmoddi4+0x184>
 80090de:	429f      	cmp	r7, r3
 80090e0:	d902      	bls.n	80090e8 <__udivmoddi4+0x184>
 80090e2:	f1ac 0102 	sub.w	r1, ip, #2
 80090e6:	442b      	add	r3, r5
 80090e8:	1bdb      	subs	r3, r3, r7
 80090ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090ee:	e792      	b.n	8009016 <__udivmoddi4+0xb2>
 80090f0:	4660      	mov	r0, ip
 80090f2:	e7e3      	b.n	80090bc <__udivmoddi4+0x158>
 80090f4:	4661      	mov	r1, ip
 80090f6:	e7f7      	b.n	80090e8 <__udivmoddi4+0x184>
 80090f8:	4660      	mov	r0, ip
 80090fa:	e7a3      	b.n	8009044 <__udivmoddi4+0xe0>
 80090fc:	4663      	mov	r3, ip
 80090fe:	e7b7      	b.n	8009070 <__udivmoddi4+0x10c>
 8009100:	4283      	cmp	r3, r0
 8009102:	d906      	bls.n	8009112 <__udivmoddi4+0x1ae>
 8009104:	b916      	cbnz	r6, 800910c <__udivmoddi4+0x1a8>
 8009106:	2100      	movs	r1, #0
 8009108:	4608      	mov	r0, r1
 800910a:	e77b      	b.n	8009004 <__udivmoddi4+0xa0>
 800910c:	e9c6 e000 	strd	lr, r0, [r6]
 8009110:	e7f9      	b.n	8009106 <__udivmoddi4+0x1a2>
 8009112:	fab3 f783 	clz	r7, r3
 8009116:	b98f      	cbnz	r7, 800913c <__udivmoddi4+0x1d8>
 8009118:	4283      	cmp	r3, r0
 800911a:	d301      	bcc.n	8009120 <__udivmoddi4+0x1bc>
 800911c:	4572      	cmp	r2, lr
 800911e:	d808      	bhi.n	8009132 <__udivmoddi4+0x1ce>
 8009120:	ebbe 0402 	subs.w	r4, lr, r2
 8009124:	eb60 0303 	sbc.w	r3, r0, r3
 8009128:	2001      	movs	r0, #1
 800912a:	469c      	mov	ip, r3
 800912c:	b91e      	cbnz	r6, 8009136 <__udivmoddi4+0x1d2>
 800912e:	2100      	movs	r1, #0
 8009130:	e768      	b.n	8009004 <__udivmoddi4+0xa0>
 8009132:	4638      	mov	r0, r7
 8009134:	e7fa      	b.n	800912c <__udivmoddi4+0x1c8>
 8009136:	e9c6 4c00 	strd	r4, ip, [r6]
 800913a:	e7f8      	b.n	800912e <__udivmoddi4+0x1ca>
 800913c:	f1c7 0c20 	rsb	ip, r7, #32
 8009140:	40bb      	lsls	r3, r7
 8009142:	fa22 f40c 	lsr.w	r4, r2, ip
 8009146:	431c      	orrs	r4, r3
 8009148:	fa2e f10c 	lsr.w	r1, lr, ip
 800914c:	fa20 f30c 	lsr.w	r3, r0, ip
 8009150:	40b8      	lsls	r0, r7
 8009152:	4301      	orrs	r1, r0
 8009154:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8009158:	fa0e f507 	lsl.w	r5, lr, r7
 800915c:	fbb3 f8f9 	udiv	r8, r3, r9
 8009160:	fa1f fe84 	uxth.w	lr, r4
 8009164:	fb09 3018 	mls	r0, r9, r8, r3
 8009168:	0c0b      	lsrs	r3, r1, #16
 800916a:	fb08 fa0e 	mul.w	sl, r8, lr
 800916e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009172:	459a      	cmp	sl, r3
 8009174:	fa02 f207 	lsl.w	r2, r2, r7
 8009178:	d940      	bls.n	80091fc <__udivmoddi4+0x298>
 800917a:	18e3      	adds	r3, r4, r3
 800917c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8009180:	d204      	bcs.n	800918c <__udivmoddi4+0x228>
 8009182:	459a      	cmp	sl, r3
 8009184:	d902      	bls.n	800918c <__udivmoddi4+0x228>
 8009186:	f1a8 0002 	sub.w	r0, r8, #2
 800918a:	4423      	add	r3, r4
 800918c:	eba3 030a 	sub.w	r3, r3, sl
 8009190:	b289      	uxth	r1, r1
 8009192:	fbb3 f8f9 	udiv	r8, r3, r9
 8009196:	fb09 3318 	mls	r3, r9, r8, r3
 800919a:	fb08 fe0e 	mul.w	lr, r8, lr
 800919e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80091a2:	458e      	cmp	lr, r1
 80091a4:	d92c      	bls.n	8009200 <__udivmoddi4+0x29c>
 80091a6:	1861      	adds	r1, r4, r1
 80091a8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80091ac:	d204      	bcs.n	80091b8 <__udivmoddi4+0x254>
 80091ae:	458e      	cmp	lr, r1
 80091b0:	d902      	bls.n	80091b8 <__udivmoddi4+0x254>
 80091b2:	f1a8 0302 	sub.w	r3, r8, #2
 80091b6:	4421      	add	r1, r4
 80091b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80091bc:	fba0 9802 	umull	r9, r8, r0, r2
 80091c0:	eba1 010e 	sub.w	r1, r1, lr
 80091c4:	4541      	cmp	r1, r8
 80091c6:	46ce      	mov	lr, r9
 80091c8:	4643      	mov	r3, r8
 80091ca:	d302      	bcc.n	80091d2 <__udivmoddi4+0x26e>
 80091cc:	d106      	bne.n	80091dc <__udivmoddi4+0x278>
 80091ce:	454d      	cmp	r5, r9
 80091d0:	d204      	bcs.n	80091dc <__udivmoddi4+0x278>
 80091d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80091d6:	eb68 0304 	sbc.w	r3, r8, r4
 80091da:	3801      	subs	r0, #1
 80091dc:	2e00      	cmp	r6, #0
 80091de:	d0a6      	beq.n	800912e <__udivmoddi4+0x1ca>
 80091e0:	ebb5 020e 	subs.w	r2, r5, lr
 80091e4:	eb61 0103 	sbc.w	r1, r1, r3
 80091e8:	fa01 fc0c 	lsl.w	ip, r1, ip
 80091ec:	fa22 f307 	lsr.w	r3, r2, r7
 80091f0:	ea4c 0303 	orr.w	r3, ip, r3
 80091f4:	40f9      	lsrs	r1, r7
 80091f6:	e9c6 3100 	strd	r3, r1, [r6]
 80091fa:	e798      	b.n	800912e <__udivmoddi4+0x1ca>
 80091fc:	4640      	mov	r0, r8
 80091fe:	e7c5      	b.n	800918c <__udivmoddi4+0x228>
 8009200:	4643      	mov	r3, r8
 8009202:	e7d9      	b.n	80091b8 <__udivmoddi4+0x254>

08009204 <_init>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr

08009210 <_fini>:
 8009210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009212:	bf00      	nop
 8009214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009216:	bc08      	pop	{r3}
 8009218:	469e      	mov	lr, r3
 800921a:	4770      	bx	lr
